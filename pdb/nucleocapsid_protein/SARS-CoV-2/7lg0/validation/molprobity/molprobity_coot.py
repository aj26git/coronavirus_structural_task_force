# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  40 ', 'ALA', 0.01329268368552374, (22.159999999999993, 16.061999999999998, -16.516))]
data['omega'] = [('A', ' 210 ', 'PRO', None, (28.360000000000014, 30.803999999999995, 9.721)), ('B', '  32 ', 'PRO', None, (5.5729999999999995, 27.298, -9.11))]
data['rota'] = [('A', '  58 ', 'GLU', 0.05257654515872306, (32.913, 3.9360000000000004, -5.125)), ('A', '  68 ', 'LYS', 0.1641376217778506, (18.263999999999992, 6.351999999999997, -8.964)), ('A', '  79 ', 'ARG', 0.04998082107593167, (1.389, 8.862, -8.702)), ('A', '  82 ', 'ARG', 0.004874188289580564, (-2.27, 12.51, -7.836)), ('A', ' 110 ', 'LEU', 0.1937657071154502, (20.092, 16.561, 19.08)), ('A', ' 121 ', 'LYS', 0.14431115835002015, (2.476999999999998, 23.145, 0.692)), ('A', ' 148 ', 'GLU', 0.04098157971460466, (1.6969999999999992, 4.315, 11.267)), ('A', ' 151 ', 'ARG', 0.006051544886037085, (5.803, 1.366, 11.788999999999998)), ('A', ' 155 ', 'GLN', 0.0, (13.032999999999998, 2.8590000000000013, 10.867)), ('A', ' 169 ', 'ARG', 0.0788291662774701, (30.88, 12.708999999999996, 11.674)), ('A', ' 176 ', 'LYS', 0.09758499581619824, (38.092, 20.206, 9.407)), ('A', ' 196 ', 'ASP', 0.23646948463658962, (16.995999999999995, 67.859, 5.24)), ('A', ' 215 ', 'LEU', 0.0687133506359583, (20.767, 42.507, 13.087)), ('B', '   4 ', 'THR', 0.04359582763709064, (5.727, 34.977, -7.08)), ('B', '   6 ', 'LYS', 0.0, (11.252, 37.531, -4.369)), ('B', '  19 ', 'LYS', 0.12914884085703798, (37.18999999999999, 47.735, -9.244)), ('B', '  47 ', 'GLU', 0.07281704442183339, (26.219999999999988, 36.128, -21.664)), ('B', '  47 ', 'GLU', 0.09687443222500872, (25.97, 36.15600000000001, -21.911)), ('B', '  57 ', 'SER', 0.2899467371752109, (15.018999999999998, 26.288999999999998, 2.627)), ('B', '  61 ', 'SER', 0.01071998049155809, (10.946, 28.144, -0.451)), ('B', '  91 ', 'LYS', 0.28300515415478855, (10.146, 41.627, -13.492))]
data['cbeta'] = []
data['probe'] = [(' A 133  TRP  HB2', ' A 144  GLN HE21', -0.697, (1.023, 11.26, 11.399)), (' A 152  GLU  O  ', ' A 156  ARG  HG2', -0.594, (10.623, 5.06, 9.421)), (' A  20  PRO  HG2', ' A  75 AARG  HG2', -0.578, (8.492, 10.137, -12.324)), (' A  23  ILE HD11', ' B  54  LEU HD23', -0.556, (14.922, 21.558, -8.553)), (' A 117  ALA  HB2', ' B  60  TRP  CE2', -0.515, (7.469, 21.274, 2.352)), (' A  21  ARG  HD2', ' A  39 BASP  CG ', -0.49, (15.539, 16.936, -15.807)), (' A 232 BGLU  HG2', ' B   8  GLN HE21', -0.481, (16.496, 38.622, 0.432)), (' A 232 BGLU  HG2', ' B   8  GLN  NE2', -0.477, (16.864, 39.076, 0.388)), (' A 159  TYR  CZ ', ' C   3  ARG  HB3', -0.471, (19.405, 8.714, 5.476)), (' A 187  THR  HA ', ' A 204  TRP  O  ', -0.454, (28.7, 45.468, 8.971)), (' A  21  ARG  HD2', ' A  39 AASP  CG ', -0.45, (15.473, 16.774, -15.352)), (' A  23  ILE  CD1', ' B  54  LEU HD23', -0.431, (15.379, 21.366, -8.352)), (' B  29  GLY  HA2', ' B  61  SER  HB2', -0.423, (10.017, 30.766, -1.218)), (' A 155 BGLN  H  ', ' A 155 BGLN  HG3', -0.42, (11.046, 1.565, 11.507)), (' A  14  ARG HH22', ' A  39 BASP  CG ', -0.414, (14.528, 16.091, -17.005))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
