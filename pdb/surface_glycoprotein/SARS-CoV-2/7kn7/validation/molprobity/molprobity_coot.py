# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('L', '  68 ', 'GLY', 0.0111503, (50.27699999999999, 11.246000000000004, 6.738000000000001))]
data['omega'] = [('H', ' 147 ', 'PRO', None, (44.947, 9.372, 50.97600000000001)), ('H', ' 149 ', 'PRO', None, (48.99899999999999, 13.193000000000003, 48.4)), ('L', '   8 ', 'PRO', None, (61.587, 5.502000000000002, 20.051000000000002)), ('L', '  95 ', 'PRO', None, (37.94, 11.114000000000004, 18.436)), ('L', ' 141 ', 'PRO', None, (73.487, 2.355, 34.445))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B  50  CYS  SG ', ' B 100B CYS  SG ', -1.297, (27.489, -1.086, -2.41)), (' B  34  ILE HG21', ' B  78  VAL HG11', -0.874, (25.131, -4.714, 6.045)), (' H  66  ARG  NH2', ' H  86  ASP  OD2', -0.754, (34.619, 8.238, 35.078)), (' B  82  MET  HE2', ' B  82C LEU HD21', -0.679, (35.952, -15.514, 4.712)), (' B   2  VAL  HA ', ' B  25  SER  O  ', -0.613, (21.455, 1.387, 16.119)), (' H  12  ILE HD11', ' H  18  LEU HD22', -0.607, (37.046, 13.839, 42.64)), (' B  22  CYS  HB3', ' B  78  VAL  CG1', -0.552, (25.516, -6.595, 8.106)), (' H  62  SER  O  ', ' H  66  ARG  NH1', -0.543, (32.598, 7.282, 31.823)), (' H  33  TYR  HB2', ' H  95  ASP  O  ', -0.529, (40.49, 26.479, 21.54)), (' B 100F TRP  CZ2', ' B 103  ARG  HD3', -0.51, (34.675, 2.753, 10.891)), (' B  22  CYS  HB3', ' B  78  VAL HG13', -0.504, (25.582, -6.843, 8.095)), (' B  12  VAL HG11', ' B  82C LEU HD13', -0.478, (36.908, -19.057, 7.466)), (' A 418  ILE  HA ', ' A 422  ASN HD22', -0.474, (31.113, 25.101, 10.089)), (' A 392  PHE  CD1', ' A 515  PHE  HB3', -0.471, (8.73, 21.078, -0.316)), (' A 439  ASN  O  ', ' A 443  SER  HB2', -0.471, (40.67, 16.24, -5.974)), (' A 335  LEU HD23', ' A 362  VAL  O  ', -0.471, (11.109, 20.017, -14.21)), (' H  34  MET  HE2', ' H  78  LEU HD22', -0.467, (39.564, 25.551, 30.1)), (' L  33  LEU HD13', ' L  34  ALA  N  ', -0.467, (51.462, 16.534, 16.309)), (' B  50  CYS  SG ', ' B 100B CYS  CB ', -0.466, (27.875, -0.357, -2.234)), (' H  47  TRP  HZ2', ' H  50  VAL HG12', -0.463, (35.988, 17.841, 23.57)), (' A 489  TYR  OH ', ' H  94  ARG  NH2', -0.461, (44.448, 32.715, 21.277)), (' H 209  LYS  HE2', ' L 123  GLU  OE1', -0.461, (58.866, 5.534, 65.238)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.46, (58.745, 19.417, 24.123)), (' H  18  LEU HD23', ' H  82  MET  HE3', -0.458, (36.665, 15.268, 40.196)), (' B  11  LEU HD23', ' B 110  THR  HB ', -0.458, (41.12, -18.161, 14.157)), (' B  24  ALA  O  ', ' B  76  ASN  ND2', -0.45, (18.852, -3.167, 13.552)), (' L 155  GLN  OE1', ' L 158  ASN  ND2', -0.441, (59.244, -13.8, 51.413)), (' H 195  ILE HG12', ' H 210  LYS  HA ', -0.439, (64.835, 13.411, 64.705)), (' L  37  GLN  HG3', ' L  86  TYR  CE2', -0.439, (60.174, 17.727, 25.473)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.431, (22.722, 27.062, -1.141)), (' H  18  LEU HD23', ' H  82  MET  CE ', -0.431, (36.956, 15.352, 39.681)), (' H  12  ILE  CD1', ' H  18  LEU HD22', -0.43, (37.059, 13.537, 43.006)), (' A 399  SER  HA ', ' A 510  VAL  O  ', -0.428, (25.484, 22.683, -1.42)), (' B 100F TRP  CH2', ' B 103  ARG  HB3', -0.428, (32.899, 1.267, 11.431)), (' A 431  GLY  HA3', ' A 513  LEU  O  ', -0.427, (15.252, 20.082, 1.995)), (' A 363  ALA  O  ', ' A 527  PRO  HD3', -0.426, (9.106, 16.404, -10.887)), (' H 171  GLN  NE2', ' H 177  SER  HB2', -0.425, (52.514, 0.856, 51.797)), (' A 355  ARG  HD2', ' A 396  TYR  CD1', -0.425, (16.677, 29.813, -1.083)), (' A 360  ASN  HA ', ' A 523  THR  O  ', -0.421, (6.83, 26.706, -10.267)), (' B  67  PHE  HA ', ' B  81  GLN  O  ', -0.418, (30.951, -15.122, 0.397)), (' A 378  LYS  HB3', ' A 378  LYS  HE3', -0.415, (19.026, 12.239, 6.395)), (' L 113  PRO  HB3', ' L 139  PHE  CD2', -0.414, (72.468, 1.481, 42.104)), (' H 162  GLY  O  ', ' H 182  VAL  HA ', -0.413, (70.127, 10.975, 51.183)), (' L 186  TYR  CZ ', ' L 211  ARG  HG3', -0.411, (64.204, -10.016, 62.208)), (' H  20  LEU  HG ', ' H  82  MET  HE2', -0.406, (36.864, 16.929, 38.605)), (' A 438  SER  HB3', ' A 509  ARG  HG3', -0.406, (32.601, 17.719, -4.637)), (' L 159  SER  HA ', ' L 178  THR  O  ', -0.404, (58.871, -6.05, 48.977)), (' A 403  ARG  HG2', ' A 495  TYR  CE1', -0.4, (36.714, 20.283, 5.266)), (' A 357  ARG  HB2', ' A 357  ARG  HE ', -0.4, (15.079, 32.586, -4.428))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
