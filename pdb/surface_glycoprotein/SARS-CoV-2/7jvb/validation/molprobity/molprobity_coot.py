# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 347 ', 'PHE', 0.28119782849093855, (-22.088, 9.438999999999995, -18.124000000000006)), ('A', ' 488 ', 'CYS', 0.07305692051714516, (-41.23399999999999, -13.315, -20.160000000000004)), ('C', '  62 ', 'VAL', 0.24493305708206836, (-36.593, -15.211999999999996, -38.338)), ('C', '  97 ', 'ARG', 0.0, (-45.404, -2.045, -23.660000000000004)), ('C', ' 105 ', 'ILE', 0.09779558793232392, (-51.381, -3.388, -22.863000000000007)), ('B', ' 376 ', 'THR', 0.06933232438691503, (-13.386999999999997, -25.512999999999995, -52.80000000000001)), ('B', ' 402 ', 'ILE', 0.021949337279006227, (-5.564999999999999, -28.084, -42.14500000000002)), ('D', '  62 ', 'VAL', 0.1972920180442186, (13.272999999999994, -39.64299999999999, -14.823000000000002))]
data['cbeta'] = []
data['probe'] = [(' A 378  LYS  CG ', ' A 433  VAL  HB ', -1.137, (-24.62, 11.076, -0.633)), (' B 378  LYS  CG ', ' B 433  VAL  HB ', -1.035, (-10.47, -31.96, -54.903)), (' A 378  LYS  CD ', ' A 433  VAL  HB ', -0.991, (-25.818, 10.058, -0.927)), (' C  91  VAL HG13', ' C 111  THR  O  ', -0.937, (-53.108, -8.534, -40.834)), (' A 378  LYS  HD2', ' A 433  VAL  HB ', -0.923, (-25.818, 9.796, -0.938)), (' A 378  LYS  HD2', ' A 433  VAL  CB ', -0.85, (-25.447, 9.214, -1.634)), (' A 378  LYS  HG3', ' A 433  VAL  HB ', -0.823, (-23.943, 10.149, -0.063)), (' A 483  VAL HG12', ' A 484  GLU  H  ', -0.816, (-38.742, -11.177, -26.723)), (' B 378  LYS  CD ', ' B 433  VAL  HB ', -0.804, (-10.174, -31.501, -54.804)), (' B 378  LYS  HD2', ' B 433  VAL  HB ', -0.768, (-9.734, -32.017, -54.528)), (' B 378  LYS  HG2', ' B 433  VAL  HB ', -0.734, (-11.511, -31.058, -54.046)), (' A 476  GLY  H  ', ' A 487  ASN  HB3', -0.726, (-43.56, -15.316, -16.452)), (' C  91  VAL  CG1', ' C 111  THR  O  ', -0.708, (-52.862, -9.411, -39.843)), (' D  96  ALA  HB3', ' D 106  TYR  HB2', -0.701, (11.219, -20.299, -27.537)), (' B 483  VAL HG12', ' B 484  GLU  H  ', -0.693, (12.527, -36.218, -27.621)), (' C 104  TYR  O  ', ' C 107  TRP  NE1', -0.667, (-50.567, -5.545, -26.037)), (' C  31  ARG  HB3', ' C  97  ARG  HG2', -0.658, (-41.94, -2.569, -24.333)), (' A 378  LYS  HG2', ' A 433  VAL  HB ', -0.651, (-24.817, 11.133, -1.135)), (' A 378  LYS  HD3', ' A 380  TYR  HE1', -0.647, (-25.85, 8.918, 0.903)), (' C  97  ARG  HG3', ' C  97  ARG  O  ', -0.632, (-43.479, -0.637, -23.267)), (' A 490  PHE  CZ ', ' C  55  MET  HB3', -0.622, (-32.502, -5.016, -24.951)), (' A 347  PHE  CE2', ' A 509  ARG  HD3', -0.621, (-22.862, 13.638, -15.401)), (' A 347  PHE  CE2', ' A 509  ARG  HB3', -0.618, (-23.475, 12.855, -14.379)), (' B 378  LYS  HG3', ' B 433  VAL  HB ', -0.615, (-11.307, -31.894, -54.693)), (' B 378  LYS  HD2', ' B 433  VAL  CB ', -0.606, (-9.861, -32.269, -53.933)), (' A 453  TYR  CD1', ' A 495  TYR  CE1', -0.588, (-34.786, 4.163, -16.014)), (' B 402  ILE HG22', ' B 403  ARG  H  ', -0.584, (-3.81, -26.69, -43.099)), (' A 378  LYS  HD3', ' A 380  TYR  CE1', -0.578, (-25.843, 8.618, 1.57)), (' C   3  GLN  HB2', ' C  25  SER  HB2', -0.577, (-53.083, 6.393, -30.6)), (' A 474  GLN  N  ', ' A 474  GLN  OE1', -0.574, (-37.204, -15.929, -17.085)), (' B 403  ARG  HB2', ' B 406  GLU  HG2', -0.57, (-1.888, -24.781, -44.627)), (' C   3  GLN  H  ', ' C  25  SER  HB3', -0.562, (-51.892, 6.471, -29.241)), (' C  30  HIS  ND1', ' C  97  ARG  O  ', -0.558, (-45.064, 1.352, -23.18)), (' A 376  THR HG21', ' A 601  CAC AS  ', -0.553, (-30.284, 13.406, -2.385)), (' D  38  ALA  O  ', ' D  41  LYS  O  ', -0.553, (26.887, -29.911, -17.638)), (' A 497  PHE  CE2', ' A 507  PRO  HB3', -0.547, (-32.284, 11.71, -17.337)), (' A 476  GLY  N  ', ' A 487  ASN  HB3', -0.543, (-43.793, -15.514, -15.543)), (' B 454  ARG  NH1', ' B 467  ASP  OD2', -0.538, (3.486, -40.155, -38.273)), (' D  27  ALA  HB1', ' D  30  HIS  CD2', -0.532, (5.788, -19.044, -28.479)), (' B 351  TYR  CE1', ' B 452  LEU  HB2', -0.523, (-1.636, -33.582, -35.119)), (' C  50  GLY  HA2', ' C 201  CAC  O2 ', -0.52, (-37.29, -0.413, -25.825)), (' B 403  ARG  HG3', ' B 495  TYR  CE1', -0.519, (-1.892, -25.731, -40.855)), (' B 490  PHE  HB3', ' D  97  ARG HH12', -0.519, (8.936, -32.278, -31.736)), (' B 350  VAL HG22', ' B 422  ASN  HB3', -0.51, (-1.657, -34.755, -42.934)), (' A 414  GLN  O  ', ' A 424  LYS  NZ ', -0.509, (-30.987, -1.201, -0.192)), (' D  12  VAL HG11', ' D  84  LEU HD22', -0.509, (15.79, -31.448, -5.543)), (' B 402  ILE HG23', ' B 495  TYR  OH ', -0.502, (-2.026, -28.811, -41.84)), (' B 400  PHE  CE2', ' B 402  ILE HD11', -0.5, (-6.424, -32.648, -45.199)), (' B 351  TYR  HE1', ' B 452  LEU  HB2', -0.499, (-2.174, -33.513, -34.909)), (' B 414  GLN  O  ', ' B 424  LYS  NZ ', -0.495, (2.193, -35.323, -53.775)), (' A 458  LYS  HG3', ' A 459  SER  H  ', -0.495, (-31.732, -13.027, -9.486)), (' A 378  LYS  HG2', ' A 433  VAL  O  ', -0.494, (-24.748, 11.803, -1.389)), (' B 476  GLY  HA3', ' B 487  ASN  HB3', -0.493, (20.717, -34.218, -36.741)), (' C  91  VAL HG22', ' C 112  GLN  HG2', -0.491, (-54.162, -11.17, -41.631)), (' C  12  VAL HG21', ' C  84  LEU HD12', -0.491, (-43.091, -11.185, -48.961)), (' B 406  GLU  HB3', ' B 418  ILE HG13', -0.49, (-0.7, -28.53, -45.812)), (' A 337  PRO  HB2', ' A 340  GLU  HB2', -0.488, (-10.266, 12.893, -13.735)), (' B 407  VAL  O  ', ' B 410  ILE HG22', -0.484, (-6.075, -28.533, -50.994)), (' B 484  GLU  OE1', ' D  31  ARG  NE ', -0.483, (9.075, -31.891, -28.208)), (' B 349  SER  OG ', ' B 452  LEU  O  ', -0.483, (-3.608, -32.301, -37.09)), (' B 401  VAL  C  ', ' B 402  ILE HG13', -0.478, (-6.402, -30.238, -42.257)), (' C  43  ARG  HG3', ' C  43  ARG  O  ', -0.476, (-49.433, -14.372, -29.023)), (' A 347  PHE  HE2', ' A 509  ARG  HD3', -0.474, (-22.887, 14.033, -14.439)), (' B 454  ARG  HA ', ' B 492  LEU HD23', -0.473, (3.218, -34.749, -37.079)), (' A 349  SER  OG ', ' A 452  LEU  O  ', -0.469, (-29.988, 3.178, -17.707)), (' A 474  GLN  CD ', ' A 474  GLN  H  ', -0.464, (-36.804, -16.461, -16.101)), (' A 378  LYS  HD2', ' A 433  VAL  CG1', -0.463, (-25.629, 9.891, -1.605)), (' B 337  PRO  HB2', ' B 340  GLU  HB2', -0.459, (-23.352, -39.467, -41.746)), (' A 454  ARG  NH2', ' A 467  ASP  OD1', -0.458, (-28.61, -7.41, -15.648)), (' C  91  VAL  HA ', ' C 111  THR  O  ', -0.457, (-51.914, -9.751, -40.573)), (' B 490  PHE  CZ ', ' D  55  MET  HB3', -0.454, (3.796, -35.562, -28.943)), (' A 431  GLY  HA2', ' A 515  PHE  CE2', -0.447, (-16.114, 7.767, 1.241)), (' A 448  ASN  O  ', ' A 495  TYR  O  ', -0.447, (-35.691, 9.01, -21.544)), (' A 458  LYS  HG3', ' A 459  SER  N  ', -0.442, (-31.988, -13.604, -9.071)), (' D   2  VAL  HB ', ' D 106  TYR  CD1', -0.442, (11.341, -16.515, -28.736)), (' D  97  ARG  HA ', ' D 104  TYR  HA ', -0.44, (12.592, -24.299, -29.9)), (' B 350  VAL  HA ', ' B 400  PHE  HB2', -0.438, (-6.235, -34.229, -41.16)), (' D  98  ASP  OD1', ' D  99  ILE  N  ', -0.436, (8.845, -21.937, -34.965)), (' D  34  TRP  CG ', ' D  79  LEU HD22', -0.436, (11.199, -29.038, -16.726)), (' D   5  VAL  HB ', ' D  23  ALA  HB3', -0.434, (8.913, -15.227, -16.986)), (' B 484  GLU  CD ', ' D  31  ARG  HE ', -0.433, (9.523, -32.821, -27.869)), (' D  12  VAL HG22', ' D  13  GLN  O  ', -0.433, (15.547, -33.038, -1.624)), (' B 490  PHE  HA ', ' B 491  PRO  HD3', -0.432, (9.743, -36.106, -32.159)), (' D  95  ALA  HB2', ' D 107  TRP  CZ3', -0.432, (15.848, -24.136, -23.855)), (' A 378  LYS  HD2', ' A 433  VAL  CG2', -0.431, (-25.101, 8.723, -1.151)), (' D 112  GLN  OE1', ' D 113  VAL  N  ', -0.429, (20.31, -25.898, -8.793)), (' A 403  ARG  HD3', ' A 505  TYR  HD1', -0.428, (-39.503, 9.963, -12.335)), (' B 356  LYS  HB3', ' B 397  ALA  HB3', -0.428, (-16.423, -41.114, -44.185)), (' C 112  GLN  OE1', ' C 113  VAL  N  ', -0.427, (-51.569, -11.11, -44.404)), (' D  50  GLY  HA2', ' D 201  CAC  O2 ', -0.426, (3.844, -29.355, -27.797)), (' A 378  LYS  CD ', ' A 433  VAL  CB ', -0.424, (-25.342, 10.171, -1.382)), (' A 356  LYS  HA ', ' A 356  LYS  HD2', -0.424, (-11.712, 4.974, -13.309)), (' C  12  VAL HG22', ' C  13  GLN  O  ', -0.424, (-43.643, -12.715, -51.443)), (' A 484  GLU  OE1', ' C 104  TYR  OH ', -0.421, (-41.385, -6.384, -26.492)), (' C  86  PRO  O  ', ' C  89  THR HG22', -0.421, (-47.367, -19.187, -44.634)), (' B 431  GLY  HA2', ' B 515  PHE  CE2', -0.42, (-14.641, -39.79, -56.142)), (' C  70  ARG  NH2', ' C  72  ASN  OD1', -0.42, (-39.596, 5.598, -30.001)), (' A 490  PHE  HA ', ' A 491  PRO  HD3', -0.419, (-35.742, -8.832, -21.458)), (' C  48  ALA  N  ', ' C  57  ASN  O  ', -0.415, (-37.715, -7.726, -31.625)), (' B 339  GLY  HA2', ' B 343  ASN  HB2', -0.413, (-24.526, -33.116, -40.77)), (' B 401  VAL HG22', ' B 509  ARG  HA ', -0.413, (-11.272, -29.328, -40.984)), (' D  43  ARG  HD3', ' D 107  TRP  CH2', -0.409, (18.876, -26.047, -24.273)), (' A 339  GLY  HA2', ' A 343  ASN  HB2', -0.406, (-14.659, 17.911, -15.19)), (' A 383  SER  OG ', ' A 386  LYS  HB2', -0.405, (-14.11, 15.406, 8.856)), (' D  51  ALA  HA ', ' D  70  ARG  CZ ', -0.404, (1.843, -25.568, -25.73)), (' A 404  GLY  HA2', ' A 508  TYR  CD1', -0.403, (-33.476, 13.266, -9.651)), (' A 378  LYS  CG ', ' A 433  VAL  CB ', -0.403, (-24.396, 10.71, -1.345)), (' D  20  LEU HD13', ' D  81  MET  SD ', -0.403, (11.623, -28.338, -11.463)), (' B 378  LYS  HD2', ' B 433  VAL  CG2', -0.403, (-9.322, -32.093, -54.05)), (' C  89  THR  HB ', ' C 115  VAL  H  ', -0.402, (-48.357, -16.244, -46.387)), (' B 400  PHE  HE2', ' B 402  ILE HD11', -0.4, (-6.588, -32.412, -45.422)), (' C  60  ASP  HA ', ' C  63  LYS  HB2', -0.4, (-33.276, -16.489, -35.012))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
