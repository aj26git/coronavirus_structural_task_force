# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('L', '   8 ', 'PRO', None, (69.329, -63.63999999999999, -35.939)), ('L', '  95 ', 'PRO', None, (70.751, -73.099, -12.375))]
data['rota'] = [('H', '  18 ', 'LEU', 0.1720584146981812, (84.26400000000002, -51.67, -4.240000000000002)), ('H', '  64 ', 'LYS', 0.2551182823223734, (81.10500000000002, -66.518, -5.872)), ('L', '   9 ', 'SER', 0.22407164049748052, (73.612, -61.897, -34.32400000000001)), ('L', '  33 ', 'LEU', 0.18210879876793254, (61.124000000000024, -66.434, -21.68500000000001)), ('E', ' 392 ', 'PHE', 0.0036819165493417907, (59.965999999999994, -95.49000000000001, 15.341))]
data['cbeta'] = []
data['probe'] = [(' L  37  GLN  HB2', ' L  47  LEU HD11', -0.604, (63.294, -53.831, -27.272)), (' H  82  MET  HB3', ' H  85  LEU HD21', -0.602, (83.861, -56.198, -7.61)), (' H  27  LEU HD11', ' H  97  ARG  HG3', -0.592, (61.254, -54.384, -7.855)), (' E 378  LYS  HB3', ' E 803  PRO  HD2', -0.571, (70.923, -88.732, -0.54)), (' L   6  GLN  NE2', ' L  86  TYR  O  ', -0.528, (68.527, -60.57, -28.853)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.503, (64.402, -88.146, -6.645)), (' H  97  ARG HH21', ' H 106  ILE HD13', -0.489, (58.558, -53.253, -10.933)), (' E 387  LEU HD23', ' E 390  LEU HD12', -0.487, (66.137, -97.513, 9.762)), (' H  34  MET  HB3', ' H  78  LEU HD22', -0.481, (67.905, -55.762, -5.561)), (' H  90  THR HG23', ' H 114  THR  HA ', -0.481, (86.057, -51.459, -15.921)), (' L   6  GLN  HB2', ' L 101  PRO  HD2', -0.48, (70.836, -65.337, -28.366)), (' E 346  ARG  HG3', ' E 805  PRO  HG3', -0.479, (45.566, -85.872, -5.932)), (' E 366  SER  HB2', ' E 388  ASN HD21', -0.471, (64.453, -103.729, 3.838)), (' H  29  VAL HG13', ' H  34  MET  HG3', -0.45, (65.872, -54.967, -2.83)), (' E 336  CYS  SG ', ' E 363  ALA  HB2', -0.449, (55.269, -99.713, 7.501)), (' A   1  NAG  H61', ' A   2  NAG  N2 ', -0.446, (53.723, -103.597, -10.242)), (' E 472  ILE HD12', ' E 484  GLU  HG2', -0.435, (46.275, -60.337, -7.107)), (' E 403  ARG  HG3', ' E 495  TYR  CE1', -0.43, (58.819, -76.665, -11.079)), (' L  93  SER  OG ', ' L  96  ALA  O  ', -0.423, (69.388, -69.333, -14.859)), (' E 393  THR  OG1', ' E 394  ASN  N  ', -0.417, (56.556, -92.104, 16.24)), (' H  38  ARG  NH1', ' H  89  ASP  HA ', -0.413, (82.901, -58.63, -13.296)), (' E 440  ASN  N  ', ' E 440  ASN  OD1', -0.405, (55.073, -89.453, -17.062)), (' H  73  ASN  H  ', ' H  73  ASN  ND2', -0.403, (67.201, -54.0, 6.151)), (' L  80  PRO  O  ', ' L  83  PHE  HD1', -0.402, (66.277, -45.912, -34.452)), (' E 412  PRO  HG3', ' E 429  PHE  HB3', -0.401, (66.934, -83.046, 6.943))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
