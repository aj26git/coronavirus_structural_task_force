# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', ' 339 ', 'VAL', 0.04040102679994882, (106.119, -99.942, 49.745))]
data['omega'] = [('A', ' 146 ', 'PRO', None, (0.008, -19.895, 56.045)), ('C', ' 146 ', 'PRO', None, (117.97300000000001, -94.34600000000003, 53.118000000000016))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 323  MET  HE1', ' A 379  ILE HG21', -0.932, (17.193, -37.223, 52.789)), (' C 355  ASP  OD2', ' C 357  ARG  NH1', -0.73, (98.997, -81.095, 42.699)), (' D 353  TRP  O  ', ' D 466  ARG  NH1', -0.71, (73.708, -67.431, 29.41)), (' C 109  SER  HB3', ' C 112  LYS  HD2', -0.699, (118.94, -86.612, 15.7)), (' A 347  THR  HG1', ' A 349  TRP  HE1', -0.694, (9.534, -30.308, 47.936)), (' A 411  SER  HB3', ' A 543  ASP  HA ', -0.689, (6.273, -49.086, 65.089)), (' A  74  LYS  HD2', ' A 106  SER  HB2', -0.686, (9.653, -33.649, 20.378)), (' A 503  LEU HD23', ' A 505  HIS  H  ', -0.682, (-4.427, -31.582, 45.218)), (' C 177  ARG HH12', ' C 495  GLU  HG3', -0.669, (137.305, -92.283, 31.494)), (' B 393  THR  HA ', ' B 522  ALA  HA ', -0.658, (67.944, -44.376, 42.52)), (' C 477  TRP  CE3', ' C 500  PRO  HG3', -0.646, (133.789, -85.025, 38.842)), (' C 412  ALA  HA ', ' C 417  HIS  CD2', -0.645, (115.938, -69.192, 63.042)), (' B 361  CYS  SG ', ' B 362  VAL  N  ', -0.64, (64.408, -35.356, 48.544)), (' A 248  LEU  HB3', ' A 256  ILE HD13', -0.623, (-22.038, -32.135, 62.587)), (' C 331  SER  HB2', ' C 358  ILE  O  ', -0.614, (106.012, -82.282, 49.608)), (' A 177  ARG HH12', ' A 495  GLU  HG3', -0.614, (-18.061, -25.619, 34.049)), (' C 268  GLY  O  ', ' C 277  ASN  ND2', -0.606, (127.487, -85.815, 56.702)), (' B 353  TRP  O  ', ' B 466  ARG  NH1', -0.605, (48.812, -37.473, 32.281)), (' G   2  NAG  H3 ', ' G   2  NAG  H83', -0.604, (27.42, -35.532, 67.804)), (' A 294  THR HG23', ' A 365  THR  HA ', -0.601, (1.08, -29.748, 66.922)), (' C 320  LEU HD13', ' C 380  GLN  HG2', -0.601, (108.115, -65.675, 52.585)), (' M   2  NAG  H3 ', ' M   2  NAG  H83', -0.6, (67.864, -79.387, 56.173)), (' A 252  TYR  CD2', ' A 266  LEU HD13', -0.596, (-20.023, -28.153, 61.245)), (' A 187  LYS  HD2', ' A 199  TYR  CZ ', -0.593, (-0.831, -34.551, 31.724)), (' C 343  VAL  O  ', ' C 359  LEU HD21', -0.588, (111.918, -87.126, 46.194)), (' F   2  NAG  O3 ', ' F   2  NAG  O7 ', -0.579, (8.685, -39.924, 9.075)), (' A 323  MET  HE2', ' A 327  PHE  CG ', -0.579, (18.014, -35.535, 54.084)), (' D 336  CYS  HB2', ' D 363  ALA  HB2', -0.576, (61.957, -66.839, 46.329)), (' C 169  ARG  NH1', ' C 271  TRP  HA ', -0.573, (131.433, -87.99, 47.801)), (' A  50  TYR  CE1', ' A  54  ILE HG23', -0.562, (6.703, -18.771, 41.383)), (' A 233  ILE HD13', ' A 450  LEU HD13', -0.558, (-10.239, -48.058, 51.648)), (' C 165  TRP  O  ', ' C 169  ARG  HG3', -0.557, (131.915, -94.306, 46.269)), (' C 294  THR HG23', ' C 365  THR  HA ', -0.556, (118.781, -84.762, 64.214)), (' A 107  VAL HG21', ' A 193  ALA  HB1', -0.555, (1.21, -36.354, 19.407)), (' C 107  VAL HG21', ' C 193  ALA  HB1', -0.553, (120.014, -76.935, 16.777)), (' D 502  GLY  O  ', ' D 506  GLN  HG3', -0.552, (92.42, -73.693, 43.666)), (' A 457  GLU  HG2', ' A 513  ILE  HB ', -0.551, (-6.134, -41.918, 40.785)), (' A 237  TYR  CE1', ' A 451  PRO  HG2', -0.548, (-14.966, -41.853, 53.723)), (' D 377  PHE  CZ ', ' D 434  ILE HD11', -0.547, (73.346, -63.834, 48.96)), (' C 177  ARG  NH1', ' C 495  GLU  HG3', -0.547, (136.583, -92.49, 31.214)), (' A 430  GLU  HG3', ' A 434  THR HG21', -0.543, (-2.699, -46.967, 75.157)), (' A 571  GLU  HA ', ' A 576  ALA  H  ', -0.542, (3.191, -60.917, 47.299)), (' A 501  ALA  O  ', ' A 507  SER  HB2', -0.54, (-6.195, -26.347, 41.908)), (' A 477  TRP  CE3', ' A 500  PRO  HG3', -0.539, (-14.052, -32.198, 41.518)), (' A 279  TYR  CD1', ' A 441  LYS  HB2', -0.539, (-8.084, -39.068, 67.13)), (' A 473  TRP  N  ', ' A 495  GLU  OE2', -0.536, (-19.184, -28.757, 35.049)), (' D 426  PRO  HG2', ' D 429  PHE  HB2', -0.533, (75.208, -53.048, 38.205)), (' C  25  VAL HG11', ' C  97  LEU HD12', -0.532, (106.355, -60.333, 20.956)), (' C 331  SER  CB ', ' C 358  ILE  H  ', -0.53, (105.247, -80.666, 49.436)), (' C  50  TYR  CE1', ' C  54  ILE HG23', -0.527, (111.279, -94.186, 38.639)), (' A 523  PHE  CE2', ' A 584  LEU HD13', -0.525, (-5.706, -49.544, 56.151)), (' A 339  VAL HG23', ' A 340  GLN  H  ', -0.525, (11.214, -13.67, 52.553)), (' D 449  TYR  O  ', ' D 494  SER  OG ', -0.523, (87.409, -77.355, 28.87)), (' C 127  TYR  CZ ', ' C 504  PHE  HB2', -0.523, (121.853, -87.793, 44.336)), (' C  22  GLU  OE1', ' C  88  ILE  HA ', -0.521, (107.931, -54.366, 20.553)), (' C 478  TRP  CE3', ' C 489  GLU  HB3', -0.52, (139.765, -88.906, 44.496)), (' C 265  HIS  ND1', ' C 490  PRO  HG3', -0.516, (137.86, -92.952, 51.099)), (' A 107  VAL HG21', ' A 193  ALA  CB ', -0.514, (0.594, -36.428, 19.858)), (' D 437  ASN HD21', ' D 506  GLN  NE2', -0.514, (88.202, -74.259, 46.906)), (' A 478  TRP  O  ', ' A 482  ARG  HG3', -0.513, (-23.04, -33.995, 45.702)), (' D 389  ASP  N  ', ' D 389  ASP  OD1', -0.512, (61.152, -56.199, 53.705)), (' B 438  SER  O  ', ' B 438  SER  OG ', -0.512, (38.101, -30.334, 44.823)), (' B 401  VAL HG23', ' B 508  TYR  O  ', -0.511, (39.363, -35.189, 42.193)), (' A 215  TYR  OH ', ' A 571  GLU  OE2', -0.51, (5.768, -63.993, 42.23)), (' D 350  VAL HG22', ' D 422  ASN  HB3', -0.51, (82.296, -65.399, 31.584)), (' C 478  TRP  O  ', ' C 482  ARG  HG3', -0.509, (143.385, -85.411, 43.35)), (' A 252  TYR  CE2', ' A 266  LEU HD22', -0.508, (-18.237, -27.349, 61.636)), (' A 323  MET  HE2', ' A 327  PHE  CD2', -0.503, (17.17, -35.187, 53.782)), (' C 279  TYR  CD1', ' C 441  LYS  HB2', -0.503, (129.665, -77.07, 64.67)), (' D 388  ASN  O  ', ' D 526  GLY  HA3', -0.503, (59.825, -59.609, 50.846)), (' B 386  LYS  HG2', ' D 389  ASP  OD2', -0.501, (59.881, -53.251, 56.381)), (' C 261  CYS  HB3', ' C 486  GLY  O  ', -0.501, (142.976, -83.017, 50.272)), (' A 490  PRO  HA ', ' A 612  PRO  HG2', -0.5, (-24.528, -26.221, 52.884)), (' C  55  THR HG21', ' J   1  NAG  H62', -0.5, (103.769, -98.202, 39.677)), (' D 394  ASN  HB2', ' D 516  GLU  OE2', -0.494, (61.9, -56.961, 36.318)), (' C 187  LYS  HD2', ' C 199  TYR  CZ ', -0.493, (122.072, -80.578, 28.565)), (' A 248  LEU  HB3', ' A 256  ILE  CD1', -0.492, (-21.858, -31.94, 62.596)), (' C  85  LEU HD11', ' C  98  GLN  HB2', -0.492, (113.719, -62.664, 22.548)), (' C 455  MET  HE1', ' C 481  LYS  HE2', -0.492, (135.218, -82.769, 43.918)), (' C 285  PHE  CD2', ' C 433  GLU  HB3', -0.489, (134.372, -72.138, 73.315)), (' A 462  MET  HE3', ' A 468  ILE HD11', -0.488, (-17.76, -37.138, 36.292)), (' A 343  VAL  O  ', ' A 359  LEU HD21', -0.488, (6.727, -25.766, 49.0)), (' C 331  SER  HB2', ' C 358  ILE  H  ', -0.486, (105.525, -81.263, 49.929)), (' C  50  TYR  OH ', ' C 125  THR HG23', -0.485, (113.57, -92.944, 37.284)), (' A 192  ARG  NH2', ' A 197  GLU  O  ', -0.482, (-9.125, -39.933, 25.361)), (' A 406  GLU  HA ', ' A 409  SER  HB3', -0.481, (2.886, -42.783, 57.803)), (' A 458  LYS  O  ', ' A 462  MET  HG3', -0.48, (-14.477, -39.932, 36.478)), (' D 421  TYR  HD1', ' D 457  ARG  HB3', -0.479, (86.246, -59.859, 24.165)), (' A 403  ALA  O  ', ' A 407  ILE HG12', -0.479, (5.179, -46.809, 54.198)), (' B 490  PHE  HE2', ' B 492  LEU  HB2', -0.478, (35.816, -35.677, 24.248)), (' A 345  HIS  O  ', ' A 347  THR HG23', -0.477, (5.595, -28.938, 49.202)), (' K   1  NAG  H61', ' K   2  NAG  HN2', -0.472, (96.22, -73.355, 63.161)), (' C 109  SER  HB3', ' C 112  LYS  CD ', -0.472, (119.384, -86.933, 16.054)), (' C 455  MET  CE ', ' C 481  LYS  HE2', -0.472, (135.631, -82.448, 44.14)), (' A 482  ARG HH12', ' A 611  SER  HB3', -0.472, (-27.773, -30.221, 49.183)), (' D 355  ARG  NE ', ' D 398  ASP  OD1', -0.471, (70.278, -63.253, 33.875)), (' C  69  TRP  CZ2', ' C  73  LEU HD11', -0.47, (106.697, -75.705, 28.081)), (' A 252  TYR  HD2', ' A 266  LEU HD13', -0.469, (-20.401, -28.523, 61.892)), (' C 122  THR  O  ', ' C 126  ILE HG13', -0.468, (119.158, -95.536, 35.958)), (' A 459  TRP  O  ', ' A 463  VAL HG23', -0.468, (-13.57, -35.7, 35.982)), (' C  50  TYR  HE1', ' C  54  ILE HG23', -0.463, (111.139, -93.93, 38.237)), (' C 144  LEU  HG ', ' C 149  ASN  OD1', -0.462, (122.552, -91.496, 49.79)), (' B 350  VAL HG22', ' B 422  ASN  HB3', -0.46, (41.076, -41.492, 34.009)), (' A 102  GLN  O  ', ' A 103  ASN  HB2', -0.459, (6.262, -40.285, 22.92)), (' C  98  GLN  HA ', ' C 101  GLN  HG3', -0.459, (112.812, -64.384, 21.053)), (' A 261  CYS  HB2', ' A 488  VAL  HB ', -0.458, (-24.102, -33.691, 52.148)), (' C 493  HIS  ND1', ' C 499  ASP  OD2', -0.457, (136.186, -92.822, 42.219)), (' A  50  TYR  HE1', ' A  54  ILE HG23', -0.457, (6.474, -18.984, 40.942)), (' C 478  TRP  CZ3', ' C 489  GLU  HB3', -0.457, (139.206, -88.834, 45.188)), (' D 472  ILE  HA ', ' D 491  PRO  HD3', -0.455, (87.57, -67.93, 17.056)), (' A 315  PHE  CE2', ' A 376  MET  HG2', -0.453, (12.655, -40.931, 57.763)), (' D 382  VAL HG22', ' D 383  SER  H  ', -0.453, (68.642, -54.805, 49.496)), (' A 237  TYR  CD1', ' A 451  PRO  HG2', -0.452, (-15.159, -42.795, 53.889)), (' A 578  ASN  OD1', ' A 579  MET  N  ', -0.452, (-3.015, -55.877, 44.188)), (' C  52  THR HG22', ' C 359  LEU HD12', -0.45, (107.479, -87.078, 46.191)), (' C 146  PRO  O  ', ' C 150  GLU  HB2', -0.449, (121.291, -93.988, 56.132)), (' C  41  TYR  O  ', ' C  45  LEU  HB2', -0.448, (100.174, -82.164, 36.828)), (' A 245  ARG  HB2', ' A 262  LEU HD21', -0.447, (-22.227, -36.809, 59.822)), (' B 517  LEU  HA ', ' B 517  LEU HD23', -0.447, (65.613, -48.079, 42.023)), (' A 177  ARG  NH1', ' A 495  GLU  HG3', -0.446, (-17.934, -25.11, 34.071)), (' D 437  ASN HD21', ' D 506  GLN HE22', -0.446, (88.868, -74.395, 47.253)), (' A 470  LYS  H  ', ' A 470  LYS  HG3', -0.445, (-16.805, -30.66, 28.276)), (' D 442  ASP  HB3', ' D 451  TYR  HE2', -0.445, (82.854, -77.424, 37.655)), (' C 460  ARG  NH2', ' C 506  VAL  HA ', -0.444, (125.406, -82.719, 36.962)), (' C 273  ARG  HD2', ' C 452  PHE  HE1', -0.443, (128.624, -81.04, 46.61)), (' B 342  PHE  CZ ', ' B 511  VAL HG11', -0.443, (50.526, -37.283, 46.92)), (' C 245  ARG  HB2', ' C 262  LEU HD21', -0.442, (142.851, -82.208, 56.85)), (' C 315  PHE  CE1', ' C 408  MET  HG3', -0.442, (112.567, -68.495, 55.035)), (' A 308  PHE  CD1', ' A 333  LEU HD13', -0.441, (12.506, -31.012, 59.34)), (' J   1  NAG  O3 ', ' J   1  NAG  O7 ', -0.441, (99.459, -96.778, 44.278)), (' D 401  VAL HG22', ' D 509  ARG  HG2', -0.441, (79.957, -73.252, 39.938)), (' F   1  NAG  O3 ', ' F   1  NAG  O7 ', -0.441, (5.492, -42.745, 16.103)), (' B 430  THR HG21', ' D 391  CYS  O  ', -0.44, (57.144, -53.919, 45.064)), (' B 364  ASP  O  ', ' B 367  VAL HG12', -0.437, (57.026, -36.584, 55.021)), (' C 458  LYS  HZ2', ' C 462  MET  HE3', -0.437, (138.025, -74.897, 34.619)), (' D 383  SER  HB3', ' D 386  LYS  HB2', -0.437, (68.203, -53.528, 52.864)), (' D 353  TRP  CZ2', ' D 466  ARG  HB2', -0.436, (74.521, -62.65, 29.176)), (' A 417  HIS  O  ', ' A 420  SER  HB3', -0.435, (8.566, -44.113, 71.776)), (' A 127  TYR  CZ ', ' A 504  PHE  HB2', -0.434, (-2.283, -27.09, 47.23)), (' B 430  THR  CG2', ' D 391  CYS  HB2', -0.432, (55.916, -54.805, 45.53)), (' C 523  PHE  CE2', ' C 584  LEU HD13', -0.431, (129.299, -66.869, 53.504)), (' B 492  LEU  HA ', ' B 492  LEU HD23', -0.431, (36.021, -38.776, 27.387)), (' C  60  GLN  O  ', ' C  64  ILE HG13', -0.431, (104.257, -91.639, 29.006)), (' C 473  TRP  N  ', ' C 495  GLU  OE2', -0.43, (138.822, -89.489, 32.605)), (' C 323  MET  HE3', ' C 376  MET  HG3', -0.429, (107.277, -72.652, 52.943)), (' C 152  MET  HG3', ' C 270  MET  HA ', -0.428, (129.1, -90.702, 51.754)), (' A 315  PHE  CE1', ' A 408  MET  HG3', -0.428, (10.45, -44.278, 57.962)), (' C 187  LYS  HD2', ' C 199  TYR  CE1', -0.428, (121.853, -80.496, 28.475)), (' C 489  GLU  N  ', ' C 489  GLU  OE2', -0.427, (141.766, -89.541, 46.192)), (' D 359  SER  HA ', ' D 524  VAL HG23', -0.427, (58.933, -62.342, 40.352)), (' B 424  LYS  O  ', ' B 463  PRO  HA ', -0.426, (47.39, -49.305, 35.036)), (' B 361  CYS  O  ', ' B 524  VAL  HA ', -0.426, (65.827, -38.932, 47.432)), (' A 177  ARG  O  ', ' A 181  GLU  HG3', -0.425, (-11.805, -23.87, 32.86)), (' C 192  ARG  NH2', ' C 197  GLU  O  ', -0.424, (130.532, -76.402, 21.923)), (' A 544  ILE  O  ', ' A 544  ILE HG13', -0.423, (10.03, -49.95, 62.948)), (' C 261  CYS  HB3', ' C 486  GLY  C  ', -0.423, (143.039, -83.017, 49.94)), (' A 455  MET  HB3', ' A 455  MET  HE3', -0.422, (-14.077, -37.803, 46.315)), (' B 435  ALA  HA ', ' B 509  ARG  O  ', -0.421, (42.85, -37.611, 46.717)), (' B 401  VAL HG11', ' B 451  TYR  CE2', -0.421, (39.222, -31.765, 38.869)), (' A 332  MET  HB2', ' A 332  MET  HE3', -0.42, (14.091, -23.731, 51.152)), (' B 355  ARG  HB2', ' B 398  ASP  OD1', -0.42, (52.839, -39.972, 37.498)), (' A  41  TYR  O  ', ' A  45  LEU  HB2', -0.42, (19.575, -28.852, 39.398)), (' C 578  ASN  OD1', ' C 579  MET  N  ', -0.419, (128.119, -59.846, 41.559)), (' A 346  PRO  HB3', ' A 360  MET  HE3', -0.417, (5.647, -32.134, 54.26)), (' C 218  SER  HB3', ' C 221  GLN  HB2', -0.417, (130.613, -61.271, 31.333)), (' D 421  TYR  HD1', ' D 457  ARG  CB ', -0.416, (86.03, -60.302, 23.701)), (' C 477  TRP  CD2', ' C 500  PRO  HG3', -0.416, (134.487, -85.951, 39.285)), (' A 108  LEU  HA ', ' A 108  LEU HD23', -0.416, (1.267, -31.334, 20.689)), (' C 177  ARG  HB2', ' C 498  CYS  HB2', -0.415, (131.392, -93.468, 35.258)), (' C 108  LEU  HA ', ' C 108  LEU HD23', -0.415, (118.938, -82.695, 17.786)), (' B 393  THR HG23', ' B 517  LEU HD23', -0.414, (66.437, -47.87, 42.637)), (' C  41  TYR  CD2', ' C 353  LYS  HD3', -0.414, (96.915, -77.429, 37.327)), (' B 364  ASP  OD2', ' B 367  VAL  HB ', -0.413, (57.458, -35.637, 57.476)), (' A 122  THR  O  ', ' A 126  ILE HG13', -0.412, (-1.465, -19.189, 38.992)), (' C 234  LYS  O  ', ' C 238  GLU  HG3', -0.411, (142.8, -71.619, 51.881)), (' B 388  ASN  O  ', ' B 526  GLY  HA3', -0.411, (63.43, -42.528, 54.492)), (' C 127  TYR  OH ', ' C 504  PHE  HB2', -0.411, (121.904, -87.489, 45.294)), (' C 490  PRO  O  ', ' C 491  VAL HG23', -0.41, (141.334, -96.426, 48.839)), (' A  97  LEU  O  ', ' A 101  GLN  HG3', -0.409, (12.739, -46.582, 23.781)), (' A 584  LEU  O  ', ' A 584  LEU HD12', -0.409, (-7.611, -51.342, 57.853)), (' C 327  PHE  HE2', ' C 358  ILE HG13', -0.408, (106.367, -77.995, 50.691)), (' C 267  LEU HD12', ' C 272  GLY  HA3', -0.407, (134.095, -84.443, 51.114)), (' A 143  LEU  HA ', ' A 143  LEU HD23', -0.407, (-2.676, -16.408, 50.688)), (' D 421  TYR  O  ', ' D 454  ARG  HD2', -0.405, (83.271, -62.762, 26.246)), (' A 315  PHE  CD1', ' A 380  GLN  HG3', -0.405, (13.93, -43.838, 56.779)), (' A 297  MET  HB3', ' A 297  MET  HE2', -0.404, (6.079, -30.599, 69.014)), (' C 503  LEU  HA ', ' C 503  LEU HD12', -0.403, (125.967, -86.835, 44.837)), (' A 145  GLU  HA ', ' A 146  PRO  HA ', -0.403, (-1.54, -21.62, 55.897)), (' C 593  THR  HA ', ' C 596  LYS  HD3', -0.403, (142.76, -65.066, 61.914)), (' A 166  GLU  OE1', ' A 493  HIS  NE2', -0.403, (-19.105, -21.883, 47.437)), (' B 395  VAL HG21', ' B 524  VAL HG11', -0.402, (61.327, -41.259, 46.344)), (' C 499  ASP  N  ', ' C 499  ASP  OD1', -0.402, (133.54, -92.03, 40.507)), (' C 315  PHE  CZ ', ' C 408  MET  HG3', -0.401, (112.28, -69.145, 55.094)), (' A 293  VAL HG11', ' A 418  LEU HD13', -0.401, (2.245, -38.964, 71.075)), (' C 379  ILE  O  ', ' C 383  MET  HG3', -0.401, (105.689, -70.366, 47.908)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.401, (71.419, -44.502, 37.919)), (' A  77  SER  HA ', ' A 100  LEU  O  ', -0.4, (13.762, -41.468, 22.838)), (' A 529  LEU HD22', ' A 550  ALA  HB1', -0.4, (10.323, -54.068, 59.147))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
