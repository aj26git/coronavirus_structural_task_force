# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 141 ', 'SER', 0.04069310438938544, (0.06500000000000661, 18.187000000000005, 82.769)), ('B', ' 138 ', 'ASN', 0.040288782482312116, (9.754000000000001, 25.997000000000003, 68.801)), ('B', ' 151 ', 'ASP', 0.021253164080497124, (15.509999999999994, 8.605000000000002, 89.644)), ('L', '  30 ', 'GLY', 0.03164773027873224, (32.123, 17.946000000000016, -9.529)), ('L', ' 139 ', 'ASN', 0.03534824364445706, (19.71199999999999, 54.776, -31.524000000000004)), ('N', '  40 ', 'PRO', 0.0421901307312166, (49.996, 45.627, -34.285))]
data['omega'] = [('A', ' 161 ', 'PRO', None, (3.749999999999999, -0.961, 57.541)), ('A', ' 163 ', 'PRO', None, (3.140999999999999, 5.066, 55.563)), ('B', '   8 ', 'PRO', None, (29.743999999999993, 23.184, 54.492000000000004)), ('B', ' 141 ', 'PRO', None, (18.954999999999984, 27.649000000000004, 67.618)), ('C', ' 161 ', 'PRO', None, (66.087, -2.198, -108.776)), ('C', ' 163 ', 'PRO', None, (66.98199999999999, 3.637, -106.544)), ('D', '   8 ', 'PRO', None, (41.24599999999998, 22.568, -104.94100000000002)), ('D', ' 141 ', 'PRO', None, (52.197, 27.38000000000002, -118.332)), ('F', ' 146 ', 'PRO', None, (6.463999999999988, 60.423, -93.053)), ('H', ' 154 ', 'PRO', None, (17.613999999999987, 59.805, -2.538)), ('H', ' 156 ', 'PRO', None, (16.239, 54.803000000000004, -6.189)), ('L', '   8 ', 'PRO', None, (36.050999999999995, 35.315000000000026, -20.992)), ('L', '  95 ', 'PRO', None, (25.955, 26.745, 3.209)), ('L', ' 142 ', 'PRO', None, (28.669999999999984, 52.582000000000036, -33.449)), ('M', ' 154 ', 'PRO', None, (53.061, 59.03100000000003, -49.624)), ('M', ' 156 ', 'PRO', None, (54.55799999999998, 54.189000000000014, -45.677)), ('N', '   8 ', 'PRO', None, (34.622, 35.335, -30.936)), ('N', '  95 ', 'PRO', None, (44.826, 25.811000000000018, -54.694)), ('N', ' 142 ', 'PRO', None, (41.693999999999974, 52.65000000000001, -18.933))]
data['rota'] = [('B', '  10 ', 'THR', 0.05826822338990454, (24.229, 22.397000000000002, 56.722)), ('B', '  96 ', 'LEU', 0.2840504689431442, (29.283, 8.137000000000008, 38.876)), ('A', ' 149 ', 'THR', 0.14460442430939688, (-0.3149999999999995, 27.621000000000002, 76.187)), ('A', ' 152 ', 'LEU', 0.14682971620972185, (-1.1219999999999999, 18.003, 74.662)), ('A', ' 198 ', 'VAL', 0.1987168735449199, (-3.543999999999997, 24.886000000000003, 73.244)), ('C', '  51 ', 'ILE', 0.2608914940092693, (49.63099999999999, -0.036, -82.506)), ('C', '  76 ', 'THR', 0.20639849953425346, (64.235, -1.8349999999999997, -77.787)), ('C', ' 195 ', 'VAL', 0.15847116269808956, (68.82799999999999, 16.384000000000004, -120.292)), ('L', '  33 ', 'LEU', 0.12125102479073402, (27.689, 24.718, -11.252)), ('L', '  46 ', 'LEU', 0.22480557111892474, (18.741, 30.675, -14.145)), ('L', '  69 ', 'THR', 0.0895195637681843, (37.431, 22.877, -12.224000000000002)), ('L', '  81 ', 'GLU', 0.2549798617922973, (18.263999999999996, 39.936, -26.871)), ('H', '  40 ', 'THR', 0.047674942872536194, (27.040999999999983, 45.784000000000006, -5.587)), ('H', ' 117 ', 'THR', 0.18277321691367404, (21.141999999999996, 53.083, 0.20900000000000002)), ('H', ' 157 ', 'VAL', 0.08655423614752362, (13.56, 56.96800000000002, -9.775)), ('N', ' 118 ', 'ILE', 0.038074052211141, (52.36900000000001, 69.748, -23.453)), ('M', ' 200 ', 'THR', 0.07214861215332626, (71.448, 63.153999999999996, -26.46)), ('E', '  59 ', 'VAL', 0.02702293064063755, (59.388, 37.896000000000015, 40.172)), ('E', ' 256 ', 'ILE', 0.2875766908786689, (75.43199999999999, 84.273, 26.939)), ('E', ' 303 ', 'ASP', 0.14223450314683012, (36.53699999999997, 57.029000000000046, 31.824)), ('E', ' 322 ', 'ASN', 0.005856653529763474, (38.869999999999976, 46.459, 16.478)), ('E', ' 334 ', 'THR', 0.1707325241685496, (43.39299999999997, 51.88, 35.156)), ('E', ' 344 ', 'CYS', 0.1557757149710163, (52.144, 51.652, 35.378)), ('E', ' 400 ', 'PHE', 0.15689075537635358, (59.959, 51.25600000000001, 12.885)), ('E', ' 536 ', 'GLU', 0.026885855633508884, (43.87700000000002, 69.87000000000002, 2.543)), ('E', ' 581 ', 'VAL', 0.060569234918655346, (63.67999999999999, 64.93700000000001, 5.811)), ('E', ' 611 ', 'SER', 0.16283087315958963, (83.83599999999994, 79.537, 25.977)), ('F', '  22 ', 'GLU', 0.270342623940868, (3.559999999999997, 23.66500000000002, -54.792)), ('F', '  59 ', 'VAL', 0.006592404544063613, (11.504999999999995, 36.49400000000001, -91.756)), ('F', ' 335 ', 'ASP', 0.22164688845287858, (25.560999999999993, 50.543, -90.063)), ('F', ' 385 ', 'TYR', 0.26527782492862884, (18.552, 39.85700000000003, -63.14600000000001)), ('F', ' 400 ', 'PHE', 0.27059373380429597, (11.118, 50.375000000000014, -64.747)), ('F', ' 401 ', 'HIS', 0.21792791887944385, (13.408999999999999, 49.328, -67.604)), ('F', ' 573 ', 'VAL', 0.2029458117332448, (16.917, 52.411000000000016, -54.483000000000004)), ('F', ' 601 ', 'ASN', 0.16266191423568116, (3.541999999999999, 89.734, -65.83)), ('R', ' 483 ', 'VAL', 0.20807708155761734, (65.985, 7.8050000000000015, 18.951)), ('S', ' 362 ', 'VAL', 0.2667714004406892, (54.861, 6.977000000000006, -62.396)), ('S', ' 456 ', 'PHE', 0.106041438153471, (15.514, 15.291, -61.163))]
data['cbeta'] = []
data['probe'] = [(' F 323  MET  HE1', ' F 379  ILE HG21', -0.837, (24.809, 44.657, -72.598)), (' M 219  GLU  HG2', ' M 220  PRO  HD2', -0.747, (68.017, 69.587, -25.167)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.745, (21.921, 33.598, -19.411)), (' N  37  GLN  HB2', ' N  47  LEU HD11', -0.725, (48.875, 33.208, -33.198)), (' R 409  GLN  HB3', ' R 419  ALA  HB2', -0.675, (43.763, 21.509, 6.226)), (' A   6  GLN  HB3', ' A 121  THR HG23', -0.653, (8.463, 4.394, 41.088)), (' S 354  ASN HD21', ' S 356  LYS  HE2', -0.645, (37.102, 7.481, -70.635)), (' H  70  SER  HB2', ' H  79  TYR  HB2', -0.642, (10.831, 37.963, 7.54)), (' B  67  GLY  HA3', ' B  72  PHE  HA ', -0.619, (34.124, 24.202, 41.329)), (' F 284  PRO  HG3', ' F 440  LEU HD13', -0.616, (12.573, 78.413, -71.843)), (' C  31  SER  HB3', ' S 335  LEU HD21', -0.613, (54.564, 8.912, -71.356)), (' M 166  LEU HD21', ' M 189  VAL HG21', -0.601, (63.386, 57.248, -25.988)), (' N  21  ILE HD12', ' N 103  THR HG21', -0.599, (39.129, 35.31, -30.404)), (' C  11  VAL HG11', ' C 161  PRO  HG3', -0.596, (65.039, -2.611, -105.431)), (' F 499  ASP  N  ', ' F 500  PRO  HD2', -0.594, (-11.068, 60.615, -80.812)), (' N 107  ILE  HB ', ' N 167  GLN HE22', -0.581, (45.663, 44.21, -22.93)), (' F 458  LYS  HG3', ' F 462  MET  HE2', -0.58, (-10.535, 60.302, -66.899)), (' R 402  ILE HD12', ' R 418  ILE HD13', -0.578, (42.778, 20.34, 12.997)), (' F  50  TYR  CE1', ' F  59  VAL HG13', -0.577, (11.766, 39.717, -92.378)), (' A   6  GLN  H  ', ' A 119  GLN HE22', -0.575, (5.411, 6.838, 38.949)), (' N  39  LYS  HB3', ' N  40  PRO  HD2', -0.573, (51.852, 43.926, -32.205)), (' B  38  GLN  HB2', ' B  48  LEU HD11', -0.563, (18.914, 23.354, 42.998)), (' E 284  PRO  HG3', ' E 440  LEU HD13', -0.563, (58.053, 80.027, 18.386)), (' M  90  THR HG23', ' M 117  THR  HA ', -0.559, (47.768, 52.026, -51.939)), (' S 418  ILE  HA ', ' S 422  ASN HD22', -0.556, (23.794, 17.432, -62.386)), (' C   6  GLN  H  ', ' C 119  GLN HE22', -0.552, (64.708, 5.226, -90.639)), (' C  11  VAL HG12', ' C 124  THR  HB ', -0.549, (62.533, -2.642, -104.497)), (' R 402  ILE HG22', ' R 403  ARG  N  ', -0.549, (42.164, 24.429, 15.533)), (' F 389  PRO  HG2', ' F 392  LEU HD12', -0.544, (12.093, 33.495, -61.041)), (' R 339  GLY  O  ', ' R 343  ASN  HB2', -0.543, (25.361, 15.58, 22.933)), (' M  40  THR  HB ', ' M  43  LYS  HB2', -0.543, (41.101, 44.312, -47.929)), (' F 490  PRO  HA ', ' F 612  PRO  HG2', -0.541, (-9.827, 76.067, -82.014)), (' F 476  LYS  HG3', ' F 480  MET  HE2', -0.54, (-14.054, 63.097, -70.545)), (' F 524  GLN  HG2', ' F 583  PRO  HG2', -0.539, (11.052, 60.498, -56.899)), (' N 134  VAL HG22', ' N 179  THR HG22', -0.538, (50.95, 67.547, -31.884)), (' A  11  VAL HG21', ' A 161  PRO  HG3', -0.535, (4.364, -1.527, 53.789)), (' M  56  ASP  HB3', ' S 369  TYR  CG ', -0.532, (53.313, 23.184, -62.195)), (' C 112  GLY  HA2', ' D  50  TYR  HB2', -0.532, (46.238, 17.247, -83.11)), (' E 527  GLU  HA ', ' E 539  LEU HD11', -0.532, (52.206, 64.104, 4.533)), (' F 529  LEU HD11', ' F 554  LEU HD13', -0.531, (20.037, 54.108, -60.025)), (' H  90  THR HG23', ' H 117  THR  HA ', -0.53, (22.303, 52.213, -0.604)), (' R 345  THR HG23', ' R 346  ARG  HG2', -0.526, (34.819, 13.24, 27.788)), (' N  35  TRP  HB2', ' N  48  ILE  HB ', -0.524, (46.723, 27.027, -34.769)), (' E 450  LEU  HB2', ' E 451  PRO  HD3', -0.523, (68.304, 67.53, 14.736)), (' R 461  LEU HD22', ' R 465  GLU  HB3', -0.522, (46.31, 9.156, 6.259)), (' E 564  GLU  HB3', ' E 568  LEU HD23', -0.522, (60.337, 43.06, 1.939)), (' C 173  LEU HD21', ' C 196  VAL HG21', -0.516, (75.059, 20.574, -119.342)), (' L  80  PRO  HA ', ' L 107  ILE HD13', -0.515, (22.317, 41.426, -29.852)), (' H 103  TYR  HD1', ' R 382  VAL HG12', -0.514, (22.732, 15.395, -1.824)), (' E 525  PHE  HD1', ' E 573  VAL HG11', -0.514, (54.978, 54.909, 6.119)), (' N  80  PRO  HA ', ' N 107  ILE HD13', -0.514, (48.597, 41.264, -22.38)), (' E 499  ASP  N  ', ' E 500  PRO  CD ', -0.512, (82.054, 62.644, 28.391)), (' L  39  LYS  HB3', ' L  40  PRO  HD2', -0.509, (19.063, 43.173, -20.096)), (' F 455  MET  HG2', ' F 485  VAL  CG2', -0.508, (-5.082, 66.628, -71.476)), (' F 248  LEU HD21', ' F 278  LEU HD11', -0.507, (4.265, 76.635, -80.468)), (' F 407  ILE  HA ', ' F 410  LEU HD12', -0.507, (18.678, 59.933, -65.681)), (' G   2  NAG  H83', ' G   4  MAN  H61', -0.506, (19.558, 27.184, 26.221)), (' N 107  ILE  HB ', ' N 167  GLN  NE2', -0.505, (45.85, 44.035, -23.109)), (' F 212  VAL HG11', ' F 565  PRO  HG3', -0.504, (5.926, 41.932, -52.237)), (' E 230  PHE  HA ', ' E 233  ILE HD12', -0.503, (69.363, 65.958, 9.354)), (' L  10  SER  HB3', ' N  12  SER  HB3', -0.502, (36.632, 42.854, -22.753)), (' R 401  VAL HG22', ' R 509  ARG  HG2', -0.5, (36.751, 19.665, 20.796)), (' C   8  GLY  H  ', ' C 121  THR HG22', -0.499, (63.815, 1.957, -93.768)), (' F 457  GLU  HG2', ' F 513  ILE  HB ', -0.499, (-2.341, 54.793, -67.784)), (' N 147  VAL HG12', ' N 197  VAL HG22', -0.496, (43.995, 65.302, -22.681)), (' R 421  TYR  CD1', ' R 457  ARG  HB2', -0.494, (52.423, 14.368, 6.963)), (' F 564  GLU  HG3', ' F 565  PRO  HD2', -0.492, (9.463, 41.555, -53.829)), (' E 503  LEU HD23', ' E 505  HIS  H  ', -0.491, (71.927, 57.301, 26.708)), (' D 197  THR HG22', ' D 204  PRO  HG3', -0.491, (49.119, 22.715, -131.598)), (' F 133  CYS  HA ', ' F 141  CYS  HA ', -0.49, (-2.767, 63.356, -100.396)), (' A 109  SER  HB2', ' R 345  THR  CG2', -0.488, (32.468, 12.034, 28.734)), (' E 472  GLN  HG2', ' E 475  LYS  HE3', -0.487, (92.633, 65.831, 22.629)), (' M  22  CYS  HB3', ' M  78  LEU  HB3', -0.487, (60.258, 36.828, -52.606)), (' F 455  MET  HG2', ' F 485  VAL HG21', -0.485, (-4.896, 66.513, -71.731)), (' A   8  GLY  H  ', ' A 121  THR HG22', -0.481, (6.403, 3.011, 42.618)), (' F 323  MET  HE1', ' F 379  ILE  CG2', -0.48, (24.958, 44.483, -71.618)), (' L 121  PRO  HD3', ' L 133  VAL HG22', -0.478, (17.719, 74.746, -22.39)), (' H   2  VAL HG13', ' H  27  PHE  CD1', -0.477, (6.654, 30.826, -7.432)), (' E  77  SER  O  ', ' E  81  GLN  HG2', -0.476, (73.018, 27.884, 16.407)), (' E  97  LEU  O  ', ' E 101  GLN  HG2', -0.475, (70.126, 31.925, 12.21)), (' E 525  PHE  O  ', ' E 529  LEU  HG ', -0.475, (51.682, 57.955, 5.833)), (' F 122  THR  O  ', ' F 126  ILE HG12', -0.474, (-8.421, 49.723, -90.204)), (' A  91  THR HG23', ' A 124  THR  HA ', -0.471, (11.861, 0.036, 53.252)), (' L   2  ILE HD12', ' L  93  VAL HG23', -0.471, (32.443, 24.704, -2.45)), (' R 453  TYR  HB3', ' R 495  TYR  CE2', -0.471, (46.313, 19.597, 16.947)), (' S 366  SER  HA ', ' S 369  TYR  CD2', -0.47, (54.128, 20.073, -63.082)), (' M  82  MET  HB3', ' M  85  LEU HD21', -0.467, (49.937, 45.401, -58.871)), (' E 457  GLU  HG2', ' E 513  ILE  HB ', -0.466, (73.779, 56.11, 15.481)), (' D 132  VAL HG13', ' D 179  LEU  HB3', -0.464, (59.339, 7.58, -129.957)), (' N   6  GLN  HG2', ' N 101  PRO  HD2', -0.464, (37.239, 34.64, -39.051)), (' D  67  GLY  HA3', ' D  72  PHE  HA ', -0.463, (36.951, 24.057, -92.202)), (' E 304  ALA  HA ', ' E 307  ILE HD12', -0.463, (40.195, 56.184, 29.893)), (' F 459  TRP  HD1', ' F 480  MET  HE1', -0.461, (-12.722, 61.502, -71.301)), (' H  12  VAL HG11', ' H  85  LEU HD12', -0.461, (19.434, 50.91, 7.571)), (' A 166  VAL  HA ', ' A 211  ASN  O  ', -0.46, (-4.306, 11.301, 62.4)), (' F 200  GLY  O  ', ' F 204  ARG  HG3', -0.459, (-6.583, 50.125, -65.001)), (' H  22  CYS  HB3', ' H  78  LEU  HB3', -0.459, (10.609, 37.227, 0.571)), (' M  60  PRO  HG2', ' M  63  VAL HG22', -0.458, (44.629, 36.755, -57.558)), (' C 209  ILE HG12', ' C 224  LYS  HG3', -0.457, (82.099, 10.873, -122.207)), (' E 476  LYS  HA ', ' E 479  GLU  HB2', -0.457, (86.466, 67.65, 19.319)), (' L  93  VAL HG22', ' R 380  TYR  CE1', -0.454, (32.596, 23.25, 0.689)), (' F 459  TRP  HD1', ' F 480  MET  CE ', -0.452, (-12.787, 61.964, -71.515)), (' F 233  ILE HD13', ' F 450  LEU HD13', -0.452, (3.897, 65.204, -63.899)), (' D  32  THR HG22', ' S 441  LEU HD22', -0.45, (37.524, 18.866, -79.948)), (' F 582  ARG  N  ', ' F 583  PRO  CD ', -0.45, (9.261, 64.028, -56.274)), (' N 109  ARG  HG2', ' N 110  THR  N  ', -0.448, (45.729, 46.831, -15.518)), (' C   8  GLY  H  ', ' C 121  THR  CG2', -0.447, (63.913, 1.497, -93.43)), (' F 108  LEU  O  ', ' F 109  SER  HB2', -0.446, (-16.179, 33.22, -76.585)), (' S 455  LEU HD22', ' S 493  GLN  HG3', -0.446, (15.145, 19.052, -67.31)), (' A 109  SER  HB2', ' R 345  THR HG21', -0.445, (32.27, 11.779, 29.463)), (' B 132  VAL HG13', ' B 179  LEU  HB3', -0.445, (11.273, 8.567, 78.682)), (' E 589  GLU  N  ', ' E 590  PRO  HD2', -0.443, (55.557, 74.053, 8.314)), (' A   6  GLN  HB3', ' A 121  THR  CG2', -0.443, (8.067, 4.055, 41.62)), (' A  64  PHE  O  ', ' A  68  VAL HG12', -0.443, (23.573, -4.442, 41.42)), (' D  38  GLN  HB2', ' D  48  LEU HD11', -0.442, (51.826, 22.341, -94.173)), (' E 458  LYS  HG3', ' E 462  MET  HE2', -0.441, (82.012, 61.562, 14.157)), (' D  19  ALA  HB2', ' D  79  LEU HD11', -0.439, (48.879, 30.278, -101.09)), (' N 143  ARG HH11', ' N 164  VAL HG11', -0.439, (41.925, 54.697, -29.489)), (' M 126  PRO  HD3', ' M 207  HIS  ND1', -0.439, (58.299, 61.728, -46.472)), (' B  36  TRP  CE2', ' B  74  LEU  HB2', -0.438, (27.114, 23.723, 42.995)), (' A 215  LYS  N  ', ' A 216  PRO  CD ', -0.436, (-2.564, 3.079, 56.131)), (' F 554  LEU  HG ', ' F 558  LEU HD11', -0.435, (21.058, 49.568, -61.765)), (' D 136  LEU  HB2', ' D 175  LEU  HB3', -0.435, (57.738, 18.904, -122.296)), (' E 101  GLN  HG3', ' E 101  GLN  O  ', -0.434, (72.492, 32.327, 13.265)), (' F 589  GLU  N  ', ' F 590  PRO  HD2', -0.434, (14.502, 73.07, -60.536)), (' B  19  ALA  HB2', ' B  79  LEU HD11', -0.433, (22.017, 31.135, 50.263)), (' C   6  GLN  H  ', ' C 119  GLN  NE2', -0.433, (64.643, 5.469, -90.628)), (' E 582  ARG  N  ', ' E 583  PRO  CD ', -0.428, (61.545, 65.184, 3.911)), (' S 409  GLN  HB3', ' S 419  ALA  HB2', -0.427, (27.016, 20.281, -57.975)), (' N  39  LYS  HB3', ' N  40  PRO  CD ', -0.426, (51.17, 43.559, -32.221)), (' E 351  LEU  HB2', ' E 355  ASP  HB3', -0.426, (49.363, 37.307, 24.41)), (' H  56  ASP  HB3', ' R 369  TYR  CG ', -0.426, (17.55, 23.917, 10.439)), (' F 261  CYS  HB2', ' F 488  VAL  HB ', -0.426, (-8.512, 76.014, -75.369)), (' R 402  ILE HG22', ' R 403  ARG  O  ', -0.423, (41.766, 24.62, 14.601)), (' H  11  LEU  HB2', ' H 154  PRO  HG3', -0.423, (17.74, 57.446, 0.074)), (' F 419  LYS  HG3', ' F 424  LEU HD23', -0.422, (32.736, 70.426, -69.914)), (' L  35  TRP  HB2', ' L  48  ILE  HB ', -0.421, (24.21, 27.671, -16.987)), (' C 182  ALA  HA ', ' C 192  LEU  HB3', -0.421, (62.899, 7.627, -114.674)), (' F 501  ALA  O  ', ' F 507  SER  OG ', -0.42, (-6.183, 54.999, -83.485)), (' B  19  ALA  HB3', ' B  76  ILE  HB ', -0.419, (22.687, 30.611, 47.555)), (' N  60  SER  HB2', ' N 703  PG4  H72', -0.419, (54.713, 24.081, -23.903)), (' F 349  TRP  HB3', ' F 351  LEU HD12', -0.418, (19.361, 40.39, -77.798)), (' F 304  ALA  HA ', ' F 307  ILE HD12', -0.418, (30.599, 55.014, -82.313)), (' F 573  VAL HG13', ' F 574  VAL HG23', -0.416, (14.019, 54.002, -55.814)), (' B  48  LEU HD23', ' B  59  ILE HD12', -0.415, (17.817, 24.525, 39.287)), (' F 288  LYS  HD2', ' F 433  GLU  HB2', -0.413, (22.769, 82.689, -71.267)), (' F 315  PHE  CD1', ' F 380  GLN  HG3', -0.411, (25.366, 49.855, -66.986)), (' F 215  TYR  CZ ', ' F 568  LEU HD13', -0.41, (10.207, 45.988, -48.992)), (' L  36  TYR  CE1', ' L  46  LEU HD23', -0.41, (20.757, 30.475, -11.489)), (' F 336  PRO  HB2', ' F 340  GLN  CG ', -0.41, (24.54, 44.986, -93.048)), (' F 252  TYR  CZ ', ' F 266  LEU HD22', -0.409, (0.855, 77.844, -85.033)), (' F 459  TRP  CD1', ' F 480  MET  HE1', -0.409, (-12.46, 61.211, -71.693)), (' S 341  VAL HG11', ' S 397  ALA  HB1', -0.409, (41.306, 11.641, -66.181)), (' B  29  VAL HG13', ' B  93  ASP  HB2', -0.409, (34.855, 14.398, 36.551)), (' H 208  LYS  N  ', ' H 209  PRO  CD ', -0.409, (11.283, 56.895, -3.891)), (' S 338  PHE  HE2', ' S 363  ALA  HB1', -0.408, (50.461, 11.413, -62.483)), (' I   1  NAG  H82', ' S 342  PHE  HB2', -0.408, (45.501, 16.019, -70.088)), (' A   6  GLN  H  ', ' A 119  GLN  NE2', -0.408, (5.545, 7.231, 39.576)), (' F 324  THR HG23', ' F 327  PHE  H  ', -0.407, (29.067, 40.03, -74.74)), (' R 377  PHE  CD1', ' R 434  ILE HG12', -0.406, (27.225, 22.155, 10.565)), (' S 371  SER  HB2', ' S 374  PHE  CD2', -0.406, (46.065, 23.694, -67.518)), (' R 425  LEU HD21', ' R 512  VAL HG11', -0.405, (34.953, 15.429, 7.238)), (' F 312  GLU  O  ', ' F 316  VAL HG23', -0.405, (32.373, 49.941, -67.48)), (' E  50  TYR  CE1', ' E  59  VAL HG13', -0.404, (58.963, 41.292, 40.468)), (' E  34  HIS  CE1', ' R 493  GLN  HB3', -0.404, (53.821, 20.414, 19.413)), (' H   5  VAL HG13', ' H 112  GLN HE22', -0.404, (7.863, 43.63, -7.377)), (' D  27  GLN  O  ', ' D  70  THR HG22', -0.403, (30.269, 16.481, -93.37)), (' B 117  ILE  HB ', ' B 207  LYS  HB3', -0.402, (8.912, 17.212, 81.692)), (' E 478  TRP  HA ', ' E 481  LYS  HB2', -0.4, (81.653, 68.966, 22.496)), (' F 554  LEU  O  ', ' F 558  LEU  HG ', -0.4, (19.63, 48.993, -60.011)), (' R 402  ILE  CG2', ' R 403  ARG  N  ', -0.4, (42.397, 23.559, 15.201))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
