# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('C', ' 106 ', 'PRO', None, (44.895, 14.849, 68.564))]
data['rota'] = [('A', ' 340 ', 'GLU', 0.29520711292046026, (58.483, 2.868, 86.759)), ('A', ' 345 ', 'THR', 0.01346333410654945, (50.489999999999995, -1.125, 85.84499999999998)), ('A', ' 358 ', 'ILE', 0.20642261511017576, (63.712, 12.158, 90.242)), ('A', ' 359 ', 'SER', 0.0268755259645787, (67.21799999999999, 13.177, 91.325)), ('A', ' 362 ', 'VAL', 0.1346824134401033, (70.93399999999997, 10.775000000000002, 83.863)), ('A', ' 376 ', 'THR', 0.07498244395461216, (50.854, 14.126, 73.13799999999996)), ('A', ' 444 ', 'LYS', 0.0, (36.622, -2.764, 80.48699999999998)), ('A', ' 445 ', 'VAL', 0.023013725913955327, (33.82, -4.635000000000001, 78.755)), ('A', ' 455 ', 'LEU', 0.24136116838722158, (33.209, 18.089, 90.779)), ('A', ' 470 ', 'THR', 0.11760023459857392, (35.667, 12.847999999999999, 100.27)), ('A', ' 518 ', 'LEU', 0.11031564266087415, (66.205, 26.199999999999992, 91.739)), ('A', ' 524 ', 'VAL', 0.049731656825490245, (69.35899999999998, 15.302, 86.79299999999996)), ('B', '  12 ', 'VAL', 0.09848924133364825, (4.654, -5.072, 106.111)), ('B', '  29 ', 'VAL', 0.025677447638574935, (27.649000000000015, -1.6040000000000003, 89.955)), ('B', '  45 ', 'ARG', 0.036359873248911156, (11.755, 12.967000000000004, 97.07099999999994)), ('B', '  65 ', 'LYS', 0.28135506545670463, (20.767, 5.258, 110.419)), ('B', '  78 ', 'THR', 0.13059337824176126, (22.720000000000002, -5.368, 92.052)), ('B', '  87 ', 'LYS', 0.0, (7.901, 2.017, 110.773)), ('B', ' 109 ', 'ASP', 0.08706023065883037, (20.198999999999998, 11.608, 86.726)), ('C', '   0 ', 'SER', 0.006759144582289215, (58.11, 35.25799999999999, 63.961)), ('C', '   6 ', 'GLU', 0.134375298373234, (52.673, 27.184, 50.909999999999975)), ('C', '  13 ', 'GLN', 0.12071180636399799, (38.234, 17.042, 38.92599999999997)), ('C', '  44 ', 'GLU', 0.029608639132029397, (35.423, 25.237, 61.24799999999997)), ('C', '  69 ', 'THR', 0.010399612148912333, (50.164, 11.369, 52.442)), ('C', ' 107 ', 'LEU', 0.0, (45.55700000000004, 18.89, 65.83)), ('C', ' 119 ', 'THR', 0.03958395486233493, (46.163, 27.847, 49.463)), ('C', ' 123 ', 'VAL', 0.24929529639282666, (37.412, 19.62, 43.394)), ('C', ' 124 ', 'SER', 0.07555858177652526, (34.257999999999996, 19.258000000000006, 41.28599999999997))]
data['cbeta'] = []
data['probe'] = [(' C  83  MET  HB3', ' C  86  LEU HD21', -0.739, (43.877, 15.296, 47.141)), (' A 450  ASN  ND2', ' A 601  HOH  O  ', -0.658, (35.151, 0.323, 87.344)), (' A 372  ALA  HB2', ' C  57  HIS  CD2', -0.651, (56.685, 6.893, 65.926)), (' B  83  MET  HE2', ' B  86  LEU HD21', -0.621, (11.743, -0.225, 104.965)), (' A 408  ARG  HB2', ' A 408  ARG  NH1', -0.578, (43.678, 20.193, 74.046)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.554, (63.15, 13.964, 87.65)), (' C  83  MET  HE1', ' C 121  VAL HG11', -0.542, (43.327, 19.672, 47.717)), (' A 372  ALA  HB2', ' C  57  HIS  NE2', -0.526, (57.071, 6.289, 66.352)), (' A 395  VAL HG23', ' A 524  VAL HG21', -0.521, (65.75, 16.117, 87.156)), (' B  38  ARG  HG3', ' B  48  VAL HG21', -0.515, (14.26, 6.176, 100.95)), (' A 408  ARG  HB2', ' A 408  ARG HH11', -0.513, (43.331, 20.449, 74.085)), (' A 494  SER  HB2', ' B  32  ASP  HB3', -0.51, (32.284, 7.664, 89.797)), (' C   6  GLU  O  ', ' C 117  GLN  NE2', -0.502, (51.292, 29.756, 49.532)), (' A 357  ARG  HG3', ' A 396  TYR  CE2', -0.502, (60.326, 15.687, 93.576)), (' B  38  ARG  O  ', ' B  46  GLU  N  ', -0.493, (12.321, 11.557, 98.807)), (' A 337  PRO  HB2', ' A 340  GLU  HG3', -0.49, (62.174, 4.387, 87.698)), (' C  12  VAL HG11', ' C  86  LEU HD12', -0.484, (42.199, 17.346, 42.896)), (' A 455  LEU HD23', ' A 456  PHE  CZ ', -0.469, (28.872, 18.019, 90.905)), (' B  12  VAL  O  ', ' B 119  VAL  HA ', -0.467, (4.146, -2.391, 106.971)), (' A 365  TYR  H  ', ' A 388  ASN HD21', -0.464, (67.108, 12.777, 77.006)), (' C  55  ASN  HB3', ' C  57  HIS  H  ', -0.461, (58.346, 10.35, 63.302)), (' B  38  ARG  HD3', ' B  94  TYR  OH ', -0.461, (11.515, 4.973, 102.977)), (' A 444  LYS  HB2', ' A 448  ASN  HB2', -0.457, (36.665, -0.264, 81.992)), (' C  22  CYS  HB3', ' C  79  VAL HG12', -0.456, (54.998, 22.3, 54.321)), (' A 498  GLN  HB3', ' A 500  THR HG22', -0.456, (30.247, 2.652, 75.453)), (' B  34  MET  SD ', ' B  79  VAL HG21', -0.456, (24.078, 0.401, 92.459)), (' A 408  ARG  NH2', ' A 602  HOH  O  ', -0.452, (46.988, 20.777, 71.872)), (' B   2  VAL HG13', ' B  27  PHE  CD1', -0.452, (23.75, 2.552, 84.239)), (' A 393  THR  OG1', ' A 516  GLU  HB3', -0.434, (65.272, 21.778, 90.518)), (' C  74  ASN  N  ', ' C  74  ASN  OD1', -0.431, (64.058, 16.74, 54.948)), (' C  51  LEU HD23', ' C  58  THR HG22', -0.43, (54.717, 12.123, 58.695)), (' B  38  ARG  HD3', ' B  94  TYR  CZ ', -0.427, (11.543, 4.584, 102.468)), (' A 392  PHE  CD1', ' A 515  PHE  HB3', -0.417, (64.479, 21.293, 84.382)), (' C  19  ARG  HD3', ' C 209  HOH  O  ', -0.417, (53.89, 19.801, 45.587)), (' C 116  GLY  O  ', ' C 201  HOH  O  ', -0.415, (48.159, 31.368, 57.829)), (' B   4  LEU HD11', ' B  98  VAL HG22', -0.415, (21.15, 5.036, 87.953)), (' C  87  LYS  HB3', ' C  87  LYS  HE2', -0.414, (35.888, 11.483, 46.479)), (' A 408  ARG HH21', ' C 111  ASP  CG ', -0.405, (47.108, 22.732, 71.145)), (' C  94  TYR  O  ', ' C 118  GLY  HA2', -0.404, (46.234, 27.126, 53.143)), (' B   6  GLU  N  ', ' B   6  GLU  OE1', -0.402, (13.67, -0.24, 90.275)), (' B   3  GLN  HB3', ' B  25  SER  OG ', -0.401, (19.66, -1.918, 82.329))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
