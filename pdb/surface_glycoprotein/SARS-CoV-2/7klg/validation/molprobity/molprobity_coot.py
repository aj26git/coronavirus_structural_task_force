# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 385 ', 'THR', 0.014733541456869755, (45.78699999999999, 41.829, 3.052)), ('B', ' 386 ', 'LYS', 0.02844014557443599, (54.02699999999998, 11.397, 2.327))]
data['omega'] = [('L', '   8 ', 'PRO', None, (27.961000000000002, 0.303, 15.001)), ('L', ' 115 ', 'PRO', None, (17.559000000000005, 7.893999999999998, 34.873)), ('L', ' 161 ', 'PRO', None, (37.75899999999999, -15.911, 10.858)), ('M', '   8 ', 'PRO', None, (70.757, 56.514, 14.918)), ('M', ' 115 ', 'PRO', None, (81.06, 48.948999999999984, 34.771)), ('M', ' 161 ', 'PRO', None, (60.83199999999998, 72.62, 10.827))]
data['rota'] = [('I', ' 227 ', 'GLU', 0.27958216412039005, (45.53899999999999, 92.66000000000001, 29.482))]
data['cbeta'] = []
data['probe'] = [(' L 156  LEU HD21', ' L 195  LEU HD22', -0.7, (35.94, -24.422, 18.97)), (' I  52  TRP  CD1', ' M 116  ILE HD11', -0.693, (72.761, 50.715, 36.147)), (' B 383  SER  O  ', ' B 387  LEU HD21', -0.689, (57.656, 15.386, 2.307)), (' B 358  ILE HG22', ' B 524  VAL HG21', -0.625, (65.263, 4.917, 11.916)), (' H 156  LEU HD12', ' H 194  SER  HB3', -0.599, (39.872, -26.725, 30.66)), (' A 338  PHE  HE1', ' A 358  ILE HD13', -0.592, (35.658, 49.273, 14.743)), (' I 167  VAL HG23', ' I 213  VAL HG22', -0.576, (52.187, 79.954, 36.213)), (' L 135  VAL HG11', ' L 225  VAL HG11', -0.573, (40.209, -30.253, 12.795)), (' L 195  LEU HD23', ' L 196  SER  N  ', -0.565, (37.122, -23.57, 21.962)), (' M 187  ASP  OD1', ' M 188  SER  N  ', -0.561, (50.534, 68.656, 20.38)), (' B 359  SER  HA ', ' B 524  VAL HG23', -0.553, (67.573, 2.634, 11.206)), (' I 127  SER  HB3', ' I 161  PHE  CZ ', -0.549, (69.669, 74.621, 43.879)), (' L 155  LEU HD11', ' L 157  ASN  HB3', -0.547, (43.591, -24.046, 20.718)), (' I   8  GLY  O  ', ' I  19  LEU HD11', -0.543, (66.156, 62.881, 49.926)), (' L  76  PHE  CD1', ' L  91  ILE HD12', -0.542, (39.121, 7.404, 17.949)), (' L  56  SER  O  ', ' L  57  ALA  HB3', -0.54, (29.109, 17.676, 22.464)), (' H 127  SER  HB3', ' H 161  PHE  CZ ', -0.539, (28.862, -17.733, 44.076)), (' H   2  VAL HG11', ' H 117  TYR  CD2', -0.539, (40.28, 12.862, 39.041)), (' B 393  THR  O  ', ' B 523  THR HG22', -0.53, (70.028, 2.835, 8.446)), (' A 336  CYS  HB2', ' A 363  ALA  HB2', -0.529, (38.681, 52.84, 13.636)), (' I 185  LEU HD13', ' I 191  TYR  CZ ', -0.527, (68.272, 75.198, 37.591)), (' L  76  PHE  CE1', ' L  91  ILE HD12', -0.521, (39.528, 6.762, 18.533)), (' M   4  MET  HE3', ' M  23  CYS  SG ', -0.519, (74.598, 49.337, 22.18)), (' H  52  TRP  CG ', ' L 116  ILE HG12', -0.518, (24.212, 6.058, 35.409)), (' B 433  VAL HG22', ' B 512  VAL HG22', -0.517, (63.524, 20.63, 14.504)), (' L  36  SER  OG ', ' L  37  SER  N  ', -0.516, (22.909, 19.238, 24.946)), (' M  56  SER  O  ', ' M  57  ALA  HB3', -0.512, (69.611, 39.031, 22.729)), (' H 106  ARG  O  ', ' H 115  MET  HA ', -0.507, (33.039, 11.535, 35.482)), (' H  52  TRP  CD1', ' L 116  ILE HD11', -0.501, (25.69, 6.386, 35.926)), (' M 195  LEU HD23', ' M 196  SER  N  ', -0.501, (61.681, 80.585, 21.815)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.501, (75.375, 1.86, 5.16)), (' A 347  PHE  HB3', ' A 401  VAL HG23', -0.501, (36.607, 38.214, 27.254)), (' I 156  LEU HD12', ' I 194  SER  HB3', -0.499, (58.865, 83.322, 30.538)), (' M  36  SER  OG ', ' M  37  SER  N  ', -0.498, (76.062, 37.871, 25.042)), (' M  95  GLN  HG3', ' M  96  PRO  HD2', -0.496, (49.439, 54.881, 16.594)), (' H 181  PHE  O  ', ' H 193  LEU HD12', -0.487, (40.324, -19.422, 31.192)), (' M 206  TYR  O  ', ' M 212  TYR  OH ', -0.484, (66.843, 99.655, 26.723)), (' H 229  LYS  HD3', ' L 234  CYS  HB2', -0.467, (46.419, -43.404, 25.862)), (' I  12  LEU HD13', ' I  13  VAL  N  ', -0.467, (69.023, 71.196, 48.93)), (' L 133  PRO  HB2', ' L 156  LEU  HB2', -0.465, (40.053, -24.764, 15.096)), (' I   2  VAL HG11', ' I 117  TYR  CD2', -0.465, (58.294, 44.113, 38.519)), (' I  13  VAL HG11', ' I  94  LEU HD13', -0.464, (72.75, 66.091, 47.927)), (' H  91  MET  HE1', ' H 102  TYR  CZ ', -0.463, (26.567, -4.478, 42.961)), (' B 338  PHE  HE1', ' B 358  ILE HD13', -0.462, (62.412, 7.496, 14.535)), (' I  12  LEU  C  ', ' I  12  LEU HD13', -0.456, (68.678, 71.229, 49.017)), (' M 120  GLN  N  ', ' M 120  GLN  OE1', -0.455, (74.699, 57.226, 23.343)), (' I  19  LEU HD23', ' I 124  VAL HG23', -0.452, (68.596, 64.593, 46.801)), (' I 106  ARG  O  ', ' I 115  MET  HA ', -0.451, (65.472, 45.269, 35.944)), (' H  13  VAL HG11', ' H  94  LEU HD13', -0.45, (25.936, -9.088, 48.007)), (' M 135  VAL HG21', ' M 225  VAL HG11', -0.442, (58.154, 87.381, 12.765)), (' B 358  ILE  HB ', ' B 395  VAL  HB ', -0.441, (66.29, 7.338, 13.295)), (' H  99  THR  O  ', ' H  99  THR HG23', -0.441, (27.206, -10.71, 37.915)), (' A 338  PHE  CE1', ' A 358  ILE HD13', -0.436, (36.474, 49.442, 15.169)), (' A 433  VAL HG22', ' A 512  VAL HG22', -0.436, (35.036, 36.128, 14.568)), (' A 330  PRO  HD3', ' A 525  CYS  SG ', -0.435, (34.456, 57.324, 4.525)), (' B 467  ASP  OD1', ' B 469  SER  HB3', -0.431, (80.51, 24.085, 28.095)), (' H 216  LYS  N  ', ' H 217  PRO  CD ', -0.431, (42.47, -17.076, 44.98)), (' H 166  THR  OG1', ' H 214  ASN  HB3', -0.43, (47.424, -17.886, 40.608)), (' M 155  LEU  C  ', ' M 156  LEU HD12', -0.428, (59.027, 83.508, 19.03)), (' A 496  GLY  O  ', ' A 498  GLN  N  ', -0.427, (41.298, 26.565, 34.396)), (' A 520  ALA  HB1', ' A 521  PRO  HD2', -0.419, (22.695, 55.511, 5.312)), (' B 388  ASN  O  ', ' B 526  GLY  HA3', -0.418, (58.135, 4.815, 4.221)), (' L 221  LEU  HA ', ' L 221  LEU HD23', -0.418, (39.219, -25.63, 5.937)), (' M 128  ARG  NH1', ' M 129  THR  OG1', -0.417, (53.064, 71.387, 7.614)), (' M 169  LYS  HG2', ' M 174  LEU HD23', -0.416, (71.457, 92.787, 15.749)), (' H 199  VAL  HB ', ' H 200  PRO  HD2', -0.415, (57.017, -26.682, 22.348)), (' H   8  GLY  O  ', ' H  19  LEU HD11', -0.414, (32.163, -6.111, 50.412)), (' L 187  ASP  OD1', ' L 188  SER  N  ', -0.413, (48.066, -11.985, 20.854)), (' I 134  PRO  HB2', ' I 157  VAL  CG1', -0.413, (57.194, 81.8, 39.535)), (' L 204  ALA  O  ', ' L 208  LYS  HG3', -0.411, (27.643, -45.446, 30.826)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.408, (38.981, 37.11, 26.433)), (' A 417  LYS  HD3', ' L  56  SER  HB3', -0.407, (29.633, 19.901, 25.662)), (' A 477  SER  OG ', ' L 109  ARG  NH2', -0.405, (10.19, 11.922, 33.387)), (' H  12  LEU  C  ', ' H  12  LEU HD13', -0.405, (30.085, -14.391, 49.296)), (' B 388  ASN  HB2', ' B 527  PRO  HD2', -0.404, (55.83, 4.526, 5.36)), (' I  91  MET  HE1', ' I 102  TYR  CZ ', -0.404, (71.835, 61.133, 42.977)), (' I 153  LEU HD12', ' I 154  GLY  N  ', -0.403, (49.064, 85.566, 28.034)), (' A 437  ASN  OD1', ' A 438  SER  N  ', -0.401, (45.905, 33.497, 26.467)), (' H  76  PHE  CE1', ' H  91  MET  HB3', -0.401, (23.534, -3.862, 46.728)), (' A 348  ALA  HB2', ' A 354  ASN  ND2', -0.4, (31.494, 41.647, 27.13)), (' B 439  ASN  OD1', ' B 443  SER  HB3', -0.4, (53.413, 25.392, 32.611))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
