# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('B', ' 738 ', 'CYS', 0.13864408099383907, (194.037, 171.88199999999995, 190.082)), ('B', ' 834 ', 'ILE', 0.25091331554104096, (190.295, 155.64, 204.493)), ('C', ' 738 ', 'CYS', 0.23398861833192688, (170.252, 188.038, 190.04799999999997))]
data['cbeta'] = []
data['probe'] = [(' B 901  GLN HE21', ' B 905  ARG  HE ', -0.715, (185.291, 170.414, 242.538)), (' C 391  CYS  HA ', ' C 525  CYS  HB3', -0.684, (214.609, 196.219, 161.359)), (' B 391  CYS  HA ', ' B 525  CYS  HB3', -0.676, (164.825, 205.929, 161.362)), (' A 391  CYS  HA ', ' A 525  CYS  HB3', -0.673, (181.84, 157.943, 161.088)), (' A 901  GLN HE21', ' A 905  ARG  HE ', -0.656, (201.74, 193.717, 242.503)), (' C 319  ARG  NH1', ' C 320  VAL  O  ', -0.642, (207.558, 211.539, 183.126)), (' A 370  ASN  ND2', ' C 416  GLY  O  ', -0.628, (194.48, 167.956, 150.457)), (' C  65  PHE  O  ', ' C 264  ALA  N  ', -0.617, (188.721, 243.76, 171.297)), (' A 393  THR  HB ', ' A 516  GLU  HB2', -0.611, (174.079, 162.337, 163.968)), (' C 210  ILE HG12', ' C 212  LEU  H  ', -0.595, (179.295, 243.416, 181.272)), (' B 319  ARG  NH1', ' B 320  VAL  O  ', -0.584, (155.928, 192.295, 182.728)), (' A  65  PHE  O  ', ' A 264  ALA  N  ', -0.583, (234.834, 156.901, 171.614)), (' A 139  PRO  HB3', ' A 159  VAL  HA ', -0.581, (231.878, 158.933, 152.084)), (' A 319  ARG  O  ', ' A 625  HIS  ND1', -0.581, (201.942, 157.535, 185.458)), (' C 131  CYS  HA ', ' C 166  CYS  HB3', -0.577, (184.648, 226.35, 146.533)), (' C  81  ASN HD21', ' C 242  LEU  HG ', -0.574, (188.679, 242.887, 162.014)), (' B  34  ARG  NH1', ' B 191  GLU  OE2', -0.571, (149.242, 158.244, 179.334)), (' C 444  LYS  HE3', ' C 447  GLY  HA3', -0.571, (200.148, 176.487, 125.198)), (' C 642  VAL HG22', ' C 651  ILE HG12', -0.564, (207.689, 221.936, 200.141)), (' C 127  VAL HG21', ' C1302  NAG  H5 ', -0.563, (175.513, 235.243, 151.868)), (' A 642  VAL HG22', ' A 651  ILE HG12', -0.549, (206.977, 151.144, 200.011)), (' C 100  ILE HG22', ' C 242  LEU HD22', -0.547, (184.933, 244.269, 163.687)), (' A 471  GLU  OE2', ' B 113  LYS  NZ ', -0.545, (147.89, 179.549, 142.9)), (' A 128  ILE  HB ', ' A 170  TYR  HB3', -0.544, (226.541, 175.431, 154.859)), (' B 100  ILE HG22', ' B 242  LEU HD22', -0.542, (138.096, 155.927, 163.897)), (' B1142  GLN  NE2', ' C1144  GLU  OE1', -0.541, (182.069, 192.153, 279.856)), (' B 310  LYS  HG3', ' B 600  PRO  HA ', -0.53, (156.84, 173.365, 207.858)), (' C 902  MET  HG3', ' C 916  LEU HD11', -0.528, (175.726, 202.176, 247.628)), (' A 535  LYS  NZ ', ' A 554  GLU  OE2', -0.521, (182.875, 142.554, 177.945)), (' B 535  LYS  NZ ', ' B 554  GLU  OE2', -0.518, (150.287, 212.837, 178.227)), (' A 100  ILE HG22', ' A 242  LEU HD22', -0.513, (237.559, 160.107, 163.488)), (' A 469  SER  OG ', ' B 113  LYS  O  ', -0.512, (151.907, 175.291, 146.628)), (' C 139  PRO  HB3', ' C 159  VAL  HA ', -0.509, (188.376, 239.531, 152.147)), (' C 409  GLN  HA ', ' C 414  GLN  HG2', -0.508, (194.372, 176.89, 152.811)), (' C 106  PHE  HB2', ' C 117  LEU  HB3', -0.506, (187.274, 227.934, 157.575)), (' A 745  ASP  OD2', ' C 319  ARG  NH2', -0.504, (206.37, 207.293, 181.597)), (' B 567  ARG  HD2', ' C  42  VAL HG11', -0.504, (171.771, 209.5, 178.281)), (' B 409  GLN  HA ', ' B 414  GLN  HG2', -0.502, (191.286, 198.119, 152.359)), (' C 901  GLN HE21', ' C 905  ARG  HE ', -0.501, (173.263, 196.126, 242.545)), (' B 112  SER  HB3', ' B 134  GLN  HB2', -0.493, (144.244, 169.723, 145.372)), (' B1014  ARG  NH1', ' B1404  HOH  O  ', -0.492, (182.531, 176.172, 201.697)), (' B 318  PHE  HD2', ' B 595  VAL HG23', -0.489, (156.397, 187.361, 193.724)), (' B 642  VAL HG22', ' B 651  ILE HG12', -0.488, (145.447, 187.282, 200.272)), (' A 156  GLU  OE1', ' A 158  ARG  NH1', -0.488, (241.816, 158.082, 148.527)), (' A 215  ASP  N  ', ' A 215  ASP  OD1', -0.487, (235.781, 158.888, 182.63)), (' A 324  GLU  HB2', ' A 539  VAL HG12', -0.484, (195.158, 149.06, 175.769)), (' A 336  CYS  HB3', ' A 361  CYS  HB2', -0.482, (179.007, 153.986, 151.874)), (' C 310  LYS  HG3', ' C 600  PRO  HA ', -0.482, (190.432, 219.212, 208.17)), (' A 943  SER  O  ', ' A 943  SER  OG ', -0.48, (211.417, 179.342, 216.889)), (' C 795  LYS  NZ ', ' C 802  PHE  H  ', -0.471, (164.568, 206.907, 239.454)), (' A  45  SER  O  ', ' A 847  ARG  NH2', -0.463, (218.367, 189.314, 187.416)), (' C 320  VAL HG13', ' C 590  CYS  HB3', -0.462, (209.773, 211.269, 185.488)), (' B 525  CYS  HB2', ' B 526  GLY  H  ', -0.461, (162.301, 204.534, 160.498)), (' B 366  SER  O  ', ' B 370  ASN  HB2', -0.46, (165.324, 193.446, 149.576)), (' B 624  ILE HG13', ' B 626  ALA  HB2', -0.458, (147.843, 187.698, 190.043)), (' B 324  GLU  HB2', ' B 539  VAL HG12', -0.455, (149.925, 198.198, 175.365)), (' C 112  SER  HB2', ' C 134  GLN  HB2', -0.455, (192.817, 232.66, 145.292)), (' A 814  LYS  HG3', ' A 872  GLN  HG3', -0.454, (211.018, 206.423, 224.825)), (' A  34  ARG HH21', ' A 217  PRO  HG2', -0.453, (232.187, 168.051, 182.857)), (' A 403  ARG  NE ', ' A 405  ASP  OD1', -0.452, (174.046, 186.789, 141.041)), (' B 139  PRO  HB3', ' B 159  VAL  HA ', -0.451, (140.28, 161.331, 152.359)), (' A 808  ASP  N  ', ' A 808  ASP  OD1', -0.45, (218.321, 201.924, 229.507)), (' B  53  ASP  HB2', ' B  55  PHE  CE2', -0.449, (160.243, 169.856, 177.972)), (' C 943  SER  O  ', ' C 943  SER  OG ', -0.449, (181.067, 211.857, 216.986)), (' A 659  SER  HB3', ' A 698  SER  HB3', -0.449, (204.807, 158.074, 222.609)), (' A1011  GLN  NE2', ' A1403  HOH  O  ', -0.448, (198.107, 194.566, 203.251)), (' C 328  ARG  HA ', ' C 328  ARG  HD2', -0.448, (220.001, 205.896, 167.38)), (' B 113  LYS  HA ', ' B 113  LYS  HD2', -0.448, (148.975, 174.9, 144.382)), (' C 105  ILE HD11', ' C 241  LEU HD21', -0.447, (187.155, 236.958, 155.724)), (' A 374  PHE  HA ', ' A 436  TRP  HB3', -0.447, (184.284, 173.158, 142.925)), (' B 533  LEU HD21', ' B 585  LEU HD11', -0.446, (153.066, 209.635, 174.999)), (' C 447  GLY  N  ', ' C 497  PHE  O  ', -0.446, (198.609, 176.722, 128.806)), (' B 852  ALA  O  ', ' B 856  ASN  ND2', -0.445, (184.318, 163.923, 189.848)), (' B 398  ASP  OD2', ' B 423  TYR  OH ', -0.439, (182.364, 208.049, 152.937)), (' A 329  PHE  O  ', ' A 580  GLN  NE2', -0.438, (183.853, 147.331, 164.165)), (' A 124  THR  O  ', ' A 124  THR  OG1', -0.437, (240.227, 178.256, 158.393)), (' C 599  THR  OG1', ' C 600  PRO  O  ', -0.437, (190.054, 220.682, 203.916)), (' B 814  LYS  HG3', ' B 872  GLN  HG3', -0.435, (191.755, 155.961, 224.986)), (' C 398  ASP  OD2', ' C 423  TYR  OH ', -0.434, (207.416, 180.079, 152.979)), (' A 612  TYR  HE2', ' A 651  ILE HD12', -0.431, (205.712, 154.017, 197.56)), (' B 329  PHE  O  ', ' B 580  GLN  NE2', -0.431, (154.153, 209.215, 164.043)), (' A 367  VAL  O  ', ' A 371  SER  HB3', -0.428, (189.642, 164.666, 145.835)), (' B 605  SER  OG ', ' B 606  ASN  N  ', -0.428, (149.867, 169.973, 203.472)), (' B 795  LYS  HB3', ' B 795  LYS  HE2', -0.427, (183.123, 155.665, 242.539)), (' C 366  SER  O  ', ' C 370  ASN  HB2', -0.425, (203.246, 202.162, 149.617)), (' B1011  GLN  NE2', ' B1405  HOH  O  ', -0.424, (187.764, 173.231, 203.669)), (' A 556  ASN  ND2', ' B 843  ASP  OD2', -0.423, (177.472, 144.698, 186.73)), (' A 599  THR  OG1', ' A 600  PRO  O  ', -0.421, (214.446, 166.958, 204.018)), (' A 825  LYS  NZ ', ' A 941  THR  O  ', -0.421, (217.3, 183.629, 219.188)), (' B 792  PRO  HA ', ' B 793  PRO  HD3', -0.42, (192.32, 154.738, 240.735)), (' A 498  GLN  H  ', ' A 501  ASN HD21', -0.42, (174.62, 183.912, 130.522)), (' B  36  VAL HG11', ' B 220  PHE  CZ ', -0.42, (156.342, 162.047, 183.306)), (' A 310  LYS  HG3', ' A 600  PRO  HA ', -0.419, (213.169, 167.585, 208.418)), (' A 630  THR HG22', ' A 632  THR  H  ', -0.418, (215.541, 156.661, 188.208)), (' A 411  ALA  HB3', ' A 414  GLN  HG3', -0.418, (175.792, 183.591, 154.908)), (' B1086  LYS  HA ', ' B1086  LYS  HD3', -0.417, (177.27, 203.706, 268.37)), (' C1086  LYS  HA ', ' C1086  LYS  HD3', -0.417, (206.185, 186.249, 268.499)), (' A 808  ASP  HA ', ' A 809  PRO  HD3', -0.417, (219.241, 201.697, 232.714)), (' C 327  VAL HG11', ' C 528  LYS  HE2', -0.415, (213.905, 206.255, 164.356)), (' A 130  VAL  HB ', ' A 168  PHE  HB3', -0.414, (220.897, 172.449, 151.667)), (' A1086  LYS  HA ', ' A1086  LYS  HD3', -0.414, (176.988, 169.959, 268.4)), (' B 106  PHE  HB2', ' B 117  LEU  HB3', -0.414, (151.379, 166.572, 157.328)), (' C 158  ARG  HD2', ' C 249  LEU HD12', -0.412, (188.53, 245.892, 148.909)), (' B 131  CYS  HA ', ' B 166  CYS  HA ', -0.412, (154.136, 165.11, 146.847)), (' C 437  ASN  HB3', ' C 508  TYR  CZ ', -0.412, (195.585, 186.785, 139.798)), (' A  36  VAL HG11', ' A 220  PHE  CZ ', -0.411, (223.396, 172.845, 183.364)), (' B 848  ASP  N  ', ' B 848  ASP  OD2', -0.409, (179.132, 156.459, 194.715)), (' A  34  ARG HH12', ' A 221  SER  HB2', -0.409, (230.125, 171.11, 180.999)), (' B 319  ARG  O  ', ' B 625  HIS  ND1', -0.408, (153.739, 188.439, 185.662)), (' C 498  GLN  H  ', ' C 501  ASN HD21', -0.408, (195.308, 178.082, 131.462)), (' C 525  CYS  HB2', ' C 526  GLY  H  ', -0.408, (214.257, 199.095, 160.344)), (' B1114  ILE  O  ', ' B1119  ASN  ND2', -0.408, (174.477, 185.877, 266.384)), (' C 113  LYS  HA ', ' C 113  LYS  HD2', -0.407, (196.089, 226.432, 144.965)), (' B 790  LYS  HB2', ' B 790  LYS  HE3', -0.407, (194.435, 154.261, 234.46)), (' B 811  LYS  HG3', ' B 812  PRO  HD2', -0.407, (186.164, 146.393, 225.166)), (' A 398  ASP  OD2', ' A 423  TYR  OH ', -0.406, (170.582, 172.38, 152.982)), (' B 612  TYR  HE2', ' B 651  ILE HD12', -0.404, (149.1, 186.739, 197.626)), (' B 215  ASP  N  ', ' B 215  ASP  OD1', -0.404, (138.07, 158.254, 182.794)), (' C 596  SER  OG ', ' C 613  GLN  NE2', -0.404, (199.362, 210.465, 200.612)), (' A 319  ARG HH22', ' A 590  CYS  H  ', -0.403, (192.615, 156.41, 184.337)), (' B 122  ASN  HB3', ' B 123  ALA  H  ', -0.403, (146.954, 147.394, 155.868)), (' A 437  ASN  HB3', ' A 508  TYR  CZ ', -0.402, (182.334, 179.349, 139.68)), (' A  34  ARG  NH2', ' A 217  PRO  HG2', -0.401, (232.34, 168.265, 182.611)), (' B 142  GLY  HA3', ' B 156  GLU  HB3', -0.401, (136.583, 151.662, 152.228)), (' C 329  PHE  O  ', ' C 580  GLN  NE2', -0.4, (222.157, 203.977, 163.644))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
