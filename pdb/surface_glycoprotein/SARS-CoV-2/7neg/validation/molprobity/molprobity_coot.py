# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 151 ', 'PRO', None, (-74.62299999999999, 16.089, 49.863000000000014)), ('H', ' 153 ', 'PRO', None, (-76.876, 12.816, 45.133)), ('L', '   8 ', 'PRO', None, (-70.43599999999995, 23.939, 14.24)), ('L', '  95 ', 'PRO', None, (-46.28399999999998, 17.794, 25.912000000000013)), ('L', ' 142 ', 'PRO', None, (-86.62999999999998, 25.502999999999997, 19.391000000000012))]
data['rota'] = [('H', '  18 ', 'LEU', 0.18126996305365892, (-57.593, 11.365, 47.24000000000002)), ('H', '  35 ', 'SER', 0.01487355426851179, (-53.376999999999995, 8.902, 30.68300000000001)), ('L', '  33 ', 'LEU', 0.21329603213737133, (-56.49199999999998, 14.986, 14.815000000000007)), ('L', ' 115 ', 'SER', 0.05648963532735949, (-95.565, 27.491, 28.217000000000013)), ('L', ' 182 ', 'LEU', 0.17229580237667502, (-83.203, 37.421, 47.213)), ('E', ' 334 ', 'ASN', 0.03762197673145277, (-5.987, 19.11, 6.957000000000002)), ('E', ' 362 ', 'VAL', 0.19583383356252623, (-7.699, 21.048, 13.384)), ('E', ' 477 ', 'SER', 0.09895057975540529, (-50.41199999999999, -10.131, 27.192))]
data['cbeta'] = []
data['probe'] = [(' H 196  GLN  O  ', ' H 601  HOH  O  ', -0.764, (-105.066, 18.569, 43.109)), (' H  89  ASP  OD1', ' H 602  HOH  O  ', -0.747, (-58.073, 20.845, 39.294)), (' E 420  ASP  OD2', ' E 701  HOH  O  ', -0.706, (-39.793, 8.169, 28.033)), (' H  71  ARG  O  ', ' H 603  HOH  O  ', -0.696, (-46.156, 2.525, 39.115)), (' H  82  MET  HE2', ' H  85  LEU HD21', -0.635, (-57.756, 15.613, 42.645)), (' E 382  VAL HG11', ' E 387  LEU HD13', -0.613, (-15.87, 23.619, 24.076)), (' E 387  LEU HD12', ' E 390  LEU HD12', -0.602, (-12.877, 23.634, 22.866)), (' H   6  GLU  OE2', ' H  94  TYR  HA ', -0.584, (-61.383, 6.891, 33.982)), (' E 412  PRO  HG3', ' E 429  PHE  HB3', -0.556, (-25.892, 16.975, 28.119)), (' H  23  ALA  HA ', ' H  77  THR HG22', -0.555, (-55.708, -2.077, 37.693)), (' H  22  CYS  HB3', ' H  78  LEU  HB3', -0.507, (-54.853, 3.288, 35.566)), (' E 501  TYR  CE1', ' L  30  SER  HB2', -0.507, (-48.463, 18.191, 8.475)), (' H 501  GOL  H11', ' L 177  SER  OG ', -0.494, (-85.419, 25.383, 38.053)), (' L 114  PRO  HB3', ' L 140  PHE  HB3', -0.488, (-90.926, 26.875, 25.648)), (' L 166  GLU  OE1', ' L 401  HOH  O  ', -0.485, (-78.998, 15.249, 26.161)), (' H 501  GOL  H12', ' L 179  THR  OG1', -0.483, (-84.292, 27.221, 40.094)), (' H 127  PRO  HD3', ' H 213  LYS  HE2', -0.48, (-93.835, 22.987, 50.671)), (' L 146  LYS  HB3', ' L 198  THR  OG1', -0.447, (-84.911, 35.657, 24.906)), (' L  47  LEU  HA ', ' L  58  VAL HG21', -0.444, (-64.799, 5.436, 15.9)), (' E 502  GLY  O  ', ' E 506  GLN  HG3', -0.442, (-43.471, 23.698, 10.646)), (' L  21  ILE  O  ', ' L  72  THR  HA ', -0.44, (-65.919, 18.597, 10.605)), (' E 350  VAL  HA ', ' E 400  PHE  HB2', -0.434, (-32.302, 11.499, 14.07)), (' E 403  ARG  HG3', ' E 495  TYR  CE1', -0.432, (-41.008, 15.342, 14.197)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.431, (-30.787, 24.109, 17.296)), (' L 121  PRO  HD3', ' L 133  VAL HG22', -0.428, (-90.393, 35.004, 44.522)), (' H  29  VAL HG13', ' H  34  MET  HG3', -0.424, (-50.779, 1.984, 32.504)), (' H  85  LEU  HA ', ' H  85  LEU HD23', -0.423, (-57.062, 18.494, 44.14)), (' L  11  LEU HD21', ' L  19  VAL HG13', -0.417, (-74.502, 17.927, 12.121)), (' E 403  ARG  HG3', ' E 495  TYR  CD1', -0.417, (-41.414, 15.795, 13.779)), (' H  12  ILE  O  ', ' H 115  VAL  HA ', -0.415, (-63.764, 17.875, 48.284)), (' H  22  CYS  N  ', ' H  78  LEU  O  ', -0.401, (-55.776, 2.914, 38.334)), (' A   1  NAG  H61', ' A   2  NAG  N2 ', -0.4, (-21.958, 29.618, 1.783))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
