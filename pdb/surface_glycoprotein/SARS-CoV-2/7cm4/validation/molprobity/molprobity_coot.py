# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 162 ', 'PRO', None, (-51.452, -74.861, -52.02)), ('H', ' 164 ', 'PRO', None, (-47.462, -71.574, -48.669)), ('L', ' 145 ', 'PRO', None, (-54.057, -54.961, -25.13500000000001))]
data['rota'] = [('A', ' 357 ', 'ARG', 0.04060814968926652, (-51.533, -130.04999999999998, 0.02)), ('A', ' 385 ', 'THR', 0.02304980893039645, (-44.31500000000001, -141.382, -18.697)), ('A', ' 517 ', 'LEU', 0.014139254832181238, (-37.564, -136.08, -1.9780000000000002)), ('A', ' 518 ', 'LEU', 0.08386834025766123, (-37.640000000000015, -137.076, 1.6990000000000005)), ('H', '  52 ', 'LEU', 0.039188746827482336, (-49.931, -94.23799999999997, -25.189)), ('H', ' 109 ', 'ARG', 0.15332618247288157, (-55.346, -97.143, -9.474)), ('H', ' 212 ', 'ASN', 0.013388633247486507, (-47.039000000000016, -58.261, -55.354)), ('H', ' 229 ', 'LYS', 0.0, (-62.388, -45.574, -55.649000000000015)), ('L', '  18 ', 'VAL', 0.00945159699767828, (-50.38500000000001, -64.702, -11.693000000000001)), ('L', ' 127 ', 'GLU', 0.11401795705941252, (-63.58100000000002, -56.92, -59.632000000000005)), ('L', ' 170 ', 'LYS', 0.02306500801214046, (-48.01500000000003, -58.717999999999996, -33.495)), ('L', ' 194 ', 'SER', 0.19486556500929123, (-76.42400000000004, -52.93999999999998, -44.713000000000015)), ('L', ' 213 ', 'THR', 0.05968706285564848, (-76.374, -48.688, -51.883)), ('L', ' 214 ', 'GLU', 0.0, (-73.175, -46.703999999999986, -51.159000000000006))]
data['cbeta'] = []
data['probe'] = [(' A 357  ARG  H  ', ' A 357  ARG  HD2', -0.687, (-52.927, -127.67, 0.727)), (' H  52  LEU HD12', ' H 100  ILE HD13', -0.652, (-48.398, -92.953, -21.779)), (' L  40  LEU HD23', ' L  85  ALA  HB2', -0.617, (-44.662, -69.446, -23.914)), (' H 141  PRO  HG3', ' H 153  LEU  HB3', -0.587, (-56.162, -47.542, -50.2)), (' H 210  ILE HG12', ' H 225  ARG  HG2', -0.568, (-49.643, -51.252, -58.949)), (' H 134  PRO  HB3', ' H 160  TYR  HB3', -0.563, (-53.789, -68.195, -53.776)), (' L  38  GLN  HB2', ' L  48  LEU HD11', -0.562, (-45.246, -73.587, -18.358)), (' L 193  ARG  NH2', ' L 401  HOH  O  ', -0.544, (-83.554, -53.071, -42.16)), (' H   2  ILE  HB ', ' H 117  VAL HG11', -0.494, (-36.375, -86.341, -24.222)), (' H  44  GLY  HA2', ' L 167  LYS  HZ3', -0.488, (-53.688, -71.287, -32.412)), (' H 141  PRO  HD2', ' H 228  PRO  HA ', -0.479, (-58.723, -46.055, -53.229)), (' A 414  GLN  O  ', ' A 424  LYS  NZ ', -0.468, (-34.459, -118.383, -12.181)), (' L 136  LEU HD12', ' L 182  LEU HD23', -0.465, (-70.515, -59.07, -44.557)), (' H 229  LYS  H  ', ' H 229  LYS  HG3', -0.461, (-61.71, -46.058, -53.1)), (' H  69  LEU HD21', ' H  84  MET  HE2', -0.46, (-55.544, -90.681, -33.912)), (' A 384  PRO  HA ', ' A 387  LEU  HG ', -0.455, (-44.069, -137.976, -15.628)), (' A 357  ARG  HD2', ' A 357  ARG  N  ', -0.437, (-52.322, -128.461, 0.58)), (' B   2  NAG  H3 ', ' B   2  NAG  O7 ', -0.428, (-66.418, -132.836, -21.156)), (' A 360  ASN  H  ', ' A 523  THR HG22', -0.42, (-50.449, -139.162, 1.156)), (' L  26  SER  HA ', ' L  30  GLY  HA3', -0.41, (-61.081, -86.472, -8.267)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.409, (-54.967, -119.279, -14.465)), (' H  92  THR HG23', ' H 125  THR  HA ', -0.402, (-53.309, -80.546, -41.995))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
