# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 214 ', 'ARG', 0.16286228250165857, (303.166, 250.906, 254.911)), ('C', ' 214 ', 'ARG', 0.22630944127429775, (214.62900000000005, 192.023, 248.66799999999998))]
data['cbeta'] = []
data['probe'] = [(' B 193  VAL HG23', ' B 223  LEU HD22', -0.699, (224.851, 283.593, 258.407)), (' A  96  GLU  OE1', ' A 190  ARG  NH1', -0.699, (300.112, 238.778, 264.408)), (' C1011  GLN  OE1', ' C1014  ARG  NH1', -0.688, (233.359, 240.498, 231.684)), (' A 741  TYR  OH ', ' A 962  LEU  O  ', -0.671, (254.848, 235.263, 245.64)), (' C 193  VAL HG23', ' C 223  LEU HD22', -0.661, (217.815, 210.423, 257.494)), (' C 393  THR  O  ', ' C 523  THR  OG1', -0.661, (272.801, 228.062, 282.639)), (' A  80  ASP  O  ', ' A 265  TYR  OH ', -0.659, (298.341, 251.088, 270.877)), (' C 389  ASP  OD1', ' C 528  LYS  NZ ', -0.654, (262.799, 216.694, 276.518)), (' B 912  THR  OG1', ' B1106  GLN  NE2', -0.654, (241.851, 254.154, 181.794)), (' B  80  ASP  O  ', ' B 265  TYR  OH ', -0.642, (208.821, 290.747, 264.57)), (' B 108  THR  OG1', ' B 234  ASN  O  ', -0.635, (215.784, 274.189, 275.951)), (' A 340  GLU  O  ', ' A 356  LYS  NZ ', -0.633, (237.441, 274.727, 291.048)), (' B 478  THR  HG1', ' C 369  TYR  HH ', -0.621, (257.643, 207.796, 289.734)), (' C 328  ARG  NH2', ' C 580  GLN  OE1', -0.615, (275.007, 211.717, 265.004)), (' C  83  VAL  O  ', ' C 237  ARG  NH2', -0.612, (227.611, 196.273, 270.318)), (' A  99  ASN  ND2', ' A 178  ASP  O  ', -0.603, (304.228, 234.842, 266.011)), (' A 571  ASP  OD1', ' B  44  ARG  NH1', -0.598, (241.383, 271.507, 249.447)), (' B 393  THR  O  ', ' B 523  THR  OG1', -0.595, (213.372, 228.884, 272.3)), (' A 951  VAL  O  ', ' A 955  ASN  ND2', -0.593, (258.658, 235.755, 229.333)), (' A 738  CYS  SG ', ' A 764  ASN  ND2', -0.57, (243.597, 228.94, 243.311)), (' B 741  TYR  OH ', ' B 962  LEU  O  ', -0.568, (246.874, 260.497, 244.98)), (' A1028  LYS  O  ', ' A1032  CYS  N  ', -0.564, (253.648, 237.096, 205.125)), (' B  37  TYR  OH ', ' B  53  ASP  OD2', -0.562, (227.286, 274.718, 259.203)), (' C  96  GLU  OE1', ' C 100  ILE  N  ', -0.548, (208.103, 196.803, 261.322)), (' C 738  CYS  SG ', ' C 764  ASN  ND2', -0.541, (229.582, 253.555, 242.508)), (' A  21  ARG  NE ', ' A 138  ASP  OD2', -0.538, (301.979, 253.185, 279.916)), (' A 975  SER  O  ', ' A1000  ARG  NH2', -0.532, (254.657, 234.87, 255.822)), (' B 908  GLY  O  ', ' B1038  LYS  NZ ', -0.529, (245.584, 250.363, 192.163)), (' C 108  THR  OG1', ' C 234  ASN  O  ', -0.521, (227.116, 208.249, 277.327)), (' B 571  ASP  OD1', ' C  44  ARG  NH1', -0.519, (221.713, 230.787, 247.724)), (' B 246  ARG  NH1', ' B 257  GLY  O  ', -0.509, (203.427, 306.257, 272.811)), (' B  78  ARG  NE ', ' B  80  ASP  OD2', -0.507, (203.795, 291.446, 260.636)), (' B 738  CYS  SG ', ' B 764  ASN  ND2', -0.501, (257.777, 253.579, 244.216)), (' B 975  SER  O  ', ' B1000  ARG  NH2', -0.5, (247.441, 262.116, 254.991)), (' A 914  ASN  ND2', ' A1111  GLU  OE1', -0.493, (263.053, 244.639, 181.823)), (' B  91  TYR  HD1', ' B 193  VAL HG22', -0.492, (222.585, 281.915, 258.489)), (' C 780  GLU  O  ', ' C 784  GLN  NE2', -0.492, (232.721, 250.708, 210.521)), (' B 563  GLN  O  ', ' B 577  ARG  NH1', -0.489, (208.522, 226.546, 258.51)), (' B1054  GLN  N  ', ' B1061  VAL  O  ', -0.489, (249.714, 265.16, 209.362)), (' C  91  TYR  OH ', ' C 191  GLU  OE1', -0.487, (216.907, 206.463, 253.794)), (' B 280  ASN  OD1', ' B 283  GLY  N  ', -0.479, (238.474, 284.49, 246.723)), (' A 559  PHE  CD2', ' A 584  ILE HD12', -0.472, (246.551, 283.692, 256.871)), (' B 731  MET  N  ', ' B 774  GLN  OE1', -0.47, (252.113, 258.616, 224.844)), (' B 973  ILE  N  ', ' B 992  GLN  OE1', -0.468, (242.432, 257.468, 261.894)), (' C  91  TYR  HD1', ' C 193  VAL HG22', -0.468, (220.204, 208.796, 257.685)), (' A 798  GLY  O  ', ' A 920  GLN  NE2', -0.466, (268.217, 229.988, 189.048)), (' A 287  ASP  OD1', ' A 288  ALA  N  ', -0.463, (283.54, 243.044, 246.45)), (' A  34  ARG  NH1', ' A 221  SER  OG ', -0.462, (290.921, 240.878, 254.331)), (' C 287  ASP  OD1', ' C 288  ALA  N  ', -0.46, (221.244, 213.516, 243.395)), (' B 478  THR  OG1', ' C 369  TYR  OH ', -0.459, (257.638, 207.637, 290.524)), (' C 474  GLN  NE2', ' C 478  THR  O  ', -0.457, (267.293, 245.355, 324.572)), (' B 287  ASP  OD1', ' B 288  ALA  N  ', -0.457, (226.641, 280.41, 243.573)), (' A 973  ILE  N  ', ' A 992  GLN  OE1', -0.448, (251.15, 241.099, 262.288)), (' C 973  ILE  N  ', ' C 992  GLN  OE1', -0.448, (231.202, 240.047, 261.528)), (' B  40  ASP  OD1', ' B  41  LYS  N  ', -0.443, (237.383, 276.489, 259.495)), (' C 454  ARG  NH2', ' C 469  SER  O  ', -0.442, (272.602, 234.7, 311.475)), (' B 102  ARG  O  ', ' B 121  ASN  N  ', -0.439, (220.736, 294.331, 271.144)), (' C 741  TYR  OH ', ' C 962  LEU  O  ', -0.436, (229.361, 240.481, 244.037)), (' C 848  ASP  OD1', ' C 849  LEU  N  ', -0.436, (215.37, 235.837, 235.691)), (' A 908  GLY  O  ', ' A1038  LYS  NZ ', -0.432, (252.127, 243.974, 193.463)), (' C  99  ASN  O  ', ' C 102  ARG  NH2', -0.431, (205.966, 198.874, 264.206)), (' C 908  GLY  O  ', ' C1038  LYS  NZ ', -0.428, (244.048, 241.484, 192.672)), (' A1135  ASN  OD1', ' A1136  THR  N  ', -0.426, (260.333, 261.206, 168.156)), (' B 144  TYR  OH ', ' B 158  ARG  NH2', -0.425, (211.029, 303.713, 280.273)), (' B 205  SER  N  ', ' B 224  GLU  O  ', -0.425, (229.128, 285.326, 261.452)), (' C 164  ASN  OD1', ' C 165  ASN  N  ', -0.423, (214.485, 207.678, 289.502)), (' B 101  ILE  O  ', ' B 102  ARG  NE ', -0.421, (219.057, 296.971, 267.145)), (' A 156  GLU  OE1', ' A 158  ARG  NH1', -0.418, (306.082, 241.924, 284.267)), (' B1091  ARG  NE ', ' B1118  ASP  O  ', -0.416, (245.197, 245.301, 175.492)), (' B 848  ASP  OD1', ' B 849  LEU  N  ', -0.413, (248.127, 274.556, 238.327)), (' C  79  PHE  CE1', ' C 244  LEU HD21', -0.412, (211.746, 189.586, 267.493)), (' B 717  ASN  OD1', ' B 718  PHE  N  ', -0.412, (233.86, 265.549, 188.528)), (' B 801  ASN  N  ', ' B 928  ASN  OD1', -0.412, (247.59, 274.389, 196.031)), (' A 717  ASN  OD1', ' A 718  PHE  N  ', -0.411, (271.524, 246.831, 191.052)), (' A 192  PHE  HE1', ' A 205  SER  HG ', -0.41, (291.291, 237.597, 265.285)), (' A  99  ASN  O  ', ' A 102  ARG  NH1', -0.408, (302.12, 239.153, 270.758)), (' B 374  PHE  HD2', ' B 434  ILE HD11', -0.407, (221.225, 240.053, 287.494)), (' C1135  ASN  OD1', ' C1136  THR  N  ', -0.405, (258.134, 227.987, 167.893))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
