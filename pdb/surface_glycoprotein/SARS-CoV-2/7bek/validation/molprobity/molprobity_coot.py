# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 151 ', 'PRO', None, (40.573, 67.722, 2.3049999999999993)), ('H', ' 153 ', 'PRO', None, (43.92800000000002, 65.721, 7.054)), ('L', '   8 ', 'PRO', None, (33.485, 38.338, 20.547999999999988)), ('L', ' 141 ', 'PRO', None, (32.05299999999997, 51.385, 30.785))]
data['rota'] = [('H', '  12 ', 'ILE', 0.15103801051450158, (41.629, 60.996, -6.967999999999998)), ('L', '  15 ', 'VAL', 0.25180719765105325, (47.03, 42.642, 31.994)), ('L', ' 214 ', 'CYS', 0.012204796803416684, (19.894999999999985, 81.679, 27.344))]
data['cbeta'] = []
data['probe'] = [(' L 504   CL CL  ', ' L 601  HOH  O  ', -0.74, (19.993, 78.51, 23.589)), (' L  29  ILE HG22', ' L  32  TYR  HB2', -0.626, (39.233, 26.377, 5.914)), (' E 365  TYR  H  ', ' E 388  ASN HD21', -0.605, (29.152, 2.003, -24.252)), (' E 466  ARG  NH1', ' E 803  HOH  O  ', -0.602, (54.632, 10.157, -12.079)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.584, (47.351, 39.166, 16.62)), (' H  29  VAL HG13', ' H  34  MET  HG3', -0.551, (54.578, 39.285, -5.958)), (' E 455  LEU HD21', ' H 100  GLY  HA3', -0.494, (50.628, 27.428, 0.131)), (' E 431  GLY  HA2', ' E 515  PHE  CD2', -0.489, (36.227, 11.859, -24.218)), (' L  61  ARG  NH1', ' L  79  GLN  HB2', -0.488, (52.159, 40.357, 25.587)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.479, (32.028, 15.336, -11.27)), (' E 396  TYR  OH ', ' E 801  HOH  O  ', -0.479, (49.281, 6.348, -25.164)), (' L 120  PRO  HD3', ' L 132  VAL HG22', -0.478, (21.756, 72.842, 17.716)), (' E 417  LYS  HD2', ' E 701  TRS  H32', -0.476, (44.304, 26.155, -4.1)), (' H 168  HIS  CE1', ' L 502  GOL  H12', -0.457, (40.252, 61.886, 25.967)), (' E 334  ASN  N  ', ' E 806  HOH  O  ', -0.456, (36.629, -9.108, -26.701)), (' E 415  THR HG21', ' H 501  PEG  H42', -0.456, (44.021, 31.934, -15.216)), (' E 393  THR  HA ', ' E 522  ALA  HA ', -0.452, (42.443, 2.833, -31.849)), (' L 167  ASP  OD1', ' L 502  GOL  H11', -0.44, (42.302, 60.419, 27.137)), (' L  48  ILE HG12', ' L  54  LEU  HA ', -0.424, (49.635, 30.237, 16.273)), (' E 431  GLY  HA2', ' E 515  PHE  HD2', -0.424, (36.644, 11.624, -24.663)), (' H 147  LYS  NZ ', ' H 175  GLN  OE1', -0.421, (28.351, 68.877, 8.56)), (' E 366  SER  HA ', ' E 369  TYR  CZ ', -0.413, (25.251, 3.917, -21.565)), (' L  29  ILE HG21', ' L  90  GLN  HG3', -0.412, (37.334, 28.664, 5.94)), (' H  18  LEU  HB3', ' H  82  MET  HE3', -0.411, (44.603, 53.857, -7.773)), (' L  59  PRO  HG2', ' L  61  ARG  NH2', -0.409, (53.57, 38.149, 22.576)), (' L  61  ARG HH11', ' L  79  GLN  HB2', -0.408, (52.09, 39.837, 26.175)), (' L  24  ARG  HD2', ' L 662  HOH  O  ', -0.405, (28.74, 32.351, 16.917)), (' L 143  GLU  HB2', ' L 505   CL CL  ', -0.402, (29.367, 48.6, 25.886)), (' E 392  PHE  CE1', ' E 515  PHE  HB3', -0.401, (37.673, 9.122, -28.116)), (' H  57  THR  H  ', ' H 501  PEG  H32', -0.4, (44.91, 35.002, -13.502))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
