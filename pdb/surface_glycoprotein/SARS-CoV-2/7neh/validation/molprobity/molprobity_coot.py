# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 151 ', 'PRO', None, (-0.8509999999999998, 7.042, -2.239)), ('H', ' 153 ', 'PRO', None, (2.5509999999999984, 9.009999999999998, -6.925)), ('L', '   8 ', 'PRO', None, (-7.782, 37.383, -22.116)), ('L', '  95 ', 'PRO', None, (-6.622999999999998, 43.12500000000001, 2.79)), ('L', ' 142 ', 'PRO', None, (-9.114999999999993, 23.489, -30.979))]
data['rota'] = [('H', '   1 ', 'GLN', 0.09933899201200708, (24.078, 32.071, -6.176)), ('L', '   7 ', 'SER', 0.05359990173019469, (-8.773, 38.436, -20.122)), ('L', '  67 ', 'SER', 0.29603751995400884, (-2.711, 52.727, -14.422)), ('L', '  81 ', 'GLU', 0.270565123098473, (9.777999999999993, 29.535, -24.143)), ('E', ' 354 ', 'ASN', 0.08498154162886648, (5.255, 67.046, 11.678000000000003)), ('E', ' 383 ', 'SER', 0.09739622616056734, (-13.051000000000002, 60.671, 27.113)), ('E', ' 481 ', 'ASN', 0.05139039390956384, (27.07099999999999, 52.394, -1.067))]
data['cbeta'] = []
data['probe'] = [(' H 218  LYS  O  ', ' H 501  HOH  O  ', -0.78, (-15.867, -8.016, -28.501)), (' H  73  ASN  ND2', ' H 502  HOH  O  ', -0.77, (17.375, 34.246, 14.625)), (' A   1  NAG  H61', ' A   2  NAG  HN2', -0.72, (-15.095, 76.57, 7.78)), (' E 466  ARG  HD3', ' E 907  EDO  H21', -0.671, (10.269, 64.694, 13.737)), (' E 909   CL CL  ', ' E1090  HOH  O  ', -0.658, (19.326, 50.236, 5.427)), (' E 906  EDO  O2 ', ' E1001  HOH  O  ', -0.655, (1.633, 47.485, 6.425)), (' L 212  ARG HH11', ' L 303  EDO  H21', -0.653, (-26.374, -5.162, -17.676)), (' L  59  PRO  HB3', ' L 305  PEG  H31', -0.638, (14.208, 38.378, -24.37)), (' H  71  ARG HH21', ' H 401  EDO  H21', -0.606, (13.876, 39.281, 14.088)), (' L 162  GLU  OE2', ' L 401  HOH  O  ', -0.595, (-12.394, 19.645, -18.814)), (' H 125  VAL  H  ', ' H 407  EDO  H12', -0.574, (-6.901, -4.169, -11.847)), (' A   1  NAG  H61', ' A   2  NAG  N2 ', -0.571, (-15.315, 75.491, 8.283)), (' L  79  GLN  OE1', ' L 402  HOH  O  ', -0.557, (13.443, 33.335, -29.448)), (' E 480  CYS  O  ', ' E 481  ASN  ND2', -0.538, (27.05, 51.291, -3.567)), (' E 406  GLU  HG2', ' E 906  EDO  H21', -0.538, (-0.758, 50.96, 5.165)), (' L 124  GLU  O  ', ' L 127  LYS  HG2', -0.525, (-15.241, -7.845, -10.852)), (' H 133  LYS  NZ ', ' H 506  HOH  O  ', -0.507, (-23.2, 1.582, -30.926)), (' H  46  GLU  OE2', ' H 504  HOH  O  ', -0.47, (-6.342, 32.359, 0.751)), (' H 195  THR  OG1', ' H 503  HOH  O  ', -0.461, (-1.651, -7.637, -36.091)), (' E 378  LYS  HG2', ' E 908  EDO  H21', -0.444, (-12.934, 56.09, 16.52)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.441, (5.651, 35.762, -17.526)), (' H 125  VAL  N  ', ' H 407  EDO  H12', -0.44, (-7.148, -3.343, -11.953)), (' H  25  SER  HA ', ' H 406  EDO  H22', -0.439, (22.406, 33.316, 2.04)), (' H  18  LEU  HB2', ' H  82  MET  HE3', -0.437, (3.04, 20.729, 7.494)), (' H 149  TYR  CE1', ' H 154  VAL HG13', -0.434, (-1.569, 6.52, -8.79)), (' H 220  CYS  HB2', ' L 215  CYS  SG ', -0.433, (-21.016, -10.871, -28.024)), (' L 162  GLU  OE2', ' L 306  EDO  O1 ', -0.431, (-13.951, 19.596, -20.137)), (' E 903  EDO  O1 ', ' E 905  NO3  O3 ', -0.431, (-10.879, 54.368, 6.574)), (' E 412  PRO  HG3', ' E 429  PHE  HB3', -0.426, (-2.382, 54.589, 22.201)), (' E 481  ASN  ND2', ' E 481  ASN  O  ', -0.421, (27.935, 52.536, -3.382)), (' E 369  TYR  CE2', ' E 384  PRO  HB2', -0.42, (-15.462, 62.616, 22.047)), (' E 403  ARG  HG3', ' E 495  TYR  CE1', -0.419, (-1.009, 55.049, 1.301)), (' H 402  EDO  H21', ' H 403  EDO  O1 ', -0.418, (3.678, 42.394, 2.686)), (' H 105  ASP  CG ', ' H 106  ILE HD12', -0.416, (14.341, 38.508, -5.707)), (' H  29  VAL HG13', ' H  34  MET  HG3', -0.41, (13.42, 35.636, 5.817)), (' L 212  ARG  HD2', ' L 303  EDO  H21', -0.404, (-26.065, -4.442, -17.291)), (' L  21  ILE  O  ', ' L  72  THR  HA ', -0.4, (-2.839, 43.599, -20.829))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
