# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 147 ', 'PRO', None, (-43.13600000000001, -13.458, 28.701000000000004)), ('H', ' 149 ', 'PRO', None, (-38.62, -10.024000000000001, 26.352)), ('L', '   8 ', 'PRO', None, (-25.082000000000004, -19.242, -2.952)), ('L', '  95 ', 'PRO', None, (-49.06300000000001, -17.043, -6.682)), ('L', ' 141 ', 'PRO', None, (-14.877000000000002, -21.34400000000001, 10.883))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 391  CYS  SG ', ' A 525  CYS  SG ', -1.306, (-83.593, -14.298, -36.362)), (' A 391  CYS  HB3', ' A 525  CYS  HA ', -1.128, (-80.534, -14.708, -35.431)), (' A 391  CYS  HB3', ' A 525  CYS  CA ', -0.745, (-81.15, -14.428, -35.796)), (' H  82  MET  HE2', ' H  82C LEU HD21', -0.686, (-52.51, -13.039, 12.589)), (' A 455  LEU HD21', ' H  97  GLY  HA3', -0.658, (-48.511, -2.313, -10.367)), (' A 391  CYS  CB ', ' A 525  CYS  SG ', -0.657, (-82.059, -13.599, -35.133)), (' L 108  ARG  NH2', ' L 109  THR  O  ', -0.628, (-10.466, -17.267, 11.26)), (' H 171  GLN  HA ', ' L 160  GLN HE22', -0.618, (-37.517, -25.797, 23.17)), (' C  82  MET  HB3', ' C  82C LEU HD21', -0.617, (-51.582, -39.692, -28.805)), (' C  34  MET  SD ', ' C  94  THR HG22', -0.586, (-59.136, -29.352, -14.312)), (' A 391  CYS  CB ', ' A 525  CYS  HA ', -0.584, (-81.158, -13.9, -34.645)), (' H  11  LEU HD21', ' H 147  PRO  HB3', -0.583, (-44.726, -13.14, 25.677)), (' C  39  GLN  HB2', ' C  45  LEU HD12', -0.567, (-49.84, -25.508, -26.91)), (' L 145  LYS  HB3', ' L 197  THR  HB ', -0.566, (-19.07, -32.151, 14.575)), (' H  87  THR HG23', ' H 110  THR  HA ', -0.559, (-45.157, -14.598, 17.136)), (' A 486  PHE  HZ ', ' H   2  VAL HG23', -0.556, (-42.249, 8.672, -1.31)), (' H 119  PRO  HB3', ' H 145  TYR  HB3', -0.553, (-36.887, -16.047, 32.601)), (' H  30  SER  OG ', ' H  73  ASN  HB2', -0.543, (-58.619, 6.427, 0.676)), (' A 350  VAL HG12', ' A 422  ASN  HB3', -0.539, (-57.904, -4.28, -20.979)), (' A 391  CYS  HB3', ' A 525  CYS  SG ', -0.525, (-81.59, -14.538, -35.328)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.52, (-64.219, -4.905, -29.42)), (' C  11  LEU HD22', ' C 112  SER  HB2', -0.519, (-39.476, -41.811, -30.935)), (' C   8  GLY  O  ', ' C  18  LEU HD21', -0.519, (-46.736, -40.919, -22.079)), (' C  66  ARG  NH1', ' C  82B SER  O  ', -0.512, (-53.462, -40.921, -34.241)), (' L  47  LEU HD23', ' L  58  ILE HD12', -0.511, (-30.14, -1.743, -2.733)), (' A 455  LEU HD21', ' H  97  GLY  CA ', -0.508, (-48.844, -2.084, -10.058)), (' C  40  VAL  HB ', ' C  43  LYS  HB2', -0.504, (-48.15, -25.909, -33.744)), (' H 193  THR HG23', ' H 210  LYS  HE2', -0.493, (-19.274, -12.315, 44.227)), (' H 170  LEU HD23', ' H 176  TYR  CZ ', -0.492, (-40.345, -18.679, 23.012)), (' A 350  VAL HG21', ' A 402  ILE HG22', -0.469, (-55.102, -7.789, -21.566)), (' A 355  ARG  NE ', ' A 398  ASP  OD1', -0.468, (-68.133, -4.042, -28.027)), (' A 378  LYS  HE3', ' C 100D ASP  HB2', -0.464, (-65.627, -21.982, -19.572)), (' A 336  CYS  SG ', ' A 358  ILE HG23', -0.46, (-72.698, -10.251, -37.762)), (' A 408  ARG  NH2', ' C 101  GLY  O  ', -0.46, (-55.74, -19.133, -15.498)), (' C  87  THR HG22', ' C 111  VAL HG23', -0.457, (-45.447, -37.911, -31.883)), (' C  98  LEU  HA ', ' C  98  LEU HD23', -0.455, (-66.653, -23.214, -12.87)), (' C  39  GLN  O  ', ' C  88  ALA  HB1', -0.45, (-47.156, -29.406, -29.277)), (' A 438  SER  HB3', ' A 509  ARG  HG3', -0.45, (-53.994, -14.184, -30.602)), (' C  18  LEU HD23', ' C  19  ARG  N  ', -0.449, (-49.686, -42.801, -22.593)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.448, (-73.368, -8.537, -33.807)), (' H 126  PRO  HD3', ' H 138  LEU  HB3', -0.441, (-17.496, -19.605, 36.41)), (' L 136  LEU HD22', ' L 175  LEU HD22', -0.44, (-20.654, -25.359, 18.972)), (' A 336  CYS  SG ', ' A 337  PRO  HD2', -0.439, (-71.284, -10.241, -39.38)), (' C  27  PHE  CZ ', ' C  94  THR HG21', -0.436, (-58.254, -27.801, -12.032)), (' C  20  LEU HD13', ' C  82  MET  HE2', -0.433, (-49.997, -38.892, -23.64)), (' A 357  ARG  O  ', ' A 358  ILE HD13', -0.432, (-70.416, -6.128, -36.516)), (' H 145  TYR  CE1', ' H 176  TYR  HB2', -0.431, (-37.645, -16.143, 27.295)), (' H  17  SER  HA ', ' H  82  MET  O  ', -0.43, (-57.462, -12.294, 15.406)), (' H 200  HIS  HB3', ' H 205  THR  HB ', -0.427, (-38.066, -11.242, 35.481)), (' L  38  GLN  O  ', ' L  84  ALA  HB1', -0.425, (-29.145, -8.072, 5.753)), (' H 101  ASP  N  ', ' H 101  ASP  OD1', -0.421, (-42.059, -0.588, -2.893)), (' A 384  PRO  HA ', ' A 387  LEU  HG ', -0.419, (-73.348, -21.355, -28.493)), (' H 119  PRO  HD2', ' H 205  THR HG21', -0.416, (-37.356, -13.376, 36.279)), (' C  12  VAL  O  ', ' C 111  VAL  HA ', -0.413, (-43.24, -41.653, -31.531)), (' H 148  GLU  OE1', ' H 149  PRO  HA ', -0.413, (-36.86, -11.912, 25.602))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
