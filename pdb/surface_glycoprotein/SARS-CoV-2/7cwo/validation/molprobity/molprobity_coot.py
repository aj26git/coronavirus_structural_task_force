# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 392 ', 'PHE', None, (54.714999999999996, 106.808, 118.677)), ('H', '  73 ', 'ASP', None, (87.00400000000003, 128.73600000000005, 92.71400000000003)), ('L', '   8 ', 'PRO', None, (111.848, 101.977, 76.93)), ('L', '  95 ', 'PRO', None, (106.99500000000002, 117.13300000000002, 94.49200000000002))]
data['rota'] = [('A', ' 524 ', 'VAL', 0.23312014173862033, (53.240999999999985, 110.65300000000003, 115.174))]
data['cbeta'] = []
data['probe'] = [(' H  17  SER  HA ', ' H  83  MET  O  ', -0.971, (100.675, 135.803, 83.973)), (' L  33  LEU  HA ', ' L  89  GLN  O  ', -0.88, (102.366, 106.492, 88.319)), (' L  63  SER  O  ', ' L  74  THR  HB ', -0.766, (100.602, 94.954, 81.609)), (' H  69  THR  O  ', ' H  81  LEU  HA ', -0.744, (96.72, 130.782, 89.82)), (' A 431  GLY  HA3', ' A 513  LEU  O  ', -0.667, (63.951, 102.073, 113.334)), (' H   6  GLU  H  ', ' H 111  GLN HE22', -0.633, (87.367, 125.194, 78.641)), (' H  20  LEU  O  ', ' H  80  TYR  HA ', -0.618, (91.718, 129.945, 86.836)), (' A 455  LEU HD23', ' H 103  MET  HE1', -0.612, (90.002, 103.138, 100.202)), (' H   7  SER  HB3', ' H  21  SER  HB3', -0.59, (88.763, 130.567, 82.704)), (' H  19  ARG  HA ', ' H  82  GLN  HA ', -0.578, (96.04, 133.545, 86.214)), (' L  86  TYR  O  ', ' L 101  GLY  HA2', -0.576, (104.859, 108.304, 77.062)), (' H 104  ASN  HB3', ' H 106  LYS  HG2', -0.567, (88.039, 108.882, 91.561)), (' H  47  TRP  HZ2', ' H  50  VAL HG13', -0.561, (100.484, 119.648, 92.75)), (' H   2  GLN  N  ', ' H  25  SER  O  ', -0.554, (81.657, 116.579, 84.863)), (' H  91  THR HG23', ' H 116  THR  HA ', -0.553, (102.992, 130.372, 73.652)), (' A 367  VAL  HA ', ' A 370  ASN  HB2', -0.543, (50.544, 96.788, 102.628)), (' A 437  ASN  ND2', ' A 506  GLN  OE1', -0.541, (69.388, 92.399, 92.957)), (' A 417  LYS  HE2', ' A 455  LEU HD12', -0.541, (86.805, 99.799, 104.202)), (' H  62  ASP  HA ', ' H  65  LYS  HB2', -0.534, (109.648, 126.274, 91.596)), (' A 334  ASN  HB2', ' A 361  CYS  HA ', -0.533, (50.296, 113.756, 110.355)), (' A 457  ARG  NH1', ' A 459  SER  OG ', -0.532, (86.669, 108.112, 114.44)), (' H  11  VAL  HA ', ' H 116  THR  HB ', -0.522, (100.305, 134.031, 73.129)), (' L  63  SER  O  ', ' L  74  THR  CB ', -0.521, (101.553, 94.874, 81.372)), (' H  37  VAL HG12', ' H  47  TRP  HA ', -0.519, (101.171, 118.163, 85.535)), (' H  70  ILE  HB ', ' H  81  LEU HD12', -0.519, (97.206, 127.122, 90.378)), (' A 365  TYR  HA ', ' A 368  LEU HD13', -0.518, (53.21, 100.933, 107.418)), (' L  94  THR  OG1', ' L  96  ARG  NH1', -0.512, (102.612, 116.273, 96.236)), (' H  35  HIS  HB2', ' H  97  ALA  HB3', -0.499, (96.14, 118.051, 87.185)), (' H  40  ALA  HB3', ' H  43  LYS  HB2', -0.498, (107.063, 120.823, 75.606)), (' H  11  VAL HG11', ' H 121  SER  HA ', -0.494, (101.392, 137.344, 69.837)), (' L   5  THR  HB ', ' L  24  ARG  HB2', -0.491, (113.934, 103.929, 85.296)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.489, (69.341, 103.091, 97.439)), (' A 393  THR  O  ', ' A 523  THR  OG1', -0.482, (55.928, 113.152, 117.559)), (' A 337  PRO  HB2', ' A 340  GLU  HB2', -0.482, (56.925, 111.866, 101.856)), (' H  68  PHE  HB3', ' H  81  LEU HD21', -0.479, (100.233, 128.707, 87.532)), (' A 448  ASN  HB3', ' A 497  PHE  HB2', -0.479, (76.205, 100.881, 89.939)), (' L  93  SER  OG ', ' L  94  THR  N  ', -0.475, (106.335, 114.718, 96.975)), (' H  24  ALA  HB3', ' H  77  ASN  HB3', -0.474, (82.968, 121.982, 88.847)), (' A 418  ILE  HA ', ' A 422  ASN  HB2', -0.474, (79.602, 102.07, 106.323)), (' H  60  TYR  HE1', ' H  70  ILE HG22', -0.465, (99.345, 127.136, 93.45)), (' A 486  PHE  HA ', ' L  32  TYR  HE2', -0.464, (101.953, 107.542, 99.211)), (' L  35  TRP  HA ', ' L  87  TYR  O  ', -0.463, (101.214, 106.081, 81.771)), (' A 393  THR HG21', ' A 518  LEU  H  ', -0.454, (58.388, 110.631, 123.625)), (' L  34  ASN  HB2', ' L  89  GLN  HB3', -0.452, (100.193, 107.457, 86.48)), (' H   5  VAL  O  ', ' H  22  CYS  HA ', -0.451, (87.991, 125.204, 82.745)), (' H  38  ARG  NH2', ' H  46  GLU  OE1', -0.446, (107.29, 121.941, 82.622)), (' A 497  PHE  HA ', ' A 501  ASN HD21', -0.444, (77.325, 97.126, 90.261)), (' A 356  LYS  HE3', ' A 358  ILE HD11', -0.443, (59.469, 113.395, 106.311)), (' L  35  TRP  HD1', ' L  48  ILE  HB ', -0.443, (99.556, 101.654, 84.424)), (' L   6  GLN  O  ', ' L 100  GLN  NE2', -0.44, (112.309, 106.744, 79.161)), (' A 436  TRP  O  ', ' A 508  TYR  HA ', -0.434, (68.42, 97.371, 98.05)), (' H  99  HIS  CG ', ' L  89  GLN HE22', -0.432, (98.453, 111.763, 88.849)), (' L  21  ILE HD12', ' L  73  LEU HD23', -0.432, (103.62, 101.107, 77.432)), (' H  22  CYS  O  ', ' H  78  THR  HA ', -0.421, (86.953, 125.571, 87.258)), (' A 501  ASN  HB3', ' A 505  TYR  HB2', -0.421, (77.102, 92.422, 91.522)), (' A 394  ASN  N  ', ' A 394  ASN  OD1', -0.409, (59.593, 111.278, 118.879)), (' H   9  GLY  HA3', ' H 114  LEU  O  ', -0.406, (96.052, 129.848, 75.114)), (' H   7  SER  N  ', ' H  21  SER  O  ', -0.406, (89.519, 128.247, 81.6)), (' A 424  LYS  HB3', ' A 463  PRO  HA ', -0.404, (76.911, 105.563, 114.673)), (' A 498  GLN  H  ', ' A 501  ASN  ND2', -0.403, (76.802, 96.104, 89.262)), (' A 406  GLU  O  ', ' A 409  GLN  HB2', -0.401, (76.729, 95.693, 106.114)), (' L   3  GLN  HB2', ' L  26  SER  HB3', -0.4, (115.486, 108.971, 89.514))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
