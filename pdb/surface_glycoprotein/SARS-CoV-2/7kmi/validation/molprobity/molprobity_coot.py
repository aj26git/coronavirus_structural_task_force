# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 150 ', 'PRO', None, (4.472000000000008, 5.175, 45.064)), ('A', ' 152 ', 'PRO', None, (-0.9530000000000065, 8.172, 44.524)), ('B', '   8 ', 'PRO', None, (-4.770999999999998, 31.3, 22.836)), ('B', '   8 ', 'PRO', None, (-4.770999999999998, 31.3, 22.836)), ('B', '  95 ', 'PRO', None, (-7.9079999999999995, 6.239, 13.435)), ('B', ' 142 ', 'PRO', None, (-1.381999999999998, 38.02100000000001, 43.737))]
data['rota'] = [('A', '   3 ', 'GLN', 0.22137764723767045, (-21.285000000000004, 5.889000000000003, 35.976)), ('A', '  48 ', 'VAL', 0.03780638799071312, (-5.218, 5.287, 22.91)), ('A', ' 146 ', 'LYS', 0.034313936174837384, (7.104000000000003, 12.889000000000006, 53.662)), ('A', ' 213 ', 'ARG', 0.012975885486509053, (-3.027999999999995, 13.693000000000005, 66.19)), ('B', '  22 ', 'THR', 0.23206739760833955, (-9.062, 29.537, 19.417)), ('C', ' 408 ', 'ARG', 0.06700209519036178, (-8.973000000000003, 1.332, 1.9590000000000003))]
data['cbeta'] = [('B', ' 153 ', 'ASN', ' ', 0.2528027131867496, (20.628000000000004, 37.025000000000006, 59.227)), ('B', ' 162 ', 'GLU', ' ', 0.2510359570268406, (7.304000000000002, 26.382, 46.03))]
data['probe'] = [(' A   4  LEU HD21', ' A  27  PHE  HZ ', -0.572, (-19.45, 3.525, 29.814)), (' C 455  LEU HD22', ' C 493  GLN  HG3', -0.563, (-22.712, 8.887, 13.217)), (' B 184  LYS  O  ', ' B 188  GLU  HG2', -0.536, (20.334, 19.722, 64.04)), (' A  13  GLN  HG2', ' A 406  HOH  O  ', -0.53, (7.023, -5.052, 37.699)), (' A   4  LEU HD21', ' A  27  PHE  CZ ', -0.53, (-19.608, 3.412, 29.98)), (' A 130  CYS  O  ', ' B 213  CYS  HB2', -0.529, (7.909, 27.246, 69.832)), (' A 196  THR  HB ', ' A 213  ARG  HD3', -0.503, (-6.981, 15.128, 68.958)), (' A 130  CYS  C  ', ' B 213  CYS  HB2', -0.496, (7.565, 27.451, 69.362)), (' C 354  ASN  O  ', ' C 398  ASP  HA ', -0.492, (-23.841, -1.289, -6.648)), (' C 392  PHE  HD1', ' C 517 BLEU  HG ', -0.463, (-15.891, -15.53, -13.501)), (' B  22  THR HG23', ' B 404  HOH  O  ', -0.458, (-8.051, 29.705, 15.586)), (' C 408  ARG  NE ', ' C 704  HOH  O  ', -0.448, (-6.274, 4.708, 4.62)), (' B   2  ILE HD11', ' B 301  GOL  H12', -0.434, (-6.908, 15.646, 7.15)), (' C 342  PHE  HB3', ' C 602  GOL  H31', -0.433, (-17.213, 6.61, -14.5)), (' A  82  MET  HE1', ' A 112  VAL HG21', -0.426, (-1.99, 1.341, 32.76)), (' A  47  TRP  CD2', ' B  96  GLY  HA3', -0.42, (-8.331, 7.35, 18.554)), (' C 387  LEU  HA ', ' C 390  LEU HD12', -0.415, (-9.088, -9.907, -16.376)), (' A 187  VAL HG11', ' A 197  TYR  CE1', -0.412, (-8.872, 22.772, 64.227)), (' A  34  MET  HB3', ' A  34  MET  HE3', -0.411, (-15.62, 2.3, 26.607)), (' B  20  THR HG23', ' B  72  THR  CG2', -0.411, (-13.379, 32.855, 20.305)), (' B   2  ILE HD12', ' B  27  GLN  HB2', -0.41, (-6.651, 18.176, 7.853)), (' B 160  SER  HA ', ' B 179  THR  O  ', -0.404, (12.814, 23.664, 50.447))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
