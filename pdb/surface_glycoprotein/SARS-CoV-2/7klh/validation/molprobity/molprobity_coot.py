# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 386 ', 'LYS', 0.045088336626722306, (54.302, 11.598, 2.162))]
data['omega'] = [('L', '   8 ', 'PRO', None, (27.790000000000003, 0.472, 14.691)), ('L', ' 115 ', 'PRO', None, (17.40800000000001, 8.01, 34.795)), ('L', ' 161 ', 'PRO', None, (37.57899999999999, -15.85, 10.58)), ('M', '   8 ', 'PRO', None, (70.99400000000001, 56.308, 14.63)), ('M', ' 115 ', 'PRO', None, (81.19, 48.83599999999999, 34.872)), ('M', ' 161 ', 'PRO', None, (61.08900000000002, 72.598, 10.473))]
data['rota'] = [('L', ' 163 ', 'GLU', 0.294995912957563, (32.456999999999994, -17.427999999999997, 13.702999999999998))]
data['cbeta'] = []
data['probe'] = [(' L 156  LEU HD21', ' L 195  LEU HD22', -0.735, (35.533, -24.588, 19.241)), (' B 433  VAL HG22', ' B 512  VAL HG22', -0.704, (63.853, 20.615, 14.26)), (' I  82  THR  O  ', ' I  85  ASN  ND2', -0.68, (62.303, 41.588, 51.334)), (' M   4  MET  HE3', ' M  23  CYS  SG ', -0.655, (74.643, 48.949, 22.039)), (' B2001  NAG  H82', ' B2001  NAG  O3 ', -0.6, (51.988, 7.659, 18.324)), (' L 128  ARG  NH2', ' L 131  ALA  HB2', -0.557, (44.639, -17.211, 8.768)), (' M  36  SER  OG ', ' M  37  SER  N  ', -0.555, (76.031, 37.864, 24.975)), (' L  36  SER  OG ', ' L  37  SER  N  ', -0.553, (22.856, 19.179, 24.922)), (' B 359  SER  HA ', ' B 524  VAL HG23', -0.543, (67.543, 2.818, 10.745)), (' A 433  VAL HG22', ' A 512  VAL HG22', -0.535, (34.379, 36.078, 14.81)), (' L  76  PHE  CD1', ' L  91  ILE HD12', -0.532, (38.758, 7.845, 18.201)), (' H  13  VAL HG11', ' H  94  LEU HD13', -0.531, (26.391, -9.467, 47.826)), (' A 338  PHE  HE1', ' A 358  ILE HD13', -0.53, (36.154, 49.29, 14.641)), (' L 128  ARG  NE ', ' L 129  THR  O  ', -0.515, (43.653, -14.547, 8.456)), (' L  56  SER  O  ', ' L  57  ALA  HB3', -0.499, (29.329, 18.027, 22.819)), (' I  13  VAL HG11', ' I  94  LEU HD13', -0.479, (72.159, 66.23, 47.901)), (' M  56  SER  O  ', ' M  57  ALA  HB3', -0.479, (69.705, 39.222, 22.746)), (' B 358  ILE HG22', ' B 524  VAL HG21', -0.479, (65.798, 4.822, 11.75)), (' L 135  VAL HG11', ' L 225  VAL HG11', -0.477, (40.298, -30.596, 12.301)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.474, (75.736, 2.643, 5.181)), (' B 383  SER  O  ', ' B 387  LEU HD21', -0.474, (58.668, 15.218, 2.437)), (' I 185  LEU HD13', ' I 191  TYR  CZ ', -0.473, (68.023, 74.941, 37.736)), (' M 135  VAL HG21', ' M 225  VAL HG11', -0.47, (58.466, 87.272, 12.626)), (' I  12  LEU  C  ', ' I  12  LEU HD13', -0.468, (68.379, 70.942, 48.899)), (' A 336  CYS  HB2', ' A 363  ALA  HB2', -0.466, (38.742, 52.944, 13.201)), (' A 437  ASN  OD1', ' A 438  SER  N  ', -0.466, (46.42, 33.399, 26.255)), (' I  52  TRP  CD1', ' M 116  ILE HD11', -0.466, (73.12, 50.127, 35.332)), (' L 120  GLN  N  ', ' L 120  GLN  OE1', -0.464, (23.818, 0.113, 23.102)), (' I   6  GLU  OE2', ' I 104  CYS  N  ', -0.464, (64.214, 54.678, 40.603)), (' M 120  GLN  N  ', ' M 120  GLN  OE1', -0.461, (74.904, 56.81, 23.236)), (' L  76  PHE  CE1', ' L  91  ILE HD12', -0.458, (39.073, 6.726, 17.99)), (' H  52  TRP  CG ', ' L 116  ILE HG12', -0.458, (24.02, 5.945, 35.162)), (' M 187  ASP  OD1', ' M 188  SER  N  ', -0.453, (50.56, 68.402, 20.105)), (' H  91  MET  HE1', ' H 102  TYR  CZ ', -0.451, (26.746, -4.889, 43.166)), (' I 167  VAL HG23', ' I 213  VAL HG22', -0.451, (51.937, 79.248, 35.863)), (' H 156  LEU HD12', ' H 194  SER  HB3', -0.446, (39.824, -27.062, 30.732)), (' A 430  THR  O  ', ' A 430  THR HG23', -0.445, (30.676, 40.731, 6.619)), (' B 333  THR  O  ', ' B 333  THR HG22', -0.441, (58.029, -5.272, 11.03)), (' H  84  LYS  O  ', ' H  86  THR HG23', -0.44, (37.306, 9.453, 52.178)), (' I  91  MET  HE1', ' I 102  TYR  CZ ', -0.438, (71.987, 61.257, 42.73)), (' H  99  THR  O  ', ' H  99  THR HG23', -0.437, (27.22, -10.887, 37.612)), (' I  52  TRP  CG ', ' M 116  ILE HG12', -0.435, (74.736, 50.647, 35.447)), (' L 133  PRO  HB2', ' L 156  LEU  HB2', -0.429, (40.041, -24.687, 14.95)), (' H  91  MET  HE2', ' H  94  LEU HD21', -0.425, (24.794, -5.805, 45.465)), (' H 106  ARG  O  ', ' H 115  MET  HA ', -0.424, (33.079, 11.188, 35.483)), (' H  12  LEU  C  ', ' H  12  LEU HD13', -0.417, (30.112, -14.464, 49.054)), (' A 347  PHE  HB3', ' A 401  VAL HG23', -0.416, (36.545, 38.139, 27.445)), (' H   2  VAL HG13', ' H  28  PHE  CD1', -0.415, (40.508, 12.568, 41.839)), (' H 157  VAL  HB ', ' H 193  LEU HD23', -0.414, (40.357, -23.415, 35.229)), (' B 382  VAL HG22', ' B 387  LEU HD21', -0.413, (59.9, 15.297, 2.15)), (' L   6  GLN  HG3', ' L  23  CYS  SG ', -0.411, (26.512, 4.038, 20.056)), (' I  84  LYS  O  ', ' I  86  THR HG23', -0.41, (61.241, 47.354, 52.027)), (' A 330  PRO  HD3', ' A 525  CYS  SG ', -0.406, (34.223, 56.852, 4.331)), (' I 138  PRO  O  ', ' I 139  LEU HD12', -0.4, (54.364, 89.816, 29.91))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
