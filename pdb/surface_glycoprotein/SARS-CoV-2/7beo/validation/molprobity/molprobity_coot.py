# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 161 ', 'PRO', None, (-16.819, 1.7240000000000002, -12.43)), ('A', ' 163 ', 'PRO', None, (-13.357000000000001, -1.3680000000000008, -8.38)), ('B', '   8 ', 'PRO', None, (16.132, 11.266, 1.469)), ('B', '  95 ', 'PRO', None, (-3.4400000000000004, 24.745, 6.986)), ('B', ' 141 ', 'PRO', None, (16.939, -2.5160000000000005, -10.154)), ('C', ' 157 ', 'PRO', None, (-3.6210000000000004, -26.694, 37.182)), ('C', ' 159 ', 'PRO', None, (-5.689, -26.891000000000002, 43.074)), ('D', '   8 ', 'PRO', None, (-20.246000000000002, -3.259999999999999, 59.69)), ('D', '  96 ', 'PRO', None, (-33.949, -9.206, 41.235)), ('D', ' 142 ', 'PRO', None, (-2.335, -5.301000000000005, 63.492999999999995)), ('E', ' 161 ', 'PRO', None, (-29.812, -2.128, -12.612999999999998)), ('E', ' 163 ', 'PRO', None, (-33.325, 0.9400000000000005, -8.546)), ('F', '   8 ', 'PRO', None, (-62.884, -11.764000000000005, 1.399)), ('F', '  95 ', 'PRO', None, (-43.23600000000001, -25.15300000000001, 7.017)), ('F', ' 141 ', 'PRO', None, (-63.65100000000002, 1.9129999999999994, -10.394)), ('H', ' 157 ', 'PRO', None, (-43.198, 26.440000000000023, 37.139)), ('H', ' 159 ', 'PRO', None, (-41.205, 26.734, 43.043)), ('L', '   8 ', 'PRO', None, (-26.782000000000004, 3.249000000000002, 59.641)), ('L', '  96 ', 'PRO', None, (-12.935000000000002, 9.090000000000007, 41.229)), ('L', ' 142 ', 'PRO', None, (-44.617, 5.490000000000001, 63.64))]
data['rota'] = [('R', ' 335 ', 'LEU', 0.13439084479309155, (31.111, 43.42800000000002, 18.352)), ('H', ' 199 ', 'LEU', 0.16803310499877447, (-65.725, 26.573000000000018, 62.22500000000001)), ('A', '   6 ', 'GLU', 0.1474146177528044, (-16.064, 5.453000000000002, 8.097)), ('A', ' 123 ', 'VAL', 0.24463359015060265, (-15.367000000000003, 8.521000000000008, -3.268)), ('B', '   1 ', 'ASP', 0.08980510963389367, (0.958, 27.420000000000005, 3.9789999999999996)), ('B', '  11 ', 'VAL', 0.039143971058287985, (16.213, 4.351, 0.131)), ('B', ' 123 ', 'GLU', 0.0629881660170431, (-11.342, -9.761000000000006, -31.002999999999997)), ('C', '  72 ', 'ARG', 0.0, (-33.592000000000006, -29.137, 36.123)), ('C', ' 199 ', 'LEU', 0.18590863699400276, (18.755000000000003, -26.351, 62.37)), ('E', '   6 ', 'GLU', 0.10027129836175717, (-30.633999999999997, -5.788, 7.952999999999999)), ('E', ' 123 ', 'VAL', 0.28056032508607553, (-31.357000000000014, -8.945, -3.3829999999999996)), ('F', '  11 ', 'VAL', 0.040846575219311836, (-62.93300000000004, -4.883, 0.044)), ('F', ' 123 ', 'GLU', 0.1063119581930414, (-35.34400000000001, 9.043, -31.218))]
data['cbeta'] = []
data['probe'] = [(' X 346  ARG HH22', ' X 450  ASN  HB3', -0.709, (-56.242, -24.847, 24.299)), (' C  38  ARG  HB3', ' C  48  ILE HD11', -0.664, (-22.408, -17.656, 39.543)), (' L 121  PRO  HD3', ' L 133  VAL HG22', -0.653, (-63.247, 13.328, 44.909)), (' L  38  GLN  HB2', ' L  48  LEU HD11', -0.65, (-23.113, 16.805, 60.087)), (' A  53  GLN  NE2', ' A 402  ACT  O  ', -0.649, (-10.708, 21.766, 21.003)), (' X 335  LEU  N  ', ' X 362  VAL  O  ', -0.645, (-76.05, -46.522, 19.331)), (' D 121  PRO  HD3', ' D 133  VAL HG22', -0.616, (16.729, -13.767, 45.025)), (' D 109  ARG  NH1', ' D 110  THR  O  ', -0.609, (-1.141, -8.297, 68.634)), (' C 104  THR  O  ', ' X 473  TYR  OH ', -0.608, (-47.568, -27.928, 49.003)), (' A 133  PRO  HB3', ' A 159  TYR  HB3', -0.607, (-13.914, -2.962, -17.595)), (' A 211  ASN  ND2', ' A 222  ASP  OD1', -0.592, (-12.791, -17.257, -15.157)), (' F  91  ALA  O  ', ' X 444  LYS  NZ ', -0.59, (-47.683, -22.092, 15.778)), (' D  38  GLN  HB2', ' D  48  LEU HD11', -0.59, (-23.395, -16.705, 59.944)), (' F  21  ILE HD12', ' F 102  THR HG21', -0.589, (-61.132, -8.907, 3.242)), (' C 129  PRO  HB3', ' C 155  TYR  HB3', -0.586, (3.629, -26.327, 40.638)), (' H  38  ARG  HB3', ' H  48  ILE HD11', -0.586, (-24.912, 17.177, 39.704)), (' R 472  ILE HD13', ' R 482  GLY  HA2', -0.584, (5.366, 13.72, 44.391)), (' A  22  CYS  HB3', ' A  79  LEU  HB3', -0.574, (-16.834, 10.972, 11.953)), (' E 211  ASN  ND2', ' E 222  ASP  OD1', -0.574, (-33.873, 16.999, -15.749)), (' R 385  THR  OG1', ' R 386  LYS  N  ', -0.573, (19.655, 59.119, 26.542)), (' E 133  PRO  HB3', ' E 159  TYR  HB3', -0.57, (-33.221, 2.792, -17.966)), (' B  91  ALA  O  ', ' R 444  LYS  NZ ', -0.568, (1.016, 21.881, 15.85)), (' H 129  PRO  HB3', ' H 155  TYR  HB3', -0.566, (-50.094, 26.113, 40.289)), (' E  91  THR HG23', ' E 124  THR  HA ', -0.566, (-33.675, -9.936, -7.326)), (' E  83  MET  HB3', ' E  86  LEU HD21', -0.557, (-28.934, -16.863, -1.97)), (' X 343  ASN  OD1', ' X 701  GOL  O1 ', -0.551, (-62.081, -40.037, 16.087)), (' B  21  ILE HD12', ' B 102  THR HG21', -0.545, (14.096, 8.252, 3.064)), (' C 131  VAL  O  ', ' C 219  LYS  NZ ', -0.545, (12.884, -28.291, 44.4)), (' R 339  GLY  HA2', ' R 601  NAG  O7 ', -0.542, (21.254, 39.699, 16.547)), (' L  15  PRO  HD3', ' L 107  ILE HG23', -0.539, (-35.963, 12.699, 69.524)), (' A  83  MET  HB3', ' A  86  LEU HD21', -0.537, (-17.928, 16.44, -1.492)), (' H  44  ARG  NH1', ' H  45  LEU  O  ', -0.536, (-23.474, 10.241, 45.604)), (' D 186  ASP  HA ', ' D 189  LYS  HD3', -0.517, (20.245, -7.356, 34.852)), (' C 107  TYR  HD1', ' J   3  FUC  H63', -0.511, (-38.703, -26.203, 56.86)), (' R 338  PHE  O  ', ' R 601  NAG  H81', -0.509, (21.016, 40.179, 19.015)), (' E  22  CYS  HB3', ' E  79  LEU  HB3', -0.508, (-30.339, -10.894, 11.652)), (' X 350  VAL HG22', ' X 422  ASN  HB3', -0.505, (-56.107, -33.458, 35.186)), (' F  18  ARG  HG2', ' F  76  SER  O  ', -0.5, (-67.47, -1.494, 12.283)), (' A  91  THR HG23', ' A 124  THR  HA ', -0.499, (-13.41, 8.882, -7.09)), (' D 109  ARG  HG2', ' D 110  THR  H  ', -0.499, (-3.841, -8.307, 70.357)), (' D  67  GLY  HA3', ' D  72  PHE  HA ', -0.496, (-33.45, -4.968, 60.312)), (' R 350  VAL HG22', ' R 422  ASN  HB3', -0.491, (9.419, 33.119, 35.644)), (' G   3  FUC  H63', ' H 107  TYR  HD1', -0.49, (-8.188, 26.054, 56.879)), (' F 120  PRO  HD3', ' F 132  VAL HG22', -0.489, (-45.812, 3.599, -31.0)), (' F  37  GLN  HB2', ' F  47  LEU HD11', -0.487, (-53.248, -4.651, 10.105)), (' D  15  PRO  HD3', ' D 107  ILE HG23', -0.481, (-11.145, -12.696, 70.027)), (' C  44  ARG  NH1', ' C  45  LEU  O  ', -0.479, (-23.015, -10.747, 45.731)), (' F  32  TRP  CD1', ' X 444  LYS  HD2', -0.474, (-50.212, -23.061, 18.327)), (' X 472  ILE HD13', ' X 482  GLY  HA2', -0.474, (-52.28, -13.991, 44.471)), (' H 131  VAL  O  ', ' H 219  LYS  NZ ', -0.473, (-59.693, 28.258, 44.384)), (' C 169  LEU HD21', ' C 192  VAL HG21', -0.471, (7.919, -26.382, 60.738)), (' L 186  ASP  HA ', ' L 189  LYS  HD3', -0.469, (-67.115, 7.13, 35.024)), (' B  37  GLN  HB2', ' B  47  LEU HD11', -0.467, (6.532, 4.355, 10.213)), (' C  34  VAL HG22', ' C  98  ALA  HB2', -0.466, (-32.408, -26.24, 45.582)), (' E  53  GLN  NE2', ' E 302  ACT  OXT', -0.466, (-35.983, -21.691, 21.562)), (' F  19  VAL HG21', ' F  78  LEU HD12', -0.463, (-63.058, -1.8, 6.481)), (' L 121  PRO  HB3', ' L 132  SER  H  ', -0.463, (-62.208, 16.359, 42.857)), (' X 339  GLY  O  ', ' X 343  ASN  HB2', -0.462, (-66.173, -37.936, 16.695)), (' B 120  PRO  HD3', ' B 132  VAL HG22', -0.462, (-0.82, -4.334, -30.91)), (' R 439  ASN  O  ', ' R 443  SER  OG ', -0.461, (1.945, 32.531, 17.414)), (' H  34  VAL HG22', ' H  98  ALA  HB2', -0.461, (-14.614, 25.93, 45.482)), (' A 130  THR  HB ', ' E 217  SER  HA ', -0.461, (-23.795, 2.24, -14.22)), (' L  48  LEU HD23', ' L  59  ILE HD12', -0.461, (-20.883, 20.159, 61.723)), (' D 194  ALA  HB2', ' D 209  SER  HB3', -0.459, (18.483, -5.265, 52.264)), (' C  53  VAL  O  ', ' C  72  ARG  HD3', -0.453, (-38.702, -28.791, 38.073)), (' D  48  LEU HD23', ' D  59  ILE HD12', -0.453, (-26.116, -20.128, 61.9)), (' D   9  GLY  HA2', ' L  24  ARG  CZ ', -0.452, (-17.369, -4.325, 54.744)), (' C  91  THR HG23', ' C 120  THR  HA ', -0.451, (-11.52, -20.065, 37.362)), (' L 109  ARG  HG2', ' L 110  THR  H  ', -0.448, (-43.391, 8.844, 70.661)), (' H 169  LEU HD21', ' H 192  VAL HG21', -0.448, (-55.101, 26.409, 60.559)), (' B  32  TRP  CD1', ' R 444  LYS  HD2', -0.443, (2.998, 22.721, 18.476)), (' H  68  VAL HG22', ' H  83  LEU HD13', -0.44, (-23.775, 18.074, 32.953)), (' C  35  GLN  HA ', ' C  50  TRP  HA ', -0.437, (-32.087, -20.266, 41.432)), (' D  55  ARG  NH1', ' D  61  ASP  O  ', -0.437, (-30.932, -16.838, 70.412)), (' C 196  SER  HA ', ' C 199  LEU HD23', -0.437, (17.762, -22.427, 63.781)), (' H  72  ARG  HA ', ' H  79  ALA  HA ', -0.437, (-15.211, 28.907, 37.308)), (' B  19  VAL HG21', ' B  78  LEU HD12', -0.435, (16.317, 0.869, 6.722)), (' H 196  SER  HA ', ' H 199  LEU HD23', -0.435, (-64.589, 22.577, 64.135)), (' C   4  LEU  O  ', ' C 114  GLY  HA2', -0.433, (-24.416, -28.982, 47.961)), (' F 105  GLU  HG2', ' F 106  ILE  N  ', -0.432, (-60.34, 1.624, -1.57)), (' R 401  VAL HG22', ' R 509  ARG  HG2', -0.432, (10.046, 34.317, 24.195)), (' B 105  GLU  HG2', ' B 106  ILE  N  ', -0.432, (13.604, -2.029, -1.824)), (' L 194  ALA  HB2', ' L 209  SER  HB3', -0.432, (-65.465, 5.277, 52.249)), (' C  99  PRO  HB3', ' C 109  ALA  O  ', -0.431, (-35.788, -22.774, 51.563)), (' L  67  GLY  HA3', ' L  72  PHE  HA ', -0.428, (-13.73, 4.931, 60.63)), (' D  24  ARG  CZ ', ' L   9  GLY  HA2', -0.426, (-29.509, 4.1, 54.772)), (' C  68  VAL HG22', ' C  83  LEU HD13', -0.426, (-23.193, -18.196, 33.03)), (' A 112  ASN  OD1', ' R 444  LYS  HE2', -0.425, (1.204, 20.012, 19.16)), (' R 498  GLN  HB2', ' R 501  ASN  OD1', -0.424, (-4.588, 30.841, 21.797)), (' H 199  LEU  HA ', ' H 199  LEU HD13', -0.424, (-64.386, 26.687, 61.144)), (' B 120  PRO  HB3', ' B 131  SER  H  ', -0.424, (-4.306, -3.974, -29.729)), (' D 109  ARG  HG2', ' D 110  THR  N  ', -0.424, (-3.771, -8.228, 70.111)), (' H  99  PRO  HB3', ' H 109  ALA  O  ', -0.423, (-11.399, 22.317, 51.655)), (' X 401  VAL HG22', ' X 509  ARG  HG2', -0.423, (-56.889, -34.687, 24.319)), (' E  97  ALA  HB1', ' E 114  MET  HB3', -0.423, (-41.257, -11.322, 12.345)), (' E 112  ASN  OD1', ' X 444  LYS  HE2', -0.421, (-47.884, -20.34, 19.001)), (' B 115  VAL  O  ', ' B 207  LYS  HE2', -0.42, (10.805, -10.481, -24.311)), (' H  50  TRP  CD1', ' H  59  ASN  HB2', -0.419, (-11.255, 16.312, 39.666)), (' X 350  VAL  HA ', ' X 400  PHE  HB2', -0.417, (-58.211, -33.365, 31.194)), (' A  97  ALA  HB1', ' A 114  MET  HB3', -0.416, (-5.9, 10.809, 12.523)), (' B  47  LEU  HA ', ' B  58  VAL HG21', -0.416, (4.959, 5.164, 15.974)), (' D 109  ARG  NH1', ' D 112  ALA  HB2', -0.415, (0.147, -9.066, 68.798)), (' L 171  ASP  OD2', ' L 173  THR  OG1', -0.415, (-47.072, 15.255, 64.808)), (' C   4  LEU  HB2', ' C 112  ILE HG22', -0.413, (-28.706, -28.865, 49.883)), (' A 104  VAL HG21', ' R 449  TYR  HB2', -0.413, (3.733, 20.288, 26.445)), (' F  49  TYR  O  ', ' F  53  SER  HB2', -0.413, (-53.106, -13.432, 19.905)), (' F 145  LYS  HB3', ' F 197  THR  OG1', -0.412, (-62.181, -3.72, -20.75)), (' X 385  THR  OG1', ' X 386  LYS  N  ', -0.41, (-65.555, -59.407, 26.98)), (' L  92  TYR  HA ', ' L  97  TRP  CG ', -0.409, (-12.379, 13.065, 46.795)), (' F  47  LEU  HA ', ' F  58  VAL HG21', -0.409, (-51.701, -5.25, 16.168)), (' L  48  LEU  HA ', ' L  59  ILE HG13', -0.408, (-18.511, 20.053, 61.659)), (' F 125  LEU  O  ', ' F 183  LYS  HD2', -0.407, (-35.813, 2.439, -35.886)), (' A  67  ARG  HB3', ' A  84  ASN  O  ', -0.406, (-18.388, 21.148, -2.506)), (' F 124  GLN  HG2', ' F 129  THR  O  ', -0.405, (-38.015, 2.453, -30.452)), (' C 199  LEU  HA ', ' C 199  LEU HD13', -0.405, (16.939, -26.117, 61.308)), (' H   4  LEU  O  ', ' H 114  GLY  HA2', -0.404, (-22.365, 29.257, 48.095)), (' A  11  VAL HG21', ' A 161  PRO  HG3', -0.403, (-18.303, 3.5, -9.502)), (' C  33  ALA  O  ', ' C  99  PRO  HD2', -0.403, (-35.152, -24.35, 46.881)), (' B 125  LEU  O  ', ' B 183  LYS  HD2', -0.403, (-10.808, -3.532, -35.438)), (' B  49  TYR  O  ', ' B  53  SER  HB2', -0.402, (6.53, 12.879, 20.347)), (' E  50  VAL HG11', ' F  94  PHE  CZ ', -0.401, (-39.097, -22.027, 12.923))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
