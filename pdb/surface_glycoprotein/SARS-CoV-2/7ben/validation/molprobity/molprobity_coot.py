# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', ' 360 ', 'ASN', 0.002252132694866602, (82.476, 30.515, -27.429)), ('L', ' 212 ', 'ARG', 0.008806853200949705, (-73.167, 11.603999999999994, -69.081))]
data['omega'] = [('A', ' 161 ', 'PRO', None, (-18.68, 1.931, -127.20600000000002)), ('A', ' 163 ', 'PRO', None, (-15.327, -1.174, -123.142)), ('B', '   8 ', 'PRO', None, (14.224, 11.348, -113.208)), ('B', '  95 ', 'PRO', None, (-5.2369999999999965, 24.898999999999997, -107.702)), ('B', ' 141 ', 'PRO', None, (15.078000000000001, -2.45, -124.82899999999998)), ('D', ' 157 ', 'PRO', None, (5.436999999999995, 47.776, -36.641)), ('D', ' 159 ', 'PRO', None, (7.405, 47.663999999999994, -42.55)), ('F', '   8 ', 'PRO', None, (22.054999999999996, 71.51199999999997, -59.161)), ('F', '  96 ', 'PRO', None, (35.778, 65.21300000000001, -40.812)), ('F', ' 142 ', 'PRO', None, (3.865, 69.59599999999998, -62.831)), ('G', ' 161 ', 'PRO', None, (31.904, 73.038, 12.612)), ('G', ' 163 ', 'PRO', None, (35.298, 76.186, 8.563)), ('H', ' 157 ', 'PRO', None, (-45.331, 26.81399999999999, -77.849)), ('H', ' 159 ', 'PRO', None, (-43.308, 26.976, -71.993)), ('I', '   8 ', 'PRO', None, (64.716, 63.352, -1.134)), ('I', '  95 ', 'PRO', None, (45.390999999999984, 50.028, -6.688)), ('I', ' 141 ', 'PRO', None, (65.553, 77.245, 10.462)), ('L', '   8 ', 'PRO', None, (-28.793999999999993, 3.112, -55.387)), ('L', '  96 ', 'PRO', None, (-14.958, 9.533999999999999, -73.707)), ('L', ' 142 ', 'PRO', None, (-46.836999999999996, 4.991, -51.878))]
data['rota'] = [('E', ' 345 ', 'THR', 0.27632436255533177, (13.666999999999996, 30.296, -97.115)), ('E', ' 382 ', 'VAL', 0.15143551124668128, (18.167000000000016, 54.744, -80.892)), ('E', ' 483 ', 'VAL', 0.23437034814002686, (-0.979, 12.064999999999994, -70.641)), ('L', ' 155 ', 'LEU', 0.24825412776557776, (-61.87100000000004, -0.789, -70.624)), ('A', '   6 ', 'GLU', 0.10842273498045195, (-17.977, 5.687000000000002, -106.674)), ('A', '  53 ', 'GLN', 0.23890998297713983, (-16.306000000000004, 18.63, -94.166)), ('A', ' 123 ', 'VAL', 0.24497943261367738, (-17.198, 8.785999999999998, -118.069)), ('B', '  11 ', 'VAL', 0.03550614246580272, (14.227, 4.448999999999998, -114.526)), ('B', ' 123 ', 'GLU', 0.1490349491612675, (-13.178000000000004, -9.571999999999996, -145.82399999999998)), ('B', ' 127 ', 'SER', 0.10444180067539141, (-15.761, -3.152, -146.587)), ('B', ' 207 ', 'LYS', 0.20047617168441287, (9.202, -6.802, -143.143)), ('C', ' 345 ', 'THR', 0.28226415887447637, (64.578, 44.748, -17.383)), ('D', '  87 ', 'ARG', 0.023716330549811256, (15.498, 58.480999999999995, -29.504)), ('G', '  13 ', 'GLN', 0.0007617647338939937, (27.612999999999996, 61.799, 11.098)), ('G', '  53 ', 'GLN', 0.1275152639736177, (34.581999999999994, 56.096, -20.548)), ('G', ' 123 ', 'VAL', 0.16404593817721502, (33.55100000000001, 66.198, 3.5539999999999994)), ('G', ' 224 ', 'LYS', 0.26135647332507556, (39.34, 93.278, 22.846)), ('I', ' 109 ', 'THR', 0.210578059126308, (69.496, 82.614, 6.982))]
data['cbeta'] = []
data['probe'] = [(' D 413  HOH  O  ', ' G 307   BR BR  ', -0.914, (40.452, 55.459, -31.761)), (' E 346  ARG HH22', ' E 450  ASN  HB3', -0.902, (7.317, 24.592, -90.466)), (' L 113  ALA  O  ', ' L 401  HOH  O  ', -0.899, (-54.95, 9.762, -50.605)), (' D 407  HOH  O  ', ' G 307   BR BR  ', -0.879, (39.938, 54.349, -31.809)), (' D  66  GLU  HA ', ' G  30  ASN HD21', -0.849, (29.94, 61.058, -27.386)), (' G  53  GLN  NE2', ' G 303   BR BR  ', -0.836, (37.494, 53.125, -21.399)), (' H 154  ASP  OD2', ' H 401  HOH  O  ', -0.819, (-56.918, 21.17, -79.768)), (' F 110  THR HG23', ' F 403  IMD  H4 ', -0.809, (3.335, 70.101, -71.936)), (' C 336  CYS  N  ', ' C 362  VAL  O  ', -0.761, (77.24, 30.452, -21.95)), (' A  53  GLN  NE2', ' A 301   BR BR  ', -0.761, (-12.511, 20.951, -93.58)), (' G  13  GLN  HG3', ' G  16  ARG  HD3', -0.759, (24.408, 61.629, 10.397)), (' E 493  GLN  OE1', ' E 701  HOH  O  ', -0.752, (-4.276, 24.707, -81.715)), (' E 351  TYR  O  ', ' E 702  HOH  O  ', -0.741, (10.16, 29.835, -77.438)), (' H 131  VAL  O  ', ' H 219  LYS  NZ ', -0.731, (-61.503, 28.367, -71.064)), (' B 131  SER  O  ', ' B 401  HOH  O  ', -0.727, (-4.209, -5.464, -142.244)), (' E 357  ARG  HD2', ' E 601  IMD  H5 ', -0.722, (26.225, 34.264, -81.162)), (' D 100  HIS  HB3', ' D 112  ILE HD11', -0.702, (35.052, 45.479, -52.269)), (' L  41  PRO  HA ', ' L 301  PG6 H101', -0.698, (-35.603, 18.974, -62.123)), (' C 336  CYS  HB3', ' C 337  PRO  HD2', -0.682, (76.158, 34.304, -23.257)), (' B  91  ALA  O  ', ' E 444  LYS  NZ ', -0.681, (-0.593, 21.998, -99.035)), (' A   6  GLU  OE2', ' A 120  GLY  N  ', -0.676, (-13.468, 4.521, -108.6)), (' E 355  ARG  H  ', ' E 602  GOL  H11', -0.661, (19.079, 31.519, -83.016)), (' A 115  ASP  O  ', ' A 402  HOH  O  ', -0.657, (-4.406, 6.239, -100.04)), (' C 444  LYS  NZ ', ' C 601  HOH  O  ', -0.654, (47.773, 53.063, -19.386)), (' L  38  GLN  HB2', ' L  48  LEU HD11', -0.654, (-25.757, 16.796, -55.294)), (' L 143  ARG  NH1', ' L 403  HOH  O  ', -0.65, (-43.027, 12.191, -60.173)), (' D  38  ARG  HB3', ' D  48  ILE HD11', -0.647, (24.193, 56.912, -39.755)), (' G 305   BR BR  ', ' G 433  HOH  O  ', -0.646, (32.044, 84.479, 23.204)), (' H  38  ARG  HB3', ' H  48  ILE HD11', -0.624, (-27.306, 17.473, -75.216)), (' D 107  TYR  HD1', ' K   3  FUC  H63', -0.616, (39.962, 49.255, -57.076)), (' B 152  ASN  ND2', ' B 404  HOH  O  ', -0.613, (10.084, -0.251, -153.944)), (' D 129  PRO  HB3', ' D 155  TYR  HB3', -0.609, (-1.163, 48.261, -40.651)), (' C 601  HOH  O  ', ' G 112  ASN  ND2', -0.599, (47.478, 54.498, -20.264)), (' A  83  MET  HB3', ' A  86  LEU HD21', -0.593, (-19.49, 16.481, -116.72)), (' C 346  ARG HH21', ' C 450  ASN  HB3', -0.585, (58.438, 50.349, -24.833)), (' L 186  ASP  HA ', ' L 189  LYS  HD3', -0.585, (-68.81, 7.388, -80.689)), (' B 115  VAL  O  ', ' B 403  HOH  O  ', -0.581, (8.324, -10.58, -139.552)), (' D  29  PHE  O  ', ' D  53  VAL HG21', -0.579, (39.529, 45.372, -42.947)), (' E 472  ILE HD13', ' E 482  GLY  HA2', -0.571, (2.959, 14.311, -70.422)), (' B  21  ILE HD12', ' B 102  THR HG21', -0.57, (12.382, 8.796, -111.224)), (' D  66  GLU  HA ', ' G  30  ASN  ND2', -0.567, (29.843, 60.556, -26.606)), (' B 120  PRO  HD3', ' B 132  VAL HG22', -0.56, (-2.696, -4.194, -145.644)), (' G  83  MET  HB3', ' G  86  LEU HD21', -0.559, (31.05, 58.993, 1.946)), (' L 162  GLU  HG3', ' L 414  HOH  O  ', -0.559, (-52.686, 7.291, -67.94)), (' F  38  GLN  HB2', ' F  48  LEU HD11', -0.559, (25.061, 57.79, -60.393)), (' A 211  ASN  ND2', ' A 222  ASP  OD1', -0.557, (-14.799, -17.271, -129.974)), (' H 129  PRO  HB3', ' H 155  TYR  HB3', -0.553, (-52.227, 26.299, -74.781)), (' E 603  GOL  H2 ', ' L  33  TYR  CZ ', -0.548, (-6.705, 13.891, -65.083)), (' D  68  VAL HG22', ' D  83  LEU HD13', -0.546, (24.634, 56.378, -32.917)), (' L  42  GLY  H  ', ' L 301  PG6 H122', -0.537, (-36.056, 20.901, -63.317)), (' D 131  VAL  O  ', ' D 219  LYS  NZ ', -0.536, (-11.244, 46.605, -44.216)), (' B  37  GLN  HB2', ' B  47  LEU HD11', -0.527, (4.636, 4.178, -104.495)), (' A 110  TYR  O  ', ' A 404  HOH  O  ', -0.526, (-3.767, 21.603, -95.011)), (' C 350  VAL HG22', ' C 422  ASN  HB3', -0.522, (58.265, 41.177, -35.462)), (' C 493  GLN  NE2', ' G 105  ALA  O  ', -0.519, (48.347, 52.954, -33.998)), (' E 346  ARG  NH2', ' E 450  ASN  HB3', -0.518, (7.841, 24.464, -90.272)), (' C 444  LYS  HD2', ' I  32  TRP  CG ', -0.515, (52.146, 51.771, -17.728)), (' F 109  ARG  HG2', ' F 110  THR  H  ', -0.512, (5.028, 66.054, -69.977)), (' L 121  PRO  HD3', ' L 133  VAL HG22', -0.51, (-65.563, 13.842, -70.232)), (' G 133  PRO  HB3', ' G 159  TYR  HB3', -0.504, (35.246, 77.656, 17.426)), (' B  18  ARG  HG2', ' B  76  SER  O  ', -0.503, (18.823, 0.97, -102.029)), (' A  22  CYS  HB3', ' A  79  LEU  HB3', -0.502, (-18.65, 11.086, -102.79)), (' I 120  PRO  HD3', ' I 132  VAL HG22', -0.499, (48.251, 78.558, 30.938)), (' E 346  ARG  NH2', ' E 708  HOH  O  ', -0.494, (9.341, 23.506, -89.969)), (' E 379  CYS  HB2', ' E 384  PRO  HD3', -0.492, (14.768, 53.458, -84.216)), (' C 336  CYS  HB3', ' C 337  PRO  CD ', -0.49, (76.865, 34.29, -22.753)), (' L  15  PRO  HD3', ' L 107  ILE HG23', -0.489, (-38.128, 12.431, -44.99)), (' D  99  PRO  HB3', ' D 109  ALA  O  ', -0.488, (37.549, 51.863, -51.426)), (' C 341  VAL HG22', ' C 356  LYS  HD2', -0.487, (71.176, 39.16, -24.698)), (' F  37  TYR  OH ', ' F 502  HOH  O  ', -0.484, (33.252, 57.408, -51.378)), (' E 401  VAL HG22', ' E 509  ARG  HG2', -0.484, (8.185, 34.052, -90.537)), (' G 211  ASN  ND2', ' G 222  ASP  OD1', -0.484, (35.621, 92.171, 15.209)), (' D 196  SER  HA ', ' D 199  LEU HD23', -0.484, (-15.818, 52.062, -63.393)), (' L 194  ALA  HB2', ' L 209  SER  HB3', -0.484, (-67.835, 5.015, -63.204)), (' E 350  VAL HG22', ' E 422  ASN  HB3', -0.483, (7.076, 33.275, -79.139)), (' F 194  ALA  HB2', ' F 209  SER  HB3', -0.478, (-16.502, 69.316, -51.547)), (' B  19  VAL HG21', ' B  78  LEU HD12', -0.477, (14.252, 0.953, -107.808)), (' H  99  PRO  HB3', ' H 109  ALA  O  ', -0.474, (-13.592, 22.613, -63.529)), (' L 301  PG6  H82', ' L 301  PG6 H102', -0.473, (-36.122, 15.917, -63.727)), (' B 125  LEU  O  ', ' B 183  LYS  HD2', -0.472, (-12.407, -3.494, -150.113)), (' L 146  LYS  HB3', ' L 198  THR  HB ', -0.471, (-53.839, -0.063, -60.187)), (' G  34  LEU  HB3', ' G  79  LEU HD22', -0.47, (35.173, 61.637, -13.061)), (' A 133  PRO  HB3', ' A 159  TYR  HB3', -0.469, (-15.698, -2.886, -132.141)), (' E 439  ASN  O  ', ' E 443  SER  OG ', -0.468, (0.095, 32.617, -97.213)), (' F 121  PRO  HD3', ' F 133  VAL HG22', -0.465, (-14.498, 60.758, -44.724)), (' H 157  PRO  HB2', ' H 403  HOH  O  ', -0.461, (-42.218, 24.563, -76.68)), (' G 135  VAL  O  ', ' G 223  LYS  HE3', -0.461, (37.115, 86.285, 23.779)), (' G  13  GLN  H  ', ' G  13  GLN  HG2', -0.46, (25.509, 63.195, 9.998)), (' L  67  GLY  HA3', ' L  72  PHE  HA ', -0.46, (-15.765, 4.846, -54.548)), (' F 111  VAL  H  ', ' F 403  IMD  C4 ', -0.459, (3.516, 70.879, -69.605)), (' A  91  THR HG23', ' A 124  THR  HA ', -0.456, (-15.244, 9.292, -121.851)), (' D 416  HOH  O  ', ' F 402  PG6 H111', -0.455, (15.493, 58.356, -49.551)), (' F 106  GLU  OE1', ' F 174  TYR  OH ', -0.455, (10.029, 64.681, -60.534)), (' A 112  ASN  ND2', ' A 404  HOH  O  ', -0.454, (-3.176, 20.523, -94.459)), (' L 104  LYS  HB2', ' L 301  PG6  H31', -0.454, (-34.932, 9.754, -58.937)), (' L 190  HIS  O  ', ' L 212  ARG  NE ', -0.453, (-73.058, 9.526, -73.314)), (' I 123  GLU  N  ', ' I 123  GLU  OE1', -0.453, (38.81, 85.655, 31.284)), (' I  19  VAL HG21', ' I  78  LEU HD12', -0.451, (64.716, 73.741, -6.723)), (' G  97  ALA  HB1', ' G 114  MET  HB3', -0.45, (42.916, 64.009, -12.25)), (' H 196  SER  HA ', ' H 199  LEU HD23', -0.448, (-66.777, 22.332, -51.493)), (' I  24  ARG  HA ', ' I  69  THR  O  ', -0.445, (61.873, 53.838, -7.118)), (' I  37  GLN  HB2', ' I  47  LEU HD11', -0.445, (55.095, 70.526, -10.127)), (' A  83  MET  HE2', ' A  86  LEU HD21', -0.443, (-18.279, 15.494, -116.64)), (' F  15  PRO  HD3', ' F 107  ILE HG23', -0.442, (12.153, 62.374, -69.392)), (' D  50  TRP  CD1', ' D  59  ASN  HB2', -0.442, (37.318, 58.885, -39.185)), (' A  67  ARG  HB3', ' A  84  ASN  O  ', -0.44, (-20.201, 21.405, -117.516)), (' I  48  ILE HD13', ' I  54  LEU  HA ', -0.439, (56.51, 67.149, -18.401)), (' D 136  PRO  HG2', ' D 223  PRO  HB3', -0.439, (-17.447, 51.634, -56.983)), (' L  82  GLU  HG2', ' L 404  HOH  O  ', -0.439, (-32.017, 20.831, -46.485)), (' B  47  LEU  HA ', ' B  58  VAL HG21', -0.438, (3.067, 5.358, -98.716)), (' I 145  LYS  HB3', ' I 197  THR  OG1', -0.438, (63.92, 71.389, 20.529)), (' C 395  VAL HG22', ' C 515  PHE  HD1', -0.434, (74.668, 28.542, -30.58)), (' H  68  VAL HG22', ' H  83  LEU HD13', -0.433, (-25.717, 18.47, -81.797)), (' A  97  ALA  HB1', ' A 114  MET  HB3', -0.432, (-7.728, 10.809, -102.27)), (' E 395  VAL HG22', ' E 515  PHE  HD1', -0.431, (24.176, 46.045, -83.85)), (' F 121  PRO  HB3', ' F 132  SER  H  ', -0.43, (-12.998, 58.183, -42.198)), (' H  50  TRP  CD1', ' H  59  ASN  HB2', -0.43, (-13.572, 16.093, -75.419)), (' C 401  VAL HG22', ' C 509  ARG  HG2', -0.429, (59.247, 40.416, -23.718)), (' C 478  THR HG21', ' F  32  SER  HB3', -0.429, (43.583, 60.079, -54.974)), (' H   4  LEU  O  ', ' H 114  GLY  HA2', -0.428, (-24.512, 29.489, -66.746)), (' E 393  THR HG23', ' E 394  ASN HD22', -0.428, (29.357, 43.457, -78.737)), (' E 357  ARG  HG3', ' E 396  TYR  CE1', -0.427, (25.497, 38.075, -80.975)), (' I 105  GLU  HG2', ' I 106  ILE  N  ', -0.426, (61.939, 77.01, 2.04)), (' A  15  GLY  O  ', ' A 405  HOH  O  ', -0.426, (-24.648, 20.172, -120.827)), (' I 173  TYR  C  ', ' I 401  HOH  O  ', -0.422, (57.002, 81.844, 11.271)), (' D 107  TYR  HH ', ' F  50  TYR  HE1', -0.422, (36.903, 53.459, -59.868)), (' F   3  GLN  HB2', ' F  26  SER  HB3', -0.421, (31.482, 74.278, -46.58)), (' B 105  GLU  HG2', ' B 106  ILE  N  ', -0.421, (11.728, -2.075, -116.114)), (' L  48  LEU HD23', ' L  59  ILE HD12', -0.421, (-23.043, 20.316, -52.599)), (' D   4  LEU  HB2', ' D 112  ILE HG22', -0.42, (30.115, 45.46, -49.358)), (' D  44  ARG  HD2', ' F 101  GLN  HA ', -0.419, (22.77, 66.668, -47.875)), (' G  83  MET  HE2', ' G  86  LEU HD21', -0.417, (32.12, 59.641, 2.106)), (' E 368  LEU HD22', ' E 374  PHE  HE2', -0.416, (15.155, 45.728, -94.559)), (' F  34  LEU HD22', ' F  72  PHE  CG ', -0.414, (34.85, 67.247, -56.478)), (' A  32  TYR  OH ', ' A 403  HOH  O  ', -0.414, (-7.791, 10.128, -90.498)), (' H  34  VAL HG22', ' H  98  ALA  HB2', -0.413, (-16.887, 26.104, -69.308)), (' A  64  VAL  HB ', ' A  68  PHE  CG ', -0.412, (-16.316, 20.256, -113.588)), (' I  20  THR  OG1', ' I 301  IMD  H2 ', -0.409, (69.149, 66.733, -6.371)), (' L  29  VAL  HA ', ' L 407  HOH  O  ', -0.408, (-9.971, 6.269, -64.315)), (' H  73  ASP  HB3', ' H  76  THR HG22', -0.408, (-16.536, 34.528, -78.873)), (' B 120  PRO  HB3', ' B 131  SER  H  ', -0.407, (-6.24, -3.773, -144.437)), (' I 134  CYS  HB2', ' I 148  TRP  CH2', -0.406, (53.794, 77.478, 25.57)), (' L  48  LEU  HA ', ' L  59  ILE HG13', -0.405, (-20.802, 19.832, -53.572)), (' I  31  SER  O  ', ' I  31  SER  OG ', -0.405, (56.868, 55.495, -18.829)), (' G   6  GLU  HG3', ' G  96  CYS  SG ', -0.404, (35.198, 67.462, -9.599)), (' G  61  VAL HG23', ' G  64  VAL HG22', -0.403, (38.299, 53.117, -1.643)), (' F 186  ASP  HA ', ' F 189  LYS  HD3', -0.402, (-18.22, 67.247, -34.066)), (' A 168  TRP  CH2', ' A 210  CYS  HB3', -0.402, (-7.875, -14.407, -132.385)), (' B  20  THR  O  ', ' B  21  ILE HD13', -0.401, (14.523, 8.728, -109.077)), (' C 358  ILE  HB ', ' C 395  VAL  HB ', -0.4, (75.799, 33.118, -29.082)), (' F  48  LEU  HA ', ' F  59  ILE HG13', -0.4, (30.228, 54.535, -61.153)), (' C 393  THR HG22', ' C 516  GLU  O  ', -0.4, (79.186, 28.539, -35.993)), (' A 176  GLY  O  ', ' A 196  VAL  HA ', -0.4, (0.451, -14.502, -128.871))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
