# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 151 ', 'PRO', None, (41.786, 102.344, 1.717)), ('H', ' 153 ', 'PRO', None, (36.765, 100.306, -1.246)), ('L', '   8 ', 'PRO', None, (33.665, 76.486, -21.209)), ('L', ' 141 ', 'PRO', None, (35.92000000000001, 95.756, -30.45))]
data['rota'] = [('H', '   6 ', 'GLU', 0.02649144304420142, (25.476, 93.267, 6.212)), ('H', ' 182 ', 'LEU', 0.01657406777914996, (40.306, 105.997, -10.43)), ('E', ' 335 ', 'LEU', 0.2250307256499947, (20.715, 31.635000000000023, 18.971)), ('E', ' 346 ', 'ARG', 0.010912112279942533, (14.296, 45.921, 3.269)), ('E', ' 389 ', 'ASP', 0.0, (32.817, 36.266, 26.994))]
data['cbeta'] = []
data['probe'] = [(' E 389  ASP  N  ', ' E 389  ASP  OD1', -0.725, (33.578, 36.361, 25.065)), (' E 340  GLU  OE1', ' E 356  LYS  NZ ', -0.608, (14.808, 39.211, 14.536)), (' E 495  TYR  O  ', ' L  32  TYR  OH ', -0.578, (20.312, 61.564, -3.75)), (' L  18  ARG  HG3', ' L  76  SER  HA ', -0.569, (19.602, 78.932, -26.601)), (' L  47  LEU  HA ', ' L  58  VAL HG21', -0.53, (17.909, 81.316, -12.09)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.526, (23.129, 83.162, -14.371)), (' L  48  ILE HD13', ' L  54  LEU  HA ', -0.52, (16.314, 77.109, -13.499)), (' H  12  ILE HG21', ' H  85  LEU HD13', -0.512, (40.659, 91.709, 9.48)), (' L 197  THR HG22', ' L 204  PRO  HB3', -0.5, (46.784, 104.503, -34.325)), (' L 120  PRO  HD3', ' L 132  VAL HG22', -0.495, (47.757, 116.861, -18.174)), (' E 379  CYS  SG ', ' E 384  PRO  HG3', -0.472, (33.809, 45.883, 17.292)), (' H 135  THR  HA ', ' H 140  ALA  HA ', -0.47, (32.926, 117.206, -26.088)), (' H  59  TYR  O  ', ' H  64  LYS  NZ ', -0.468, (36.384, 73.409, 8.155)), (' H 204  HIS  CD2', ' H 206  PRO  HD2', -0.461, (36.808, 104.099, 1.314)), (' H  33  TYR  HB2', ' H  98  ASP  HB3', -0.461, (21.45, 76.861, 4.349)), (' E 440  ASN  ND2', ' E 441  LEU  HG ', -0.45, (22.15, 44.109, -2.775)), (' L  80  PRO  HA ', ' L 106  ILE HG13', -0.443, (24.762, 91.543, -24.223)), (' L  13  ALA  HB3', ' L  78  LEU HD22', -0.441, (26.716, 84.625, -26.549)), (' H  36  TRP  CE2', ' H  80  LEU  HB2', -0.44, (29.597, 86.052, 9.066)), (' H 103  ASP  N  ', ' H 103  ASP  OD1', -0.436, (21.478, 74.879, -1.791)), (' L 140  TYR  CG ', ' L 141  PRO  HA ', -0.426, (34.244, 94.938, -29.191)), (' E 501  ASN  HB3', ' E 505  TYR  HB2', -0.426, (26.996, 59.299, -5.375)), (' E 412  PRO  HG3', ' E 429  PHE  HB3', -0.422, (29.323, 56.339, 21.179)), (' H  33  TYR  CB ', ' H  98  ASP  HB3', -0.419, (21.971, 76.641, 4.612)), (' E 403  ARG  HG3', ' E 495  TYR  CE1', -0.418, (22.809, 60.104, 1.484)), (' L   6  GLN  NE2', ' L  86  TYR  O  ', -0.411, (30.997, 79.435, -14.737)), (' H 131  SER  HB2', ' H 135  THR  HB ', -0.407, (35.849, 120.521, -26.155)), (' E 458  LYS  HE3', ' H  31  SER  OG ', -0.406, (12.914, 78.263, 12.858)), (' H 103  ASP  OD2', ' L  49  GLN  NE2', -0.405, (17.65, 75.1, -4.18)), (' H  36  TRP  NE1', ' H  80  LEU  HB2', -0.4, (29.973, 85.578, 9.2)), (' L 145  LYS  HB3', ' L 197  THR  OG1', -0.4, (46.803, 100.436, -31.084))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
