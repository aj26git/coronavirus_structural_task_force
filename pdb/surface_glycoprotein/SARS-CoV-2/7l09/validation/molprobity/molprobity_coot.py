# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 149 ', 'PRO', None, (160.689, 139.45, 104.04299999999999)), ('H', ' 151 ', 'PRO', None, (164.049, 135.693, 108.14999999999999)), ('K', '   8 ', 'PRO', None, (196.274, 145.475, 118.09799999999998)), ('K', ' 141 ', 'PRO', None, (193.77, 132.2, 108.29199999999999)), ('L', '   8 ', 'PRO', None, (129.383, 167.39800000000002, 90.913)), ('L', ' 141 ', 'PRO', None, (134.155, 159.64, 76.953)), ('M', ' 149 ', 'PRO', None, (166.755, 158.787, 86.68)), ('M', ' 151 ', 'PRO', None, (163.245, 162.969, 83.554))]
data['rota'] = [('A', ' 417 ', 'LYS', 1.1742317422956274e-05, (178.367, 138.068, 228.757)), ('A', ' 602 ', 'THR', 0.2154939415834138, (184.153, 146.26200000000003, 153.41)), ('A', ' 606 ', 'ASN', 0.28251805720734796, (188.802, 143.698, 153.462)), ('A', ' 615 ', 'VAL', 0.05995412291586611, (202.455, 153.769, 172.164)), ('A', ' 791 ', 'THR', 0.08626753376313458, (148.968, 177.279, 144.41)), ('A', '1004 ', 'LEU', 0.0845937435186537, (166.518, 152.804, 182.65499999999997)), ('A', '1081 ', 'ILE', 0.17522591371055365, (187.226, 211.195, 141.236)), ('A', '1092 ', 'GLU', 0.030350712240988512, (176.057, 203.39299999999997, 144.772)), ('B', ' 392 ', 'PHE', 0.005787521246684502, (156.225, 149.19099999999997, 222.34)), ('B', ' 417 ', 'LYS', 1.3316587399794587e-05, (157.682, 120.417, 209.628)), ('B', ' 603 ', 'ASN', 0.11986034642808994, (197.65, 187.21599999999998, 197.621)), ('C', ' 417 ', 'LYS', 1.2085161992347901e-05, (190.493, 118.846, 204.492)), ('C', ' 603 ', 'ASN', 0.12106207393222376, (136.168, 173.025, 186.686)), ('C', ' 708 ', 'SER', 0.25982174257491897, (148.409, 186.53299999999996, 137.921)), ('C', ' 709 ', 'ASN', 0.23189243545534813, (151.331, 187.613, 135.69)), ('C', '1106 ', 'GLN', 0.266171695607316, (156.091, 202.348, 147.483)), ('H', '  73 ', 'ASP', 0.23112468520311785, (161.953, 174.867, 113.82899999999998)), ('H', '  92 ', 'CYS', 0.0, (154.239, 169.29800000000006, 103.292)), ('H', ' 140 ', 'LEU', 0.1202273430704687, (176.936, 119.993, 97.441)), ('K', ' 126 ', 'LYS', 0.05616332670404791, (164.93, 128.258, 82.57999999999998)), ('L', '  85 ', 'THR', 0.13980226185362887, (140.829, 169.01400000000007, 89.49)), ('M', '  35 ', 'ASN', 0.22800761944277761, (174.237, 160.579, 118.57099999999998)), ('M', '  70 ', 'SER', 0.0566619585316047, (167.148, 166.765, 114.115)), ('M', ' 127 ', 'SER', 0.035782342753090605, (150.51, 144.96999999999994, 62.76899999999999)), ('M', ' 187 ', 'LEU', 0.07345034360459624, (156.783, 154.983, 79.048))]
data['cbeta'] = [('B', ' 391 ', 'CYS', ' ', 0.4262425155194747, (159.068, 151.54, 225.246)), ('B', ' 525 ', 'CYS', ' ', 0.2504103844645752, (157.934, 152.33199999999997, 228.25999999999996)), ('C', ' 391 ', 'CYS', ' ', 0.35295721066121355, (161.166, 119.00999999999999, 185.872)), ('C', ' 525 ', 'CYS', ' ', 0.29988100620299, (159.063, 116.71, 184.75999999999996))]
data['probe'] = [(' B 391  CYS  HB2', ' B 525  CYS  HA ', -0.99, (158.958, 150.237, 226.815)), (' C 391  CYS  HB2', ' C 525  CYS  HA ', -0.81, (161.431, 117.542, 185.471)), (' C 391  CYS  CB ', ' C 525  CYS  HA ', -0.791, (160.567, 118.08, 185.495)), (' A 790  LYS  HE3', ' C 704  SER  HB3', -0.674, (142.465, 179.025, 146.229)), (' M 187  LEU  C  ', ' M 187  LEU HD12', -0.67, (157.439, 155.474, 76.492)), (' A 391  CYS  HB2', ' A 524  VAL  O  ', -0.631, (204.84, 138.414, 207.283)), (' K 188  LYS  HA ', ' K 188  LYS  HE2', -0.631, (176.139, 133.712, 74.088)), (' A1094  VAL HG13', ' B 900  MET  HE1', -0.63, (185.734, 200.691, 143.152)), (' A 391  CYS  CB ', ' A 525  CYS  HA ', -0.626, (204.695, 137.827, 205.447)), (' A 391  CYS  HB2', ' A 525  CYS  HA ', -0.612, (204.974, 137.626, 206.261)), (' B 391  CYS  CB ', ' B 525  CYS  HA ', -0.604, (158.788, 151.39, 226.303)), (' C 363  ALA  O  ', ' C 527  PRO  HD3', -0.592, (158.428, 114.913, 191.6)), (' A1090  PRO  O  ', ' B 913  GLN  NE2', -0.539, (179.511, 206.903, 147.161)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.536, (205.301, 184.701, 168.126)), (' B 740  MET  HE2', ' B 855  PHE  O  ', -0.536, (195.844, 152.228, 183.875)), (' A 712  ILE HD13', ' A1094  VAL HG11', -0.534, (184.882, 198.378, 142.612)), (' C 811  LYS  NZ ', ' C 820  ASP  OD2', -0.534, (152.038, 198.761, 190.331)), (' L 166  GLN  HG3', ' L 173  TYR  CZ ', -0.529, (140.148, 164.458, 78.761)), (' L   4  MET  HE3', ' L  88  CYS  SG ', -0.527, (134.686, 169.096, 100.903)), (' C1106  GLN  HG3', ' C1109  PHE  O  ', -0.525, (153.293, 203.099, 148.755)), (' C 391  CYS  HB2', ' C 524  VAL  O  ', -0.522, (162.301, 117.249, 185.342)), (' L 132  VAL  CG2', ' L 179  LEU  HB3', -0.504, (150.52, 142.729, 78.25)), (' A 904  TYR  CZ ', ' C1107  ARG  HD3', -0.502, (158.531, 195.55, 145.481)), (' A1094  VAL HG22', ' B 904  TYR  OH ', -0.495, (183.575, 199.139, 145.312)), (' H   4  LEU HD23', ' H  92  CYS  SG ', -0.495, (156.622, 172.021, 103.222)), (' B 390  LEU HD22', ' C 983  ARG  HG2', -0.492, (164.186, 149.167, 218.82)), (' A 391  CYS  HB3', ' A 525  CYS  HA ', -0.491, (204.675, 137.52, 205.263)), (' M 187  LEU  O  ', ' M 187  LEU HD12', -0.49, (157.627, 154.954, 76.979)), (' B 431  GLY  HA2', ' B 515  PHE  CD1', -0.49, (161.041, 141.752, 219.194)), (' A1094  VAL HG13', ' B 900  MET  CE ', -0.49, (185.537, 201.25, 144.132)), (' A1077  THR  CG2', ' B 897  PRO  HG2', -0.484, (190.922, 199.935, 143.908)), (' C 391  CYS  HB3', ' C 525  CYS  HA ', -0.482, (160.313, 118.19, 186.238)), (' A1002  GLN HE21', ' B1005  GLN HE22', -0.471, (174.987, 152.375, 186.155)), (' B 342  PHE  HB2', ' B1203  NAG  H82', -0.47, (160.633, 134.32, 232.787)), (' L   4  MET  CE ', ' L  88  CYS  SG ', -0.468, (135.081, 169.692, 101.557)), (' H 154  VAL HG22', ' H 210  VAL HG22', -0.467, (167.062, 126.265, 103.106)), (' A 342  PHE  HB2', ' A1304  NAG  H82', -0.467, (200.368, 125.505, 218.665)), (' K   4  MET  HB3', ' K  23  CYS  SG ', -0.464, (191.884, 154.793, 119.127)), (' A 697  MET  HG2', ' B 869  MET  HE1', -0.464, (195.784, 167.761, 158.165)), (' B 655  HIS  O  ', ' B1206  NAG  H81', -0.463, (177.888, 200.986, 206.479)), (' A 389  ASP  OD1', ' A 528  LYS  NZ ', -0.46, (202.832, 134.337, 196.511)), (' C 655  HIS  O  ', ' C1201  NAG  H81', -0.459, (131.694, 161.744, 163.587)), (' C 342  PHE  HB2', ' C1208  NAG  H82', -0.458, (165.886, 106.951, 199.56)), (' H 144  VAL HG11', ' H 152  VAL HG11', -0.456, (165.985, 131.129, 101.14)), (' C  81  ASN  N  ', ' C  81  ASN  OD1', -0.452, (117.616, 138.687, 211.838)), (' A  81  ASN  N  ', ' A  81  ASN  OD1', -0.45, (197.551, 104.852, 163.346)), (' B 854  LYS  HE2', ' B 855  PHE  CE1', -0.449, (201.652, 157.509, 185.616)), (' B  81  ASN  N  ', ' B  81  ASN  OD1', -0.449, (208.574, 168.634, 238.748)), (' L 197  THR HG22', ' L 204  PRO  HB3', -0.448, (133.855, 145.203, 77.117)), (' A1002  GLN HE21', ' B1005  GLN  NE2', -0.441, (175.378, 152.74, 185.809)), (' K 126  LYS  CE ', ' K 126  LYS  HA ', -0.439, (165.077, 127.997, 81.017)), (' A 111  ASP  N  ', ' A 111  ASP  OD1', -0.439, (195.718, 101.66, 179.564)), (' C 709  ASN  N  ', ' C 709  ASN  OD1', -0.439, (149.638, 187.214, 135.116)), (' L  22  THR HG22', ' L  72  THR HG22', -0.438, (126.491, 174.191, 94.918)), (' C 111  ASP  N  ', ' C 111  ASP  OD1', -0.437, (128.784, 127.547, 217.222)), (' L 120  PRO  HD3', ' L 132  VAL HG12', -0.435, (153.723, 140.892, 73.849)), (' A1040  VAL HG21', ' B1035  GLY  HA3', -0.434, (179.084, 188.936, 155.692)), (' A 671  CYS  SG ', ' A 697  MET  HB3', -0.428, (193.824, 165.07, 157.185)), (' M  92  CYS  O  ', ' M  92  CYS  SG ', -0.426, (169.955, 154.712, 118.544)), (' C1142  GLN  N  ', ' C1143  PRO  HD2', -0.424, (160.527, 219.967, 131.677)), (' A1077  THR HG23', ' B 897  PRO  HG2', -0.423, (190.793, 200.585, 144.015)), (' A1311  NAG  H3 ', ' A1311  NAG  H82', -0.422, (199.971, 203.523, 142.609)), (' B1142  GLN  N  ', ' B1143  PRO  HD2', -0.422, (168.713, 227.401, 139.792)), (' A1142  GLN  N  ', ' A1143  PRO  HD2', -0.417, (173.63, 219.716, 130.133)), (' B 363  ALA  O  ', ' B 527  PRO  HD3', -0.417, (162.588, 147.437, 230.859)), (' L 150  VAL HG22', ' L 192  TYR  CD2', -0.414, (148.902, 137.128, 77.419)), (' A1101  HIS  ND1', ' G   1  NAG  H5 ', -0.414, (186.801, 203.649, 127.101)), (' H 122  PHE  O  ', ' H 143  LEU  N  ', -0.413, (170.153, 126.215, 96.005)), (' L 119  PRO  HB3', ' L 209  PHE  CE1', -0.413, (152.067, 139.266, 70.587)), (' A1145  LEU HD21', ' B1145  LEU HD12', -0.411, (169.268, 226.128, 132.756)), (' A  41  LYS  HG2', ' C 562  PHE  HD1', -0.409, (170.095, 121.458, 171.769)), (' B 111  ASP  N  ', ' B 111  ASP  OD1', -0.405, (201.826, 153.399, 241.484))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
