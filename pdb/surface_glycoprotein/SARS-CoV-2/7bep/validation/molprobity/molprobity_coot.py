# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 227 ', 'SER', 0.028417035346977943, (-66.90799999999999, -4.861000000000001, -24.535999999999998)), ('I', '  69 ', 'GLY', 0.07952543983911538, (-51.033, 10.852, 54.098)), ('L', '  69 ', 'GLY', 0.013141440585577745, (-17.46, -22.759, 20.149999999999995))]
data['omega'] = [('A', ' 159 ', 'PRO', None, (-36.93699999999999, 2.3560000000000016, -9.562)), ('A', ' 161 ', 'PRO', None, (-35.355999999999995, -3.063, -12.139)), ('B', '   8 ', 'PRO', None, (-13.712, -9.213, -33.998)), ('B', ' 141 ', 'PRO', None, (-34.836, -6.676000000000002, -42.1)), ('D', ' 159 ', 'PRO', None, (-23.905, -9.701, 84.829)), ('D', ' 161 ', 'PRO', None, (-29.37, -8.276, 87.45399999999998)), ('F', '   8 ', 'PRO', None, (-36.455, 13.253000000000007, 108.82499999999999)), ('F', ' 141 ', 'PRO', None, (-33.124, -7.193000000000003, 117.429)), ('G', ' 161 ', 'PRO', None, (-29.630999999999993, -0.9320000000000002, 13.942)), ('G', ' 163 ', 'PRO', None, (-35.742999999999995, 0.4230000000000002, 13.487)), ('H', ' 161 ', 'PRO', None, (-28.041000000000004, -1.9050000000000007, 60.735)), ('H', ' 163 ', 'PRO', None, (-26.468999999999994, -7.941000000000001, 60.589)), ('I', '   8 ', 'PRO', None, (-54.028, -1.6560000000000008, 41.228)), ('I', ' 141 ', 'PRO', None, (-56.978, -13.890000000000004, 29.3)), ('L', '   8 ', 'PRO', None, (-30.335999999999974, -25.42000000000002, 32.83)), ('L', ' 141 ', 'PRO', None, (-42.46, -28.664, 45.343))]
data['rota'] = [('E', ' 334 ', 'ASN', 0.0, (10.055999999999992, -12.168, 42.223)), ('E', ' 375 ', 'SER', 0.2588240674788295, (5.85, -34.55, 25.259)), ('E', ' 503 ', 'VAL', 0.2998085679876216, (-0.816, -37.261, 15.582)), ('A', ' 110 ', 'ASN', 0.13531774008750214, (-11.150999999999993, -24.97800000000001, -13.725999999999997)), ('A', ' 228 ', 'CYS', 0.20748906196159278, (-68.253, -4.883, -28.121)), ('B', '  -8 ', 'VAL', 0.036053822197041833, (0.9119999999999994, -1.364, -12.884)), ('B', '  33 ', 'LEU', 0.295558307993715, (-8.533, -17.767000000000003, -20.888999999999996)), ('B', ' 105 ', 'GLU', 0.2311346543961297, (-25.741, -10.774, -35.382)), ('H', '  72 ', 'THR', 0.09759664043416003, (-1.354, -2.9340000000000024, 45.385)), ('H', '  83 ', 'LEU', 0.0, (-15.326999999999998, 2.2960000000000003, 44.937)), ('H', ' 122 ', 'LEU', 0.2302271599551226, (-20.330999999999996, -6.785000000000003, 52.831999999999994)), ('H', ' 192 ', 'LEU', 0.22001602993415126, (-37.22399999999999, -10.818000000000003, 59.557)), ('H', ' 228 ', 'LYS', 0.0061864553529514, (-53.749, -14.746000000000002, 72.353)), ('L', '  21 ', 'LEU', 0.0018420824643700152, (-25.41199999999998, -28.190000000000012, 33.216)), ('L', '  29 ', 'VAL', 0.17209934043124747, (-15.203, -18.358000000000008, 22.702)), ('L', '  48 ', 'LEU', 0.2489962515387851, (-14.056999999999999, -26.11, 39.76)), ('L', '  62 ', 'ARG', 0.013328627118601439, (-16.923, -36.55700000000001, 39.627)), ('L', ' 107 ', 'LYS', 0.0, (-35.314, -33.548, 44.284)), ('L', ' 211 ', 'ARG', 9.936077207180406e-05, (-60.18599999999996, -8.825000000000006, 63.607)), ('C', ' 333 ', 'THR', 0.15783349927932405, (-38.334, 40.73900000000001, 30.293)), ('C', ' 334 ', 'ASN', 0.0, (-38.719, 38.11000000000003, 33.046)), ('C', ' 389 ', 'ASP', 0.16928042555757042, (-49.719, 50.863000000000014, 35.527)), ('C', ' 484 ', 'GLU', 0.2375189437196007, (-40.62299999999998, 26.166000000000015, 81.641)), ('C', ' 503 ', 'VAL', 0.22951531755488205, (-64.312, 27.676000000000013, 59.879)), ('C', ' 517 ', 'LEU', 0.2377271725616887, (-41.06800000000002, 53.463000000000015, 46.181)), ('D', '  53 ', 'SER', 0.14982571340603565, (-45.595, 17.448, 74.693)), ('D', ' 102 ', 'LEU', 0.15623943843231067, (-49.959999999999994, 21.088000000000015, 79.681)), ('G', '  72 ', 'THR', 0.08802386602783371, (-30.10199999999998, 26.365, 29.796)), ('G', '  83 ', 'LEU', 0.001009850862778343, (-25.21499999999999, 12.186000000000007, 30.124)), ('G', ' 122 ', 'LEU', 0.2017949032829616, (-34.41299999999999, 7.848000000000006, 22.168)), ('G', ' 224 ', 'LYS', 0.21200293502053494, (-41.492, -16.72800000000001, 0.3)), ('I', '  13 ', 'LEU', 0.008823533132073536, (-62.54299999999999, -3.098, 32.696)), ('I', '  21 ', 'LEU', 0.0, (-56.425, 3.177, 41.02099999999999)), ('I', '  29 ', 'VAL', 0.17260761099500635, (-46.402000000000015, 12.688000000000008, 51.734)), ('A', ' 303 ', 'GLU', 0.009154445917190779, (-3.632, -5.637000000000002, -1.213))]
data['cbeta'] = []
data['probe'] = [(' L 189  HIS  O  ', ' L 211  ARG  NH1', -0.768, (-60.639, -4.79, 60.041)), (' L  55  ARG  NH1', ' L  60  PRO  O  ', -0.768, (-13.907, -34.036, 39.507)), (' B   5  THR  HA ', ' B 100  GLN HE22', -0.759, (-9.575, -5.601, -26.914)), (' F   5  THR  HA ', ' F 100  GLN HE22', -0.757, (-33.31, 17.742, 100.96)), (' F  83  VAL HG11', ' F 166  GLN  HB2', -0.743, (-38.38, -2.986, 106.968)), (' I 189  HIS  O  ', ' I 211  ARG  NH1', -0.729, (-33.077, -33.735, 17.498)), (' D  91  THR HG23', ' D 122  THR  HA ', -0.691, (-25.103, -0.732, 84.801)), (' B  83  VAL HG11', ' B 166  GLN  HB2', -0.671, (-30.311, -11.715, -32.829)), (' C 490  PHE  HB3', ' D  52  ARG HH21', -0.663, (-44.482, 26.17, 75.34)), (' I 156  SER  HB3', ' L   9  GLY  H  ', -0.661, (-33.067, -23.106, 33.868)), (' L  29  VAL HG23', ' L  93  ASP  HB2', -0.661, (-13.429, -17.215, 24.81)), (' F 108  ARG HH12', ' F 111  ALA  HB2', -0.658, (-39.178, -10.689, 117.21)), (' B   3  GLN  NE2', ' B 303   CL CL  ', -0.652, (-8.387, -3.159, -19.237)), (' F  90  LYS  NZ ', ' F 301   CL CL  ', -0.651, (-36.734, 23.022, 90.071)), (' I  60  PRO  HG3', ' I  62  ARG HH21', -0.649, (-61.717, 13.188, 28.179)), (' C 334  ASN  N  ', ' C 334  ASN  OD1', -0.642, (-37.221, 39.068, 32.163)), (' L  55  ARG  NH2', ' L  63  PHE  O  ', -0.633, (-14.19, -34.412, 36.569)), (' L 108  ARG HH12', ' L 111  ALA  HB2', -0.627, (-43.232, -33.044, 49.977)), (' I  29  VAL HG23', ' I  93  ASP  HB2', -0.623, (-44.736, 14.567, 49.267)), (' D 131  PRO  HB3', ' D 157  TYR  HB3', -0.621, (-24.937, -16.297, 88.027)), (' D 304  GLU  N  ', ' F -11  LEU  H2 ', -0.62, (-31.873, 26.059, 77.083)), (' A 131  PRO  HB3', ' A 157  TYR  HB3', -0.607, (-43.459, 1.196, -13.212)), (' G 133  PRO  HD2', ' G 219  THR HG21', -0.601, (-32.146, -6.768, 6.491)), (' A 303  GLU  N  ', ' B -11  LEU  H2 ', -0.6, (-1.757, -5.441, -2.808)), (' E 334  ASN  N  ', ' E 334  ASN  OD1', -0.595, (11.11, -10.906, 42.691)), (' D  52  ARG  O  ', ' D  72  ARG  NH1', -0.589, (-43.824, 15.467, 74.848)), (' C 389  ASP  N  ', ' C 389  ASP  OD1', -0.588, (-51.358, 50.214, 35.816)), (' D 131  PRO  HD2', ' D 217  THR HG21', -0.577, (-27.159, -18.807, 84.612)), (' B 108  ARG HH12', ' B 111  ALA  HB2', -0.575, (-38.447, -12.675, -42.364)), (' B  37  GLN  HB2', ' B  47  LEU HD11', -0.572, (-21.142, -18.449, -26.278)), (' C 455  LEU HD22', ' C 493  GLN  HG3', -0.56, (-51.064, 29.474, 72.799)), (' B  90  LYS  NZ ', ' B 302   CL CL  ', -0.554, (-3.496, -10.197, -15.477)), (' I 181  LEU  HG ', ' L  24  ARG HH12', -0.55, (-30.942, -23.965, 22.266)), (' I 185  ASP  OD2', ' L  24  ARG  NH2', -0.547, (-28.485, -26.143, 23.447)), (' H  67  ARG  NH2', ' H  90  ASP  OD2', -0.545, (-21.574, 2.669, 43.009)), (' B 186  TYR  O  ', ' B 192  TYR  OH ', -0.544, (-57.6, 11.884, -29.486)), (' A  52  ARG  O  ', ' A  72  ARG  NH1', -0.544, (-11.729, -17.289, -0.843)), (' G  40  ALA  HB3', ' G  43  GLN  HG3', -0.543, (-36.508, 0.067, 31.167)), (' H  85  ARG  NH2', ' H 703  GLY  OXT', -0.542, (-16.214, 11.925, 38.829)), (' F  37  GLN  HB2', ' F  47  LEU HD11', -0.54, (-45.228, 5.388, 100.246)), (' C 472  ILE HD12', ' C 484  GLU  HB3', -0.535, (-40.534, 27.065, 78.811)), (' I  55  ARG  NH1', ' I  60  PRO  O  ', -0.529, (-61.663, 15.966, 34.558)), (' G  63  LYS  HA ', ' H  87  ARG  HD2', -0.529, (-27.266, 6.688, 40.913)), (' C 366  SER  HA ', ' C 369  TYR  CZ ', -0.527, (-54.83, 41.575, 36.597)), (' H  40  ALA  HB3', ' H  43  GLN  HG3', -0.524, (-27.652, -8.743, 43.148)), (' A  22  CYS  HB3', ' A  79  LEU  HB3', -0.523, (-21.142, -14.609, -2.404)), (' G  36  TRP  CE2', ' G  81  MET  HB2', -0.521, (-32.483, 17.404, 29.436)), (' I 180  THR  O  ', ' L  24  ARG  NH1', -0.517, (-30.729, -22.455, 22.512)), (' I  24  ARG  HA ', ' I  70  THR  O  ', -0.517, (-50.16, 5.372, 49.322)), (' I  20  THR HG22', ' I  75  THR HG22', -0.516, (-61.604, 5.524, 41.788)), (' D 102  LEU HD21', ' D 107  TRP  CZ3', -0.513, (-45.657, 22.4, 81.615)), (' A  91  THR HG23', ' A 122  THR  HA ', -0.512, (-28.516, 1.704, -10.351)), (' G  67  ARG  NH2', ' G  90  ASP  OD2', -0.507, (-25.327, 6.462, 31.495)), (' L 122  ASP  O  ', ' L 126  LYS  HG3', -0.506, (-50.186, -2.515, 71.143)), (' C 357  ARG  HG3', ' C 396  TYR  HE1', -0.506, (-37.232, 43.116, 48.104)), (' B 193  ALA  HB2', ' B 208  SER  HB3', -0.503, (-55.15, 5.078, -38.908)), (' C 376  THR  HB ', ' C 435  ALA  HB3', -0.502, (-58.103, 36.396, 52.775)), (' B   6  GLN  NE2', ' B  86  TYR  O  ', -0.498, (-16.398, -10.996, -27.177)), (' I 210  ASN  HB2', ' I 213  GLU  HG3', -0.498, (-40.097, -36.269, 14.649)), (' H  36  TRP  CE2', ' H  81  MET  HB2', -0.497, (-10.487, -4.688, 45.166)), (' L  20  THR HG22', ' L  75  THR HG22', -0.494, (-23.012, -33.697, 31.839)), (' H  29  PHE  HB2', ' H  77  THR HG23', -0.493, (1.916, -11.448, 48.486)), (' F 193  ALA  HB2', ' F 208  SER  HB3', -0.492, (-20.6, -26.698, 114.677)), (' A 226  LYS  NZ ', ' B 122  ASP  OD2', -0.491, (-62.18, 0.922, -22.689)), (' I  34  LEU HD22', ' I  72  PHE  CD2', -0.487, (-52.104, 11.886, 46.287)), (' A  33  TYR  CE1', ' A  99  GLY  HA3', -0.484, (-11.562, -17.73, -8.995)), (' G  24  ALA  HB1', ' G  27  TYR  HE1', -0.478, (-41.504, 25.841, 26.244)), (' L 187  GLU  HA ', ' L 211  ARG  NH1', -0.475, (-59.467, -2.898, 61.616)), (' E 366  SER  HA ', ' E 369  TYR  CZ ', -0.473, (13.07, -28.169, 38.215)), (' H  18  VAL HG12', ' H  86  LEU HD11', -0.472, (-18.236, 2.236, 49.15)), (' L  16  GLY  HA2', ' L  78  ARG  CG ', -0.471, (-24.463, -40.835, 42.636)), (' E 388  ASN  O  ', ' E 526  GLY  HA3', -0.47, (18.882, -21.352, 40.061)), (' E 334  ASN  HB3', ' H  30  THR HG21', -0.47, (7.647, -10.501, 40.827)), (' F   2  ILE HG12', ' F  27  GLN  HB2', -0.468, (-36.43, 27.231, 94.608)), (' D  58  ILE  O  ', ' D 304  GLU  HB2', -0.466, (-33.699, 21.577, 77.713)), (' L  16  GLY  O  ', ' L  78  ARG  HG3', -0.466, (-24.796, -41.264, 41.217)), (' G 111  ILE HG12', ' I  32  THR  HB ', -0.466, (-48.89, 22.203, 46.858)), (' I  91  GLN  OE1', ' I  93  ASP  N  ', -0.46, (-42.456, 14.347, 47.395)), (' B   2  ILE HG12', ' B  27  GLN  HB2', -0.459, (0.307, -9.284, -20.112)), (' D 212  HIS  HB3', ' D 217  THR  HB ', -0.459, (-28.844, -16.615, 84.185)), (' A  60  TYR  O  ', ' B -10  PHE  HE2', -0.458, (-7.604, -3.619, -8.796)), (' H 133  PRO  HD2', ' H 219  THR HG21', -0.458, (-32.719, -4.641, 68.893)), (' L  55  ARG  HD3', ' L  59  ILE  O  ', -0.458, (-10.718, -33.155, 41.231)), (' C 388  ASN  O  ', ' C 526  GLY  HA3', -0.457, (-48.196, 47.61, 35.475)), (' G  87  ARG  HD2', ' H  63  LYS  HA ', -0.456, (-21.005, 0.395, 33.589)), (' E 455  LEU HD22', ' E 493  GLN  HG3', -0.452, (1.5, -24.32, 1.975)), (' A 143  THR HG22', ' A 145  GLY  H  ', -0.451, (-57.982, -14.033, -40.692)), (' G 198  VAL HG11', ' G 208  TYR  CE1', -0.449, (-51.92, -16.652, 4.114)), (' H  23  LYS  NZ ', ' H  77  THR  HB ', -0.448, (0.726, -10.292, 52.393)), (' H 133  PRO  HB3', ' H 159  TYR  HB3', -0.447, (-34.082, -4.823, 64.185)), (' D 171  LEU HD21', ' D 194  VAL HG21', -0.446, (-40.451, -21.958, 100.803)), (' D  83  MET  HB3', ' D  86  LEU HD21', -0.444, (-26.071, 5.826, 78.654)), (' L  16  GLY  HA2', ' L  78  ARG  HG2', -0.444, (-24.275, -40.593, 43.13)), (' D 303  PEG  H22', ' H 130  THR  HB ', -0.443, (-27.211, 3.349, 65.95)), (' F 120  PRO  HG3', ' F 130  ALA  HB1', -0.443, (-17.99, -27.251, 101.094)), (' H  32  TYR  O  ', ' H  53  THR  OG1', -0.438, (0.528, -10.126, 41.255)), (' F 120  PRO  HD3', ' F 132  VAL HG22', -0.436, (-19.548, -26.098, 103.799)), (' A  83  MET  HB3', ' A  86  LEU HD21', -0.435, (-21.27, -0.004, -3.418)), (' I  11  LEU HD22', ' I  13  LEU HD21', -0.434, (-59.803, -1.962, 37.005)), (' A  52  ARG  HG2', ' A  53  SER  H  ', -0.434, (-7.871, -18.142, -1.267)), (' L 185  ASP  HA ', ' L 188  LYS  HD3', -0.433, (-57.524, 1.556, 56.897)), (' E 357  ARG  HG3', ' E 396  TYR  HE1', -0.433, (15.422, -10.758, 27.103)), (' A  12  VAL HG11', ' A  86  LEU HD12', -0.432, (-25.176, 2.878, -1.977)), (' A  52  ARG  HD3', ' A 302   CL CL  ', -0.432, (-5.698, -17.164, 1.257)), (' B 185  ASP  HA ', ' B 188  LYS  HD3', -0.431, (-56.873, 17.834, -27.12)), (' D  22  CYS  HB3', ' D  79  LEU  HB3', -0.428, (-40.798, 6.447, 76.441)), (' F 142  ARG HH21', ' F 163 BVAL HG21', -0.428, (-27.802, -5.456, 106.737)), (' L   4  LEU HD13', ' L  89  CYS  SG ', -0.428, (-20.03, -18.623, 30.764)), (' C 401  VAL HG22', ' C 509  ARG  HG2', -0.427, (-51.102, 28.98, 55.005)), (' B  23  CYS  HB2', ' B  35  TRP  CH2', -0.427, (-11.422, -13.895, -27.587)), (' C 425  LEU HD21', ' C 512  VAL HG11', -0.426, (-48.897, 42.939, 55.185)), (' G 101  THR  OG1', ' G 302  GOL  O1 ', -0.425, (-40.103, 19.698, 40.513)), (' E 342  PHE  HB2', ' J   1  NAG  H82', -0.42, (4.201, -22.866, 32.164)), (' L  11  LEU  HA ', ' L  11  LEU HD23', -0.42, (-32.457, -28.924, 36.745)), (' G 101  THR  HB ', ' I  92  HIS  CD2', -0.418, (-42.709, 19.376, 42.575)), (' G 173  LEU HD21', ' G 196  VAL HG21', -0.417, (-51.478, -13.569, 5.933)), (' I  21  LEU  N  ', ' I  21  LEU HD23', -0.417, (-57.922, 3.931, 39.771)), (' C 379  CYS  HA ', ' C 432  CYS  HA ', -0.416, (-53.982, 45.264, 49.58)), (' F 100  GLN  CD ', ' F 100  GLN  H  ', -0.415, (-32.854, 14.449, 100.458)), (' D 138  PRO  HG2', ' D 225  PRO  HG3', -0.414, (-34.437, -32.445, 103.417)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.414, (8.268, -31.08, 22.524)), (' G 186  SER  HB2', ' L   3  VAL  HB ', -0.414, (-25.72, -12.622, 25.553)), (' H 145  THR HG21', ' L 116  PHE  CE2', -0.411, (-51.256, -25.067, 61.751)), (' I 182  SER  OG ', ' L  71  ASP  OD2', -0.41, (-25.042, -25.617, 20.131)), (' H   6  GLN  H  ', ' H 119  GLN HE22', -0.41, (-11.375, -10.876, 54.885)), (' D  60  TYR  O  ', ' F -10  PHE  HE2', -0.41, (-30.39, 20.014, 83.57)), (' E 403  ARG  NH1', ' E 405  ASP  OD2', -0.409, (4.112, -33.525, 8.842)), (' D  60  TYR  HB2', ' D  65  LYS  HG2', -0.407, (-28.958, 18.086, 80.225)), (' G 133  PRO  HB3', ' G 159  TYR  HB3', -0.407, (-32.521, -7.552, 10.781)), (' D  83  MET  HE1', ' D 121  VAL HG21', -0.406, (-29.418, 2.351, 79.998)), (' G 178  HIS  ND1', ' G 303  GLY  OXT', -0.405, (-51.544, -9.135, 16.615)), (' G  24  ALA  HB1', ' G  27  TYR  CE1', -0.405, (-41.533, 26.029, 26.852)), (' G   6  GLN  H  ', ' G 119  GLN HE22', -0.404, (-38.22, 16.927, 19.984)), (' H  47  TRP  CD1', ' L  96  LEU HD22', -0.404, (-14.096, -10.993, 35.743)), (' I 126  LYS  HB2', ' I 126  LYS  HE2', -0.404, (-27.431, -22.107, 4.672))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
