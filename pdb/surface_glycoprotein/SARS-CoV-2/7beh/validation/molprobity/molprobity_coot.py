# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 156 ', 'PRO', None, (-20.151999999999983, -27.092, 5.174)), ('H', ' 158 ', 'PRO', None, (-26.096999999999994, -26.28, 3.531)), ('L', ' 145 ', 'PRO', None, (-42.819, -7.814, 18.654))]
data['rota'] = [('E', ' 367 ', 'VAL', 0.2864465943822608, (9.694999999999999, 46.167, -16.051)), ('E', ' 408 ', 'ARG', 0.11440274551101251, (-7.582, 39.21, -1.408)), ('E', ' 445 ', 'VAL', 0.061072707538963523, (-3.8, 15.289, -12.044)), ('H', '  83 ', 'LEU', 0.08095295673771795, (-6.828999999999994, -7.219999999999997, 9.104)), ('H', ' 218 ', 'LYS', 0.07251818398640672, (-31.755, -40.49, 15.406)), ('L', ' 110 ', 'LEU', 0.0, (-46.946, -2.639, 15.64))]
data['cbeta'] = []
data['probe'] = [(' L   9  SER  HB2', ' L 147  ALA  HB3', -0.749, (-36.936, -6.112, 19.191)), (' E 383  SER  HB3', ' E 386  LYS  HG2', -0.674, (4.219, 56.498, -7.544)), (' H 190  VAL HG21', ' L 139  LEU HD13', -0.619, (-36.397, -26.492, 19.879)), (' E 366  SER  HB2', ' E 388  ASN HD22', -0.609, (10.053, 51.875, -14.263)), (' H 128  PRO  HB3', ' H 154  TYR  HB3', -0.604, (-23.346, -30.593, 10.801)), (' L 136  LEU HD12', ' L 182  LEU HD23', -0.598, (-25.847, -23.625, 29.252)), (' H 172  VAL HG22', ' H 191  VAL HG22', -0.588, (-40.897, -32.269, 14.359)), (' L  18  VAL HG11', ' L 107  LEU HD11', -0.537, (-40.284, 3.264, 17.894)), (' H 132  PRO  HD3', ' H 218  LYS  HD3', -0.521, (-28.954, -38.727, 19.195)), (' E 408  ARG  N  ', ' E 801  HOH  O  ', -0.513, (-7.674, 37.217, -3.223)), (' L   4  LEU  HB2', ' L 102  GLY  HA2', -0.488, (-24.069, 1.013, 22.441)), (' H  42  GLY  HA3', ' L 167  THR HG21', -0.485, (-28.146, -11.457, 12.647)), (' E 366  SER  HB2', ' E 388  ASN  ND2', -0.463, (9.606, 52.419, -13.915)), (' E 360  ASN  HA ', ' E 523  THR  HB ', -0.461, (22.855, 48.574, -1.997)), (' E 341  VAL HG11', ' E 397  ALA  HB1', -0.459, (10.933, 38.386, -4.236)), (' H 107  GLY  HA3', ' L  99  TRP  NE1', -0.458, (-16.941, 9.968, 17.546)), (' E 336  CYS  HB2', ' E 363  ALA  HB2', -0.452, (16.479, 45.27, -8.516)), (' H  36  TRP  CE2', ' H  81  MET  HB2', -0.449, (-9.932, 0.276, 6.194)), (' E 458  LYS  HA ', ' E 458  LYS  HD3', -0.449, (-5.443, 28.92, 19.68)), (' H  47  TRP  HZ2', ' H  50  TRP  HD1', -0.442, (-11.699, 6.428, 15.834)), (' E 395  VAL HG22', ' E 515  PHE  HD1', -0.439, (12.569, 48.011, -1.722)), (' E 520  ALA  HB1', ' E 521  PRO  HD2', -0.437, (22.901, 52.74, 6.529)), (' L 112  GLN  NE2', ' L 403  HOH  O  ', -0.435, (-48.945, -11.039, 17.098)), (' H  81  MET  HB3', ' H  81  MET  HE3', -0.42, (-10.11, -2.537, 5.718)), (' H  29  PHE  CE2', ' H  53  PRO  HB3', -0.42, (-6.635, 10.275, 2.438)), (' L   6  GLN  HG2', ' L 105  THR  OG1', -0.419, (-31.475, 0.207, 21.779)), (' L 148  VAL HG21', ' L 199  VAL HG13', -0.419, (-35.819, -13.679, 24.124)), (' L  63  ARG  HB3', ' L  78  SER  O  ', -0.415, (-41.939, 11.92, 14.919)), (' H  67  ARG  NH2', ' H 609  HOH  O  ', -0.412, (-9.738, -9.31, 16.412)), (' H  47  TRP  CH2', ' H  49  GLY  HA2', -0.409, (-10.86, 3.787, 15.911)), (' H  97  ALA  HB1', ' H 109  PHE  HB3', -0.404, (-19.154, 7.26, 8.604))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
