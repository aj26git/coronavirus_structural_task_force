# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 334 ', 'ASN', 0.005980858937932853, (-6.829000000000002, -20.971999999999987, 57.22800000000001))]
data['omega'] = [('B', ' 147 ', 'PRO', None, (27.73999999999999, -25.717, 4.99)), ('B', ' 149 ', 'PRO', None, (23.540000000000003, -28.982, 8.209)), ('B', ' 189 ', 'LEU', None, (20.105, -57.633, -5.616)), ('C', '   8 ', 'PRO', None, (31.898, -43.422, 36.852)), ('C', '  95 ', 'PRO', None, (30.322999999999997, -18.978, 40.357)), ('C', ' 141 ', 'PRO', None, (30.97800000000003, -55.246, 21.883)), ('H', ' 147 ', 'PRO', None, (10.083000000000007, 58.693999999999996, 71.126)), ('H', ' 149 ', 'PRO', None, (6.183, 57.012000000000015, 66.607)), ('L', '   8 ', 'PRO', None, (18.662, 39.71999999999999, 40.891)), ('L', '  95 ', 'PRO', None, (24.283000000000005, 26.77, 58.93200000000001)), ('L', ' 141 ', 'PRO', None, (14.216000000000001, 56.60499999999998, 37.495)), ('V', '   8 ', 'PRO', None, (15.238999999999999, 44.642, 9.305)), ('V', '  95 ', 'PRO', None, (11.243000000000002, 20.139, 9.13)), ('V', ' 141 ', 'PRO', None, (27.955, 56.299, 16.927)), ('W', ' 147 ', 'PRO', None, (41.197, 26.748, 27.98)), ('W', ' 149 ', 'PRO', None, (36.50500000000001, 30.158, 30.202000000000005)), ('X', ' 147 ', 'PRO', None, (-25.053999999999995, -57.388, 12.027)), ('X', ' 149 ', 'PRO', None, (-22.878, -55.55599999999997, 17.565)), ('Y', '   8 ', 'PRO', None, (5.503, -38.363999999999976, 18.848)), ('Y', '  95 ', 'PRO', None, (-7.547000000000001, -25.518, 5.229)), ('Y', ' 141 ', 'PRO', None, (6.633000000000002, -55.214, 24.377))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' L 183  LYS  HG2', ' L 187  GLU  OE2', -0.887, (24.805, 80.956, 62.833)), (' C 149  LYS  NZ ', ' C 152  ASN  O  ', -0.814, (51.085, -54.81, 4.903)), (' A 403  ARG HH21', ' A 505  TYR  HB3', -0.806, (12.662, 9.882, 42.841)), (' C 122  ASP  O  ', ' C 126  LYS  HB2', -0.748, (36.355, -41.444, -12.429)), (' C 149  LYS  HE3', ' C 152  ASN  OD1', -0.741, (49.54, -56.728, 4.121)), (' V 125  LEU  O  ', ' V 183  LYS  CE ', -0.71, (60.811, 39.428, 22.251)), (' B   1  GLN  NE2', ' B 301  HOH  O  ', -0.7, (5.385, -29.295, 32.379)), (' B 301  HOH  O  ', ' Y  18  ARG  NH1', -0.695, (5.824, -30.474, 32.316)), (' Y 127  SER  OG ', ' Y 301  HOH  O  ', -0.685, (-16.996, -74.235, 7.07)), (' C 149  LYS  HG2', ' C 152  ASN  HA ', -0.676, (49.167, -54.611, 3.257)), (' A 403  ARG  HE ', ' A 505  TYR  HA ', -0.674, (13.987, 8.392, 43.663)), (' L 183  LYS  CG ', ' L 187  GLU  OE2', -0.673, (24.268, 80.59, 63.387)), (' H  46  GLU  OE1', ' H  62  LYS  NZ ', -0.673, (22.12, 39.818, 62.047)), (' L 113  PRO  O  ', ' L 301  HOH  O  ', -0.672, (13.908, 67.61, 37.661)), (' X  69  MET  SD ', ' X 401  HOH  O  ', -0.671, (-21.048, -30.73, 7.337)), (' H 193  THR  O  ', ' H 301  HOH  O  ', -0.67, (-3.281, 75.707, 53.299)), (' C 182  SER  OG ', ' C 185  ASP  HB2', -0.668, (48.173, -39.612, -4.848)), (' V 125  LEU  O  ', ' V 183  LYS  HE2', -0.658, (60.952, 40.665, 22.384)), (' X  38  ARG  HG2', ' X  46  GLU  HG3', -0.645, (-14.463, -38.478, 8.77)), (' H 119  PRO  HB3', ' H 145  TYR  HB3', -0.641, (10.403, 65.109, 67.149)), (' C 149  LYS  HZ1', ' C 152  ASN  C  ', -0.627, (51.202, -54.949, 4.104)), (' X 119  PRO  HB3', ' X 145  TYR  HB3', -0.622, (-21.36, -64.187, 14.051)), (' C 120  PRO  HD3', ' C 132  VAL HG22', -0.616, (39.407, -46.511, -2.681)), (' C  45  LYS  NZ ', ' C 305  HOH  O  ', -0.604, (10.818, -36.118, 32.867)), (' V 163  VAL HG22', ' V 175  LEU HD12', -0.602, (34.977, 46.715, 17.849)), (' C 149  LYS  NZ ', ' C 152  ASN  C  ', -0.597, (50.901, -54.346, 4.389)), (' A 395  VAL HG23', ' A 524  VAL HG21', -0.597, (6.365, -19.914, 56.658)), (' W  56  GLU  OE1', ' Z 378  LYS  NZ ', -0.593, (5.745, 9.891, 17.64)), (' W 152  VAL HG22', ' W 198  VAL HG22', -0.585, (42.399, 38.856, 33.737)), (' A 403  ARG  NH2', ' A 505  TYR  HB3', -0.572, (13.521, 9.926, 43.557)), (' C 142  ARG  CZ ', ' C 163  VAL HG21', -0.553, (33.574, -45.756, 17.565)), (' A 378  LYS  NZ ', ' B  56  GLU  OE1', -0.549, (19.74, -8.932, 40.849)), (' B 122  PHE  CE2', ' C 124  GLN  HG3', -0.548, (34.277, -38.53, -4.935)), (' X  36  TRP  CD1', ' X  69  MET  HE3', -0.548, (-22.827, -30.663, 10.529)), (' X  51  ILE  HB ', ' X  69  MET  HE2', -0.545, (-24.304, -27.366, 9.015)), (' A 360  ASN  HA ', ' A 523  THR  HB ', -0.538, (1.108, -23.571, 61.432)), (' Y 142  ARG  NH2', ' Y 163  VAL HG21', -0.538, (-1.828, -55.179, 16.708)), (' A 403  ARG HH21', ' A 505  TYR  CB ', -0.536, (13.336, 9.643, 42.921)), (' V 125  LEU HD22', ' V 183  LYS  HG3', -0.534, (59.984, 42.578, 20.148)), (' W 199  ASN HD22', ' W 200  HIS  N  ', -0.531, (42.053, 31.538, 36.998)), (' H 205  THR  C  ', ' H 206  LYS  HD3', -0.527, (1.266, 66.816, 69.893)), (' L 120  PRO  HD3', ' L 132  VAL HG22', -0.527, (20.71, 75.869, 55.271)), (' C  61  ARG  HB2', ' C  76  SER  O  ', -0.526, (14.902, -47.607, 37.485)), (' W   1  GLN  NE2', ' W 307  HOH  O  ', -0.523, (0.447, 26.518, 35.954)), (' C  80  ALA  HA ', ' C 106  ILE HD11', -0.523, (17.552, -49.109, 26.452)), (' W 119  PRO  HB3', ' W 145  TYR  HB3', -0.52, (45.293, 32.992, 29.019)), (' C  30  LYS  NZ ', ' C 310  HOH  O  ', -0.519, (16.453, -32.769, 49.53)), (' Z 450  ASN  ND2', ' Z 701  HOH  O  ', -0.517, (-13.005, -11.653, 26.926)), (' W  52  TYR  CD2', ' Z 378  LYS  HD3', -0.517, (5.862, 11.188, 21.48)), (' Y  37  GLN  HB2', ' Y  47  LEU HD11', -0.516, (-6.129, -34.739, 26.001)), (' A 380  TYR  HA ', ' B  98  ILE HG22', -0.507, (18.931, -16.129, 44.858)), (' H 199  ASN  HB3', ' H 206  LYS  NZ ', -0.5, (0.256, 63.514, 68.021)), (' L 184  ALA  O  ', ' L 188  LYS  HG3', -0.492, (30.296, 79.705, 60.562)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.491, (6.443, 36.172, 47.351)), (' V  30  LYS  HG2', ' V  50  TRP  CD2', -0.49, (-2.974, 29.813, 16.468)), (' W 138  LEU HD23', ' W 184  VAL HG21', -0.484, (44.778, 54.516, 35.072)), (' W  20  ILE HD11', ' W  80  LEU HD23', -0.484, (24.038, 19.418, 22.531)), (' H  36  TRP  CE2', ' H  80  MET  HB2', -0.483, (11.097, 34.795, 70.76)), (' W 165  THR HG23', ' W 178  LEU HD21', -0.482, (38.985, 41.065, 29.75)), (' V  54  ARG  NH1', ' V  62  PHE  O  ', -0.481, (2.044, 42.743, 21.786)), (' C 122  ASP  O  ', ' C 126  LYS  CB ', -0.48, (35.78, -40.368, -12.168)), (' Z 350  VAL HG22', ' Z 422  ASN  HB3', -0.476, (-8.545, 0.194, 14.568)), (' W 143  LYS  NZ ', ' W 171  GLN  OE1', -0.475, (47.893, 36.108, 20.815)), (' C 123  GLU  O  ', ' C 126  LYS  HB3', -0.474, (35.141, -38.977, -10.838)), (' X  36  TRP  CE2', ' X  80  MET  HB2', -0.473, (-24.688, -33.191, 11.377)), (' B 204  ASN  ND2', ' B 317  HOH  O  ', -0.472, (16.828, -26.862, -2.874)), (' B 119  PRO  HB3', ' B 145  TYR  HB3', -0.472, (28.13, -32.278, 0.692)), (' A 525  CYS  SG ', ' A 779  HOH  O  ', -0.471, (2.106, -26.939, 57.186)), (' H   2  VAL HG13', ' H  27  TYR  CD1', -0.47, (-1.244, 27.369, 63.945)), (' Z 384  PRO  HA ', ' Z 387  LEU  HG ', -0.47, (-4.017, 21.706, 24.609)), (' V  61  ARG  HB2', ' V  76  SER  O  ', -0.469, (6.329, 48.775, 23.461)), (' V  24  LYS  NZ ', ' V 304  HOH  O  ', -0.467, (5.892, 41.75, 2.734)), (' Y   4  LEU  HB2', ' Y  99  GLY  HA2', -0.461, (-2.612, -33.353, 12.542)), (' X  36  TRP  HD1', ' X  69  MET  HE3', -0.459, (-22.783, -30.145, 10.339)), (' Y  91  ARG  HD2', ' Y  95A PRO  O  ', -0.457, (-11.283, -24.219, 11.539)), (' C  30  LYS  HG2', ' C  50  TRP  CD2', -0.457, (16.739, -28.646, 48.985)), (' H  24  ALA  HB1', ' H  27  TYR  CE1', -0.453, (0.217, 28.04, 66.967)), (' L 119  PRO  HB3', ' L 209  PHE  CE2', -0.452, (19.702, 79.381, 52.422)), (' H 205  THR  O  ', ' H 206  LYS  HD3', -0.452, (1.664, 66.172, 69.609)), (' Y 163  VAL HG22', ' Y 175  LEU HD12', -0.449, (-1.809, -57.866, 17.457)), (' X  71  ARG  HD3', ' X  73  THR HG23', -0.447, (-31.929, -23.222, 13.447)), (' A 378  LYS  HD3', ' B  52  TYR  CD2', -0.447, (16.564, -9.53, 39.694)), (' W  68  THR  HB ', ' W  81  GLN  HG2', -0.445, (24.218, 10.631, 19.275)), (' X 210  LYS  NZ ', ' X 212  GLU  OE2', -0.443, (-18.839, -81.932, 26.926)), (' L 201  LEU HD21', ' L 301  HOH  O  ', -0.443, (15.386, 67.36, 36.637)), (' H  35  HIS  CG ', ' H 100G MET  HE2', -0.441, (12.149, 28.826, 62.132)), (' Z 336  CYS  SG ', ' Z 363  ALA  HB2', -0.438, (-14.173, 20.837, 28.042)), (' A 347  PHE  CE2', ' A 509  ARG  HB3', -0.438, (5.004, -2.138, 49.291)), (' C 145  LYS  HB2', ' C 197  THR  HB ', -0.436, (41.175, -54.362, 16.161)), (' C  13  VAL HG13', ' C  17  GLU  HB2', -0.436, (22.12, -53.537, 34.065)), (' X 210  LYS  HB3', ' X 210  LYS  HE3', -0.433, (-20.225, -78.753, 26.201)), (' C 149  LYS  HE3', ' C 152  ASN  CG ', -0.431, (50.303, -56.735, 4.419)), (' L  24  ARG HH22', ' L  70  ASP  HB2', -0.431, (23.424, 28.829, 40.098)), (' X  24  ALA  HB1', ' X  27  TYR  CE1', -0.43, (-26.466, -26.744, 22.328)), (' L  38  GLN  O  ', ' L  84  ALA  HB1', -0.43, (7.138, 42.306, 49.939)), (' V 114  SER  HB2', ' V 137  ASN  HB3', -0.429, (37.883, 57.113, 25.41)), (' X  87  THR  HA ', ' X 109  VAL  O  ', -0.428, (-20.274, -46.572, 8.99)), (' Y  94  TRP  HA ', ' Y  95  PRO  HA ', -0.427, (-9.532, -24.365, 4.397)), (' Y 140  TYR  CG ', ' Y 141  PRO  HA ', -0.427, (4.999, -54.131, 25.686)), (' C 144  ALA  HB2', ' C 198  HIS  HD2', -0.425, (35.082, -54.209, 17.853)), (' Y 107  LYS  HA ', ' Y 140  TYR  OH ', -0.424, (5.59, -49.563, 27.535)), (' H  33  TYR  CE2', ' H  97  MET  HG2', -0.423, (11.376, 20.907, 64.55)), (' H  18  VAL  O  ', ' H  81  GLU  HA ', -0.423, (13.371, 38.919, 75.91)), (' H 199  ASN  CG ', ' H 206  LYS  HD2', -0.423, (-0.647, 65.382, 67.244)), (' Y 119  PRO  HB3', ' Y 209  PHE  CE2', -0.422, (-4.219, -77.985, 12.789)), (' L  91  ARG  HD2', ' L  95A PRO  O  ', -0.422, (17.277, 25.733, 59.157)), (' X 151  THR  OG1', ' X 199  ASN  HB2', -0.419, (-23.935, -60.994, 23.918)), (' B  87  THR HG23', ' B 110  THR  HA ', -0.419, (30.248, -23.955, 14.368)), (' L 107  LYS  HA ', ' L 140  TYR  OH ', -0.418, (10.627, 50.781, 36.728)), (' V 140  TYR  CG ', ' V 141  PRO  HA ', -0.418, (26.579, 55.121, 18.54)), (' V 147  GLN  HG2', ' V 154  LEU HD11', -0.418, (44.665, 50.662, 7.014)), (' Y  33  LEU  HG ', ' Y  71  PHE  CG ', -0.417, (0.216, -25.676, 17.733)), (' C 166  GLN  HG2', ' C 171  SER  HA ', -0.414, (22.289, -50.309, 21.256)), (' L 163  VAL HG22', ' L 175  LEU HD12', -0.413, (16.293, 59.136, 47.989)), (' B 151  THR  OG1', ' B 199  ASN  HB3', -0.413, (18.137, -33.219, 2.735)), (' L 140  TYR  CG ', ' L 141  PRO  HA ', -0.412, (12.361, 55.389, 38.153)), (' L 199  GLN  NE2', ' L 309  HOH  O  ', -0.412, (18.744, 55.073, 35.327)), (' H 199  ASN  CB ', ' H 206  LYS  HD2', -0.411, (-0.142, 64.912, 67.351)), (' C  31  ASN  O  ', ' C  50  TRP  HA ', -0.411, (20.043, -29.975, 46.821)), (' H  47  TRP  CZ2', ' H  49  GLY  HA2', -0.41, (17.532, 29.246, 65.644)), (' X   1  GLN  HB3', ' X   2  VAL  H  ', -0.41, (-23.113, -27.052, 30.366)), (' Y  36  TYR  HE1', ' Y  89  GLN  HB3', -0.408, (-8.525, -29.438, 17.717)), (' B  97  GLY  O  ', ' B 100  THR  OG1', -0.407, (17.506, -20.334, 40.239)), (' Y 186  TYR  HA ', ' Y 192  TYR  OH ', -0.406, (-4.46, -76.482, 4.462)), (' X   2  VAL HG13', ' X  27  TYR  CD1', -0.405, (-24.642, -26.113, 24.611)), (' W 192  GLN  OE1', ' W 301  HOH  O  ', -0.404, (44.42, 51.805, 44.251)), (' C 140  TYR  CG ', ' C 141  PRO  HA ', -0.403, (28.953, -53.9, 22.339)), (' A 403  ARG  NH2', ' A 505  TYR  O  ', -0.403, (12.387, 9.467, 44.17)), (' L  33  LEU  HG ', ' L  71  PHE  CG ', -0.403, (16.992, 26.894, 46.393)), (' Y 208  SER  O  ', ' Y 302  HOH  O  ', -0.4, (1.744, -77.471, 16.908))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
