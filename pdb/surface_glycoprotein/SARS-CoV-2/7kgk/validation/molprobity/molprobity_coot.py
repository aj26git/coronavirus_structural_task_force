# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 385 ', 'THR', 0.021761570608716505, (-11.473000000000011, 18.053000000000008, 41.218)), ('A', ' 417 ', 'LYS', 0.0, (9.731999999999996, 16.319000000000006, 17.643)), ('A', ' 441 ', 'LEU', 0.1138834053692938, (-12.071000000000003, 25.068, 13.176)), ('A', ' 461 ', 'LEU', 0.12775452507015084, (14.787999999999998, 22.757000000000005, 24.151)), ('A', ' 468 ', 'ILE', 0.07583038006170237, (11.726, 31.343000000000004, 16.77)), ('A', ' 477 ', 'SER', 0.21292530022256986, (29.881000000000007, 19.222, 7.887)), ('A', ' 478 ', 'THR', 0.16615613112435174, (29.57, 21.812, 5.093999999999999)), ('A', ' 517 ', 'LEU', 0.004891529760165025, (3.3300000000000045, 30.2, 44.028999999999996)), ('B', '   2 ', 'VAL', 0.20598273625872665, (11.045000000000016, 28.893, -6.406)), ('B', '  13 ', 'GLN', 0.06962086412280584, (-7.557000000000004, 2.486, -19.452)), ('B', '  33 ', 'THR', 0.16824417930975188, (5.947999999999999, 17.540000000000003, 3.052999999999999)), ('B', '  34 ', 'MET', 0.2529373059677857, (4.290000000000001, 17.151, -0.351)), ('B', '  43 ', 'LYS', 0.19603486629479094, (-17.005, 18.492, -7.392999999999999)), ('B', '  53 ', 'SER', 0.11202895778303379, (8.959999999999996, 15.678000000000008, 6.256)), ('B', '  56 ', 'ILE', 0.10389919096003494, (8.558999999999992, 6.235, 10.959)), ('B', '  90 ', 'GLU', 0.0, (-14.170000000000002, 7.246000000000001, -11.004)), ('B', '  92 ', 'THR', 0.017045386949199444, (-9.989, 10.788, -13.13)), ('B', ' 114 ', 'VAL', 0.10936151856376793, (-8.879000000000003, 6.904000000000002, -17.358))]
data['cbeta'] = []
data['probe'] = [(' B  92  THR HG22', ' B 114  VAL HG13', -0.663, (-9.464, 8.18, -14.901)), (' A 502  GLY  H  ', ' B  60 AARG HH12', -0.607, (-5.851, 11.312, 7.449)), (' B  92  THR  HB ', ' B 113  THR  HA ', -0.576, (-9.599, 10.715, -16.319)), (' B  84  MET  HE1', ' B 112  VAL HG11', -0.544, (-4.436, 9.326, -13.233)), (' A 469  SER  HB2', ' A 471  GLU  HG2', -0.526, (17.092, 31.382, 13.461)), (' A 393  THR HG21', ' A 518  LEU  HB2', -0.513, (3.645, 35.083, 43.306)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.49, (-2.802, 18.897, 34.199)), (' A 350  VAL HG22', ' A 422  ASN  HB3', -0.487, (5.775, 22.709, 19.164)), (' A 476  GLY  N  ', ' A 487  ASN  HB3', -0.475, (24.52, 18.776, 6.455)), (' B 104  GLN  OE1', ' B 106  HIS  NE2', -0.47, (-2.39, 26.249, -1.869)), (' A 472  ILE HD13', ' A 482  GLY  HA2', -0.456, (20.835, 30.509, 5.292)), (' A 502  GLY  H  ', ' B  60 AARG  NH1', -0.456, (-5.145, 11.332, 7.443)), (' B  43  LYS  HA ', ' B  43  LYS  HD3', -0.454, (-18.643, 18.727, -6.969)), (' A 363  ALA  O  ', ' A 526  GLY  HA2', -0.45, (-12.014, 29.732, 41.499)), (' B  36  TRP  HD1', ' B  71  ILE HD12', -0.448, (2.202, 12.528, -2.976)), (' B  18  LEU  HA ', ' B  18  LEU HD23', -0.443, (0.909, 6.242, -16.08)), (' A 452  LEU HD23', ' A 492  LEU HD23', -0.439, (7.48, 28.33, 10.598)), (' A 337  PRO  HD2', ' A 358  ILE HG23', -0.436, (-7.32, 35.43, 33.897)), (' A 391  CYS  HB3', ' A 522  ALA  HB1', -0.428, (-4.193, 32.339, 46.002)), (' A 473  TYR  O  ', ' A 488  CYS  HA ', -0.419, (20.801, 22.667, 6.822)), (' A 472  ILE  H  ', ' A 472  ILE HD12', -0.418, (19.107, 29.415, 7.618)), (' A 367  VAL HG23', ' A 368  LEU HD22', -0.418, (-14.862, 26.351, 33.56)), (' A 386  LYS  H  ', ' A 386  LYS  HG2', -0.416, (-9.322, 17.927, 43.909)), (' A 359  SER  OG ', ' A 394  ASN  OD1', -0.415, (-0.82, 36.913, 37.852)), (' A 501  ASN  OD1', ' B  60 BARG  NH1', -0.414, (-4.04, 13.788, 5.856)), (' A 411  ALA  HB3', ' A 414  GLN  HG3', -0.413, (4.289, 12.923, 27.564)), (' A 468  ILE  HA ', ' A 468  ILE HD13', -0.405, (10.161, 30.63, 16.405))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
