# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 369 ', 'TYR', 0.043868463344128514, (-28.501, -5.359000000000001, -6.793)), ('C', ' 141 ', 'SER', 0.0020685949285692666, (-41.119, -42.373, 28.425)), ('D', '  93 ', 'SER', 0.0238293319546336, (-7.514, -50.829, 81.275)), ('H', ' 141 ', 'SER', 0.002060084211908353, (7.561, 1.725, 73.837)), ('L', '  93 ', 'SER', 0.02448231302816858, (-26.105999999999995, -6.868999999999999, 20.943))]
data['omega'] = [('C', ' 141 ', 'SER', None, (-41.725, -41.901, 27.162)), ('C', ' 154 ', 'PRO', None, (-13.233, -24.928999999999995, 46.75)), ('C', ' 156 ', 'PRO', None, (-18.43000000000001, -27.27199999999998, 49.135)), ('C', ' 196 ', 'PRO', None, (-39.635, -30.229999999999993, 26.534)), ('D', '   8 ', 'PRO', None, (-19.943000000000005, -57.624, 59.655)), ('D', '  96 ', 'PRO', None, (-5.099, -46.024, 74.601)), ('D', ' 142 ', 'PRO', None, (-29.052, -54.266, 43.254)), ('H', ' 141 ', 'SER', None, (8.163, 2.176, 75.11)), ('H', ' 154 ', 'PRO', None, (-20.391, 19.082999999999995, 55.473)), ('H', ' 156 ', 'PRO', None, (-15.195999999999998, 16.693, 53.076)), ('H', ' 196 ', 'PRO', None, (6.017000000000001, 13.778000000000002, 75.689)), ('L', '   8 ', 'PRO', None, (-13.639, -13.654000000000002, 42.597)), ('L', '  96 ', 'PRO', None, (-28.517, -2.083, 27.624999999999996)), ('L', ' 142 ', 'PRO', None, (-4.585999999999996, -10.243, 59.00600000000001))]
data['rota'] = [('A', ' 389 ', 'ASP', 0.14326946082792372, (-30.342, -16.386, 0.328)), ('H', '  13 ', 'ARG', 0.2912430691918243, (-31.102, 18.711, 49.033)), ('B', ' 389 ', 'ASP', 0.05552729695210913, (-3.3659999999999926, -60.305, 101.946))]
data['cbeta'] = []
data['probe'] = [(' A 417  LYS  NZ ', ' A 701  HOH  O  ', -1.099, (0.66, 12.97, 3.873)), (' A 387  LEU  N  ', ' A 702  HOH  O  ', -1.038, (-27.585, -12.857, -3.589)), (' B 417  LYS  NZ ', ' B 702  HOH  O  ', -0.949, (-33.443, -31.35, 97.367)), (' L  79  GLN  NE2', ' L 301  HOH  O  ', -0.904, (6.693, -4.825, 36.909)), (' D  79  GLN  OE1', ' D 301  HOH  O  ', -0.889, (-39.932, -51.37, 61.308)), (' B 385  THR  N  ', ' B 706  HOH  O  ', -0.841, (-6.622, -55.411, 106.538)), (' B 420  ASP  OD1', ' B 701  HOH  O  ', -0.825, (-30.552, -42.052, 97.41)), (' A 372  ALA  O  ', ' A 703  HOH  O  ', -0.818, (-26.421, 3.192, -13.054)), (' A 420  ASP  OD1', ' A 704  HOH  O  ', -0.811, (-2.837, 1.402, 3.733)), (' A 384  PRO  O  ', ' A 385  THR  OG1', -0.807, (-26.01, -13.174, -7.734)), (' D 106  GLU  OE2', ' D 302  HOH  O  ', -0.8, (-24.373, -48.199, 49.835)), (' B 384  PRO  O  ', ' B 385  THR  OG1', -0.797, (-7.536, -57.307, 109.398)), (' A 474  GLN  OE1', ' A 705  HOH  O  ', -0.766, (4.948, 18.074, 18.717)), (' B 372  ALA  O  ', ' B 703  HOH  O  ', -0.754, (-7.491, -41.24, 114.349)), (' B 403  ARG  NH1', ' B 707  HOH  O  ', -0.741, (-25.719, -30.737, 106.919)), (' L 169  SER  O  ', ' L 302  HOH  O  ', -0.732, (2.416, 0.03, 49.601)), (' B 334  ASN  OD1', ' B 704  HOH  O  ', -0.72, (6.701, -47.005, 92.5)), (' B 473  TYR  OH ', ' B 705  HOH  O  ', -0.708, (-37.489, -32.58, 91.956)), (' C 101  ASP  OD2', ' C 302  HOH  O  ', -0.708, (-7.851, -41.635, 81.658)), (' H   1  GLU  O  ', ' H 301  HOH  O  ', -0.704, (-6.812, 17.094, 24.38)), (' B 387  LEU  N  ', ' B 706  HOH  O  ', -0.672, (-6.366, -55.718, 105.172)), (' A 334  ASN  OD1', ' A 707  HOH  O  ', -0.67, (-40.787, -2.926, 8.863)), (' H 140  ASN  HA ', ' H 141  SER  CB ', -0.614, (6.422, 0.555, 74.956)), (' B 403  ARG  HD2', ' B 707  HOH  O  ', -0.609, (-25.379, -31.359, 106.957)), (' C 140  ASN  HA ', ' C 141  SER  CB ', -0.607, (-39.911, -42.888, 27.087)), (' C  12  VAL HG21', ' C  86  LEU HD13', -0.597, (-4.868, -27.346, 57.907)), (' D   4  MET  HE3', ' D  23  CYS  SG ', -0.58, (-14.759, -54.01, 68.917)), (' B 391  CYS  HB3', ' B 522  ALA  HB1', -0.579, (-4.288, -59.938, 92.07)), (' L   4  MET  HE3', ' L  23  CYS  SG ', -0.573, (-19.059, -10.082, 32.465)), (' L 148  LYS  HE2', ' L 337  HOH  O  ', -0.556, (-13.944, -9.839, 73.81)), (' H  12  VAL HG21', ' H  86  LEU HD13', -0.552, (-28.761, 16.983, 43.705)), (' A 391  CYS  HB3', ' A 522  ALA  HB1', -0.551, (-29.212, -15.574, 9.571)), (' A 525  CYS  HB2', ' E   2  NAG  H83', -0.55, (-33.834, -13.515, 7.792)), (' H 171  HIS  HD2', ' L 473  HOH  O  ', -0.53, (-2.513, 3.982, 57.919)), (' B 525  CYS  HB2', ' F   2  NAG  H83', -0.508, (0.314, -57.901, 94.191)), (' H  32  THR HG21', ' H  98  ARG  HG3', -0.503, (-15.99, 9.8, 21.957)), (' L 143  LYS  HE3', ' L 304  HOH  O  ', -0.503, (-10.611, -2.349, 55.038)), (' C 140  ASN  HA ', ' C 141  SER  HB3', -0.502, (-40.104, -43.83, 27.253)), (' B 326  ILE HD13', ' B 766  HOH  O  ', -0.502, (16.823, -55.659, 84.926)), (' D   1  ASP  OD2', ' D 303  HOH  O  ', -0.496, (-1.247, -48.159, 71.845)), (' H 140  ASN  HA ', ' H 141  SER  HB3', -0.495, (6.303, 0.33, 74.973)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.494, (-12.72, -41.037, 93.475)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.492, (-20.785, 3.57, 8.543)), (' C 105  TYR  HB3', ' D  49  TYR  CG ', -0.492, (-22.668, -46.901, 79.475)), (' L 143  LYS  CE ', ' L 304  HOH  O  ', -0.491, (-10.79, -2.388, 54.951)), (' C  41  PRO  HG3', ' C 486  HOH  O  ', -0.484, (-13.222, -35.49, 54.796)), (' C 171  HIS  HD2', ' D 483  HOH  O  ', -0.48, (-30.597, -40.024, 44.061)), (' H 105  TYR  HB3', ' L  49  TYR  CG ', -0.476, (-10.473, -3.367, 22.546)), (' B 448  ASN  O  ', ' B 709  HOH  O  ', -0.467, (-17.596, -23.811, 100.221)), (' D 184  LYS  NZ ', ' D 308  HOH  O  ', -0.462, (-13.229, -25.921, 16.778)), (' D 148  LYS  HE2', ' D 381  HOH  O  ', -0.461, (-19.565, -54.271, 28.123)), (' D  48  VAL HG22', ' D  54  LEU HD23', -0.461, (-27.751, -51.468, 73.958)), (' C 140  ASN  CA ', ' C 141  SER  CB ', -0.461, (-40.365, -43.528, 26.778)), (' H 140  ASN  CA ', ' H 141  SER  CB ', -0.461, (6.948, 0.646, 75.444)), (' C 196  PRO  HB3', ' C 219  PRO  HG3', -0.461, (-36.663, -28.916, 24.703)), (' A 384  PRO  O  ', ' A 385  THR  CB ', -0.46, (-26.533, -12.581, -7.467)), (' A 387  LEU  CB ', ' A 702  HOH  O  ', -0.454, (-27.251, -11.561, -2.65)), (' A 395  VAL HG22', ' A 515  PHE  HD1', -0.454, (-24.343, -8.707, 6.219)), (' A 372  ALA  CA ', ' A 716  HOH  O  ', -0.452, (-27.283, 0.521, -10.663)), (' L  79  GLN  HG3', ' L 301  HOH  O  ', -0.45, (5.054, -5.009, 37.147)), (' H 199  THR HG22', ' H 216  LYS  HE3', -0.449, (3.29, 21.509, 72.958)), (' B 389  ASP  N  ', ' B 389  ASP  OD1', -0.446, (-3.047, -59.568, 103.538)), (' B 480  CYS  O  ', ' B 483  VAL HG12', -0.446, (-34.767, -18.509, 82.518)), (' B 384  PRO  O  ', ' B 385  THR  CB ', -0.445, (-7.061, -56.466, 109.689)), (' B 372  ALA  HA ', ' B 725  HOH  O  ', -0.442, (-6.562, -43.695, 113.21)), (' H 140  ASN  HA ', ' H 141  SER  OG ', -0.441, (6.1, 1.098, 75.718)), (' A 385  THR  N  ', ' A 702  HOH  O  ', -0.441, (-27.439, -11.873, -4.36)), (' H 140  ASN  CA ', ' H 141  SER  HB3', -0.441, (6.848, 0.292, 75.426)), (' D  33  LEU HD22', ' D  71  TYR  CG ', -0.441, (-18.085, -56.555, 72.773)), (' C 140  ASN  HA ', ' C 141  SER  OG ', -0.437, (-39.39, -42.904, 26.916)), (' B 372  ALA  CA ', ' B 725  HOH  O  ', -0.434, (-6.308, -43.535, 112.877)), (' C 157  VAL  CG2', ' C 184  LEU HD21', -0.432, (-21.836, -30.174, 43.364)), (' L  48  VAL HG22', ' L  54  LEU HD23', -0.429, (-5.519, -7.634, 28.045)), (' C 140  ASN  CA ', ' C 141  SER  HB3', -0.426, (-40.458, -43.942, 26.83)), (' A 403  ARG  NH1', ' A 713  HOH  O  ', -0.426, (-7.264, 13.504, -5.088)), (' L  33  LEU HD22', ' L  71  TYR  CG ', -0.424, (-15.412, -12.597, 29.344)), (' C  32  THR HG21', ' C  98  ARG  HG3', -0.423, (-17.387, -34.206, 80.227)), (' H 196  PRO  HB3', ' H 219  PRO  HG3', -0.421, (3.017, 15.263, 77.502)), (' C  99  PHE  CE2', ' C 101  ASP  HA ', -0.421, (-13.464, -42.702, 80.07)), (' A 387  LEU  HB2', ' A 702  HOH  O  ', -0.418, (-27.513, -11.289, -2.673)), (' A 480  CYS  O  ', ' A 483  VAL HG12', -0.417, (1.247, 25.02, 19.663)), (' H  99  PHE  CE2', ' H 101  ASP  HA ', -0.413, (-20.454, 1.364, 21.908)), (' A 372  ALA  N  ', ' A 716  HOH  O  ', -0.413, (-27.652, 0.078, -10.195)), (' D  76  ASN  ND2', ' D 307  HOH  O  ', -0.41, (-36.525, -59.251, 66.91)), (' B 326  ILE  O  ', ' B 326  ILE HG23', -0.407, (17.789, -54.121, 89.257))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
