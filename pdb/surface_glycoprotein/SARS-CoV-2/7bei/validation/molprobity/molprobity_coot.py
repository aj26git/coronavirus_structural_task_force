# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 151 ', 'PRO', None, (0.852, -7.148, -2.147)), ('H', ' 153 ', 'PRO', None, (-2.639, -9.099, -6.9)), ('L', '   8 ', 'PRO', None, (8.388, -37.359999999999985, -21.593)), ('L', '  95 ', 'PRO', None, (8.192999999999993, -43.953, 3.175)), ('L', ' 143 ', 'PRO', None, (9.167, -23.644, -30.692))]
data['rota'] = [('H', '  35 ', 'SER', 0.17913029409610629, (-5.395999999999996, -35.415, 3.035)), ('H', ' 117 ', 'SER', 0.03522167444536842, (7.208, -10.230999999999991, 5.993)), ('H', ' 119 ', 'SER', 0.23426972773902094, (4.99, -4.657999999999999, 3.548)), ('H', ' 181 ', 'SER', 0.016744246450455396, (7.967999999999999, -7.4629999999999965, -10.42)), ('H', ' 182 ', 'LEU', 0.027719836703072615, (6.352999999999995, -7.694000000000001, -13.831)), ('H', ' 183 ', 'SER', 0.10583451756757031, (6.59, -6.238999999999998, -17.299)), ('L', '  31 ', 'SER', 0.13451816102205114, (0.475, -51.88, -10.131)), ('L', ' 192 ', 'LYS', 0.0007259928136572574, (29.491999999999997, -0.322, -21.146000000000004)), ('E', ' 376 ', 'THR', 0.24424948810141306, (12.592, -59.425, 12.422000000000002))]
data['cbeta'] = []
data['probe'] = [(' E 369  TYR  HA ', ' E 377  PHE  HE2', -0.752, (15.069, -66.453, 17.601)), (' H  88  GLU  O  ', ' H 601  HOH  O  ', -0.73, (6.096, -23.955, 0.784)), (' H  29  VAL HG13', ' H  34  MET  HG3', -0.661, (-12.181, -35.874, 5.341)), (' H  18  LEU  HB3', ' H  82  MET  HE3', -0.627, (-2.564, -21.234, 7.647)), (' E 357  ARG  HG3', ' E 396  TYR  CE1', -0.606, (-4.862, -70.082, 22.005)), (' E 417  LYS  NZ ', ' L  92  ASP  OD2', -0.543, (-1.993, -48.947, 1.626)), (' L 165 AVAL HG22', ' L 177  LEU HD12', -0.542, (10.168, -18.265, -21.212)), (' H  82  MET  HB3', ' H  85  LEU HD21', -0.541, (0.392, -22.691, 8.407)), (' H  99  LEU  HB3', ' H 102  TYR  HB2', -0.54, (-9.696, -45.442, -4.363)), (' E 356  LYS  NZ ', ' E 604  HOH  O  ', -0.54, (-3.356, -76.948, 17.087)), (' H  71  ARG  NH1', ' H 603  HOH  O  ', -0.538, (-11.518, -39.138, 9.219)), (' L 165 BVAL HG22', ' L 177  LEU HD12', -0.522, (10.188, -18.237, -21.159)), (' L 148  VAL HG22', ' L 198  VAL HG22', -0.521, (17.026, -14.909, -25.556)), (' L   4  MET  HE3', ' L  23  CYS  SG ', -0.517, (6.074, -43.102, -12.357)), (' E 366  SER  HA ', ' E 369  TYR  CZ ', -0.509, (16.621, -70.797, 21.894)), (' E 418  ILE  HA ', ' E 422  ASN  HB2', -0.498, (-4.039, -54.558, 8.945)), (' E 376  THR  HB ', ' E 435  ALA  HB3', -0.49, (10.212, -59.227, 10.862)), (' H  98  ASP  OD2', ' L  98  TYR  OH ', -0.486, (-3.589, -39.355, -0.54)), (' H  20  LEU  HG ', ' H  82  MET  HE2', -0.486, (-4.415, -22.943, 6.834)), (' E 455  LEU HD11', ' H 100  MET  HG3', -0.476, (-6.042, -47.277, 1.01)), (' L   2  ILE HG12', ' L  27  GLN  HG3', -0.474, (11.638, -48.462, -5.289)), (' E 371  SER  OG ', ' E 373  SER  OG ', -0.469, (15.608, -69.355, 10.627)), (' E 379  CYS  SG ', ' E 384  PRO  HG3', -0.469, (12.317, -62.465, 21.991)), (' L  33  LEU HD13', ' L  71  PHE  CG ', -0.465, (3.414, -46.643, -13.206)), (' E 342  PHE  HZ ', ' E 434  ILE HD12', -0.454, (7.919, -66.948, 16.136)), (' E 369  TYR  HA ', ' E 377  PHE  CE2', -0.453, (14.651, -66.154, 17.687)), (' H 123  PRO  HB3', ' H 149  TYR  HB3', -0.451, (4.078, -2.993, -7.691)), (' E 342  PHE  CZ ', ' E 434  ILE HD12', -0.451, (8.027, -67.293, 15.551)), (' E 354  ASN  O  ', ' E 398  ASP  HA ', -0.448, (-2.167, -66.402, 14.261)), (' H 147  LYS  HG3', ' H 181  SER  OG ', -0.442, (10.549, -5.292, -10.455)), (' H  99  LEU  CB ', ' H 102  TYR  HB2', -0.441, (-9.595, -44.981, -4.024)), (' E 431  GLY  HA2', ' E 515  PHE  CD2', -0.435, (5.337, -63.683, 24.305)), (' E 392  PHE  CE2', ' E 515  PHE  HB3', -0.429, (4.448, -66.026, 28.555)), (' L 161  SER  HA ', ' L 180  THR  O  ', -0.424, (17.551, -11.082, -14.169)), (' L  24  ARG  HB2', ' L  24  ARG  HE ', -0.42, (10.832, -45.1, -17.054)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.412, (-5.204, -36.343, -17.2)), (' H  64  LYS  O  ', ' H 602  HOH  O  ', -0.406, (7.475, -29.501, 12.246)), (' H  85  LEU  HA ', ' H  85  LEU HD23', -0.403, (3.281, -22.179, 8.962))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
