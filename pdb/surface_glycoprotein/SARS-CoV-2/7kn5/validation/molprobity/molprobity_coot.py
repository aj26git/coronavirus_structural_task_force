# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 527 ', 'PRO', 0.06742799121450144, (-4.686, -19.394, 25.27))]
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' F  34  ILE HG21', ' F  78  VAL HG21', -0.861, (-22.404, 26.649, -0.727)), (' C  66  ARG HH22', ' C  86  ASP  CG ', -0.857, (48.118, 7.228, 66.005)), (' E  50  CYS  SG ', ' E 100B CYS  SG ', -0.845, (3.509, -25.263, 52.357)), (' C  66  ARG  NH2', ' C  86  ASP  OD2', -0.832, (49.174, 8.064, 65.647)), (' B 391  CYS  O  ', ' B1101  HOH  O  ', -0.817, (-47.875, 7.224, -11.718)), (' A 403  ARG HH21', ' A 601  EDO  H11', -0.728, (26.034, -10.538, 50.928)), (' E  29  LEU HD22', ' E  34  ILE HD11', -0.702, (-1.883, -18.727, 55.102)), (' C  28  THR  HB ', ' C 201  EDO  H22', -0.629, (35.36, -20.801, 52.099)), (' F  29  LEU  O  ', ' F  71  ARG  NH2', -0.609, (-27.623, 23.913, -4.962)), (' B 516  GLU  O  ', ' B 517  LEU HD23', -0.596, (-47.128, 3.423, -7.573)), (' F  22  CYS  HB3', ' F  78  VAL HG23', -0.596, (-19.112, 26.953, -1.305)), (' E   6  GLU  HB2', ' E 107  THR HG23', -0.594, (-0.304, -20.596, 67.994)), (' E  67  PHE  CE2', ' E  82  MET  HG2', -0.586, (1.098, -32.248, 65.331)), (' C  20  LEU  HG ', ' C  82  MET  HE2', -0.576, (48.864, -1.961, 65.838)), (' F  28  THR  HA ', ' F  76  ASN HD21', -0.573, (-24.02, 18.762, -8.341)), (' A 403  ARG  NH1', ' A 702  HOH  O  ', -0.562, (22.956, -7.55, 49.821)), (' A 403  ARG  NH2', ' A 601  EDO  H11', -0.544, (25.335, -10.532, 50.679)), (' F   9  GLY  HA2', ' F  18  LEU HD13', -0.542, (-9.607, 34.41, 2.827)), (' C  28  THR  CB ', ' C 201  EDO  H22', -0.535, (35.454, -20.461, 51.907)), (' C  28  THR  CA ', ' C 201  EDO  H22', -0.534, (36.119, -20.105, 51.689)), (' A 709  HOH  O  ', ' C 201  EDO  H11', -0.532, (33.775, -21.569, 49.483)), (' E  12  VAL  O  ', ' E 111  VAL  HA ', -0.531, (1.337, -33.775, 77.146)), (' E  87  THR HG23', ' E 110  THR  HA ', -0.501, (5.139, -29.799, 75.799)), (' E  50  CYS  HG ', ' E 100B CYS  CB ', -0.495, (3.77, -26.427, 51.822)), (' E   6  GLU  HA ', ' E  21  SER  O  ', -0.494, (-3.541, -20.496, 65.595)), (' B 388  ASN  O  ', ' B 526  GLY  HA3', -0.493, (-49.799, 16.705, -9.873)), (' F  71  ARG  HB3', ' F  78  VAL HG12', -0.487, (-24.079, 28.653, -3.715)), (' B 376  THR  HB ', ' B 435  ALA  HB3', -0.482, (-36.131, 15.614, 8.137)), (' F  17  SER  HB2', ' F  82A ASN  OD1', -0.478, (-14.134, 41.585, -0.381)), (' F  75  LYS  O  ', ' F  77  THR HG23', -0.474, (-18.389, 24.917, -8.577)), (' E  52  SER  N  ', ' E 100B CYS  SG ', -0.471, (0.713, -26.481, 51.33)), (' A 364  ASP  O  ', ' A 367  VAL HG12', -0.467, (2.587, -20.65, 30.923)), (' B 364  ASP  O  ', ' B 367  VAL HG12', -0.467, (-49.125, 20.354, -1.35)), (' A 436  TRP  CZ2', ' A 603  EDO  H22', -0.466, (14.993, -19.984, 37.02)), (' F   6  GLU  CD ', ' F 106  GLY  H  ', -0.466, (-13.729, 23.403, 4.383)), (' F  34  ILE HG13', ' F  78  VAL HG11', -0.464, (-24.265, 26.884, -1.865)), (' F  73  ASN  H  ', ' F  73  ASN  ND2', -0.458, (-26.071, 27.56, -9.889)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.455, (14.002, -7.883, 33.369)), (' E  63  VAL  HB ', ' E  67  PHE  CG ', -0.453, (2.382, -34.692, 62.896)), (' B 340  GLU  OE2', ' B 356  LYS  NZ ', -0.442, (-56.553, 12.091, 7.555)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.442, (-46.337, 6.119, 8.753)), (' A 602  EDO  H12', ' A 603  EDO  O1 ', -0.441, (14.884, -22.831, 37.817)), (' A 436  TRP  HZ2', ' A 603  EDO  H22', -0.441, (15.068, -19.446, 37.056)), (' C  28  THR  O  ', ' C 201  EDO  H22', -0.438, (36.248, -20.526, 50.987)), (' F  61  ASP  N  ', ' F  61  ASP  OD1', -0.436, (-26.342, 39.684, 12.976)), (' A 445  VAL HG13', ' C 201  EDO  C1 ', -0.435, (34.545, -23.281, 49.409)), (' E  34  ILE HG13', ' E  78  VAL HG21', -0.433, (-3.198, -22.273, 56.205)), (' E  50  CYS  SG ', ' E 100B CYS  CB ', -0.431, (3.902, -26.213, 51.828)), (' F  14  PRO  HD3', ' F 111  VAL HG11', -0.429, (-5.95, 42.803, 9.66)), (' F  37  PHE  CD1', ' F  47  GLY  HA2', -0.428, (-23.248, 29.007, 11.093)), (' E  13  GLN  HB3', ' E  14  PRO  HD2', -0.427, (1.1, -38.236, 79.041)), (' F   6  GLU  HA ', ' F  21  SER  O  ', -0.426, (-14.158, 26.565, -0.476)), (' E  21  SER  HG ', ' E  79  TYR  HD1', -0.425, (-8.103, -24.909, 64.208)), (' A 445  VAL HG13', ' C 201  EDO  H12', -0.422, (34.8, -23.727, 48.928)), (' F   2  VAL HG13', ' F  27  PHE  CD1', -0.422, (-21.673, 15.53, -1.806)), (' C  73  ASN  HB2', ' C 345  HOH  O  ', -0.421, (49.295, -13.254, 51.26)), (' F  24  ALA  HB1', ' F  27  PHE  CE1', -0.421, (-20.771, 18.536, -3.053)), (' D  20  LEU  HG ', ' D  82  MET  HE2', -0.421, (-16.25, 1.191, 45.737)), (' B 431  GLY  HA2', ' B 515  PHE  CD2', -0.421, (-41.781, 9.102, -3.177)), (' F  66  ARG  HB3', ' F  82A ASN  O  ', -0.418, (-17.162, 43.333, 4.662)), (' C  63  VAL  O  ', ' C  66  ARG  CG ', -0.416, (50.975, 8.132, 60.379)), (' B 392  PHE  CE1', ' B 515  PHE  HB3', -0.416, (-44.891, 7.597, -6.79)), (' B 517  LEU  HA ', ' B 517  LEU HD23', -0.414, (-47.579, 2.695, -8.593)), (' F  22  CYS  HB3', ' F  78  VAL  CG2', -0.413, (-19.879, 26.709, -1.173)), (' C  61  ASP  O  ', ' C  64  LYS  HG2', -0.411, (47.118, 11.431, 58.163)), (' A 359  SER  OG ', ' A 394  ASN  OD1', -0.409, (4.788, -5.698, 23.048)), (' C  99  TYR  OH ', ' C 100B GLY  HA2', -0.404, (37.358, -9.443, 34.872)), (' F  36  TRP  CG ', ' F  80  LEU HD22', -0.404, (-19.911, 31.52, 4.264)), (' C  63  VAL  O  ', ' C  66  ARG  HG3', -0.403, (50.582, 7.779, 60.079))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
