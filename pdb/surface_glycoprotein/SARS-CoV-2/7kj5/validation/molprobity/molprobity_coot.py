# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 123 ', 'ALA', 0.007730385381987699, (170.268, 252.80400000000006, 175.001)), ('A', ' 285 ', 'ILE', 0.042680182989723855, (180.28899999999993, 231.514, 197.252)), ('B', ' 332 ', 'ILE', 0.04680947790963248, (195.462, 154.767, 174.101)), ('B', ' 467 ', 'ASP', 0.046637066013370594, (177.926, 166.282, 142.118)), ('B', ' 474 ', 'GLN', 0.025403052079656117, (177.399, 170.68, 124.876)), ('B', ' 484 ', 'GLU', 0.008950130695911102, (176.28, 163.032, 121.01399999999998)), ('B', ' 544 ', 'ASN', 0.015926117200443984, (195.529, 164.29700000000005, 182.41499999999996)), ('B', ' 617 ', 'CYS', 0.00602848980753266, (217.371, 164.41400000000004, 209.404)), ('B', ' 618 ', 'THR', 0.037033389078768526, (217.777, 162.738, 205.933)), ('B', ' 619 ', 'GLU', 0.009686902271165214, (216.278, 164.725, 203.016)), ('C', ' 123 ', 'ALA', 0.0020461632786860284, (164.18, 146.241, 174.728)), ('C', ' 709 ', 'ASN', 0.015582708387555311, (173.505, 207.06700000000006, 260.495))]
data['omega'] = []
data['rota'] = [('A', ' 131 ', 'CYS', 0.15891750909725594, (183.25000000000006, 240.264, 163.539)), ('A', ' 284 ', 'THR', 0.0763145985493261, (176.48799999999994, 231.44200000000006, 196.981)), ('A', ' 318 ', 'PHE', 0.09476015435863293, (209.69099999999995, 225.711, 201.26899999999998)), ('A', ' 328 ', 'ARG', 0.0031837590437357325, (225.987, 219.64600000000004, 179.156)), ('A', ' 336 ', 'CYS', 0.06446988709747196, (226.209, 210.91000000000005, 162.57099999999997)), ('A', ' 422 ', 'ASN', 0.03060215750255132, (215.23, 185.13000000000005, 161.57)), ('A', ' 461 ', 'LEU', 0.1898736459572905, (216.612, 181.954, 167.875)), ('A', ' 525 ', 'CYS', 0.07322877645492554, (224.328, 212.76, 171.28399999999996)), ('A', ' 603 ', 'ASN', 0.01573984420971017, (189.319, 234.052, 216.803)), ('A', ' 826 ', 'VAL', 0.2977873252340204, (180.693, 216.21300000000002, 223.998)), ('A', '1012 ', 'LEU', 0.279776517349762, (192.043, 198.05200000000005, 214.32299999999995)), ('B', ' 122 ', 'ASN', 0.0, (255.68100000000004, 194.255, 172.931)), ('B', ' 273 ', 'ARG', 0.06976439859898248, (226.343, 184.899, 191.526)), ('B', ' 336 ', 'CYS', 0.1004730341085122, (190.623, 156.622, 164.183)), ('B', ' 432 ', 'CYS', 0.24316398948820914, (197.374, 166.459, 155.44899999999998)), ('B', ' 454 ', 'ARG', 0.1768393752579439, (184.213, 163.93, 134.532)), ('B', ' 460 ', 'ASN', 0.14151608233782306, (183.189, 175.15900000000005, 137.582)), ('B', ' 474 ', 'GLN', 0.27624583348879184, (177.399, 170.68, 124.876)), ('B', ' 480 ', 'CYS', 0.05875987962684007, (171.607, 167.763, 122.631)), ('B', ' 487 ', 'ASN', 0.15334838295550224, (179.609, 169.993, 119.012)), ('B', ' 488 ', 'CYS', 0.02440959360683337, (178.751, 167.838, 122.14399999999998)), ('B', ' 489 ', 'TYR', 0.06940457633907539, (180.247, 164.929, 124.221)), ('B', ' 544 ', 'ASN', 0.24908484001868275, (195.529, 164.29700000000005, 182.41499999999996)), ('B', ' 546 ', 'LEU', 0.19733502762541577, (196.894, 168.926, 186.159)), ('B', ' 616 ', 'ASN', 0.0, (213.59, 164.831, 209.977)), ('B', ' 662 ', 'CYS', 0.04881918721366674, (219.60799999999995, 179.79, 227.01999999999998)), ('B', ' 702 ', 'GLU', 0.0025598175488596537, (216.194, 172.306, 241.459)), ('B', ' 720 ', 'ILE', 0.0331866345266567, (219.647, 195.80000000000007, 250.656)), ('B', ' 748 ', 'GLU', 0.2847081971474113, (204.521, 216.441, 186.26)), ('B', ' 760 ', 'CYS', 0.2467384780866814, (199.169, 211.92, 201.215)), ('B', ' 791 ', 'THR', 0.2575923974355518, (219.10100000000006, 219.266, 247.031)), ('B', ' 995 ', 'ARG', 0.07558470891696761, (203.632, 202.279, 188.63499999999993)), ('B', '1034 ', 'LEU', 0.07645114524440744, (206.901, 208.988, 244.037)), ('B', '1072 ', 'GLU', 0.00332315980889172, (218.66600000000005, 182.509, 257.57699999999994)), ('B', '1101 ', 'HIS', 0.03715254128453472, (212.90800000000004, 177.92900000000006, 274.429)), ('C', ' 101 ', 'ILE', 0.06612953435317098, (159.885, 155.478, 180.592)), ('C', ' 227 ', 'VAL', 0.1986476584174556, (177.956, 160.97400000000005, 180.37199999999999)), ('C', ' 231 ', 'ILE', 0.0, (177.715, 167.87200000000007, 171.061)), ('C', ' 336 ', 'CYS', 0.12067543813442518, (170.832, 216.962, 163.90499999999997)), ('C', ' 382 ', 'VAL', 0.06042269389916542, (183.364, 206.75700000000006, 174.751)), ('C', ' 408 ', 'ARG', 0.1979572794368526, (197.24200000000002, 207.878, 161.66999999999996)), ('C', ' 518 ', 'LEU', 0.1944237339938281, (178.183, 216.714, 181.35)), ('C', ' 523 ', 'THR', 0.03279249162702069, (171.937, 220.78300000000004, 174.34299999999996)), ('C', ' 525 ', 'CYS', 0.24623384299310136, (171.229, 214.327, 172.62)), ('C', ' 533 ', 'LEU', 0.26840425419909414, (159.015, 211.813, 186.32899999999998)), ('C', ' 645 ', 'THR', 0.21090715156625767, (163.988, 198.74200000000005, 217.675)), ('C', ' 738 ', 'CYS', 0.0, (206.976, 185.00800000000007, 200.966)), ('C', ' 815 ', 'ARG', 0.010414404083733914, (201.41, 168.101, 234.452)), ('C', '1000 ', 'ARG', 0.0469250428791877, (199.29200000000006, 187.92400000000006, 196.506)), ('C', '1032 ', 'CYS', 0.030511990189552307, (199.16400000000004, 187.481, 242.97599999999994)), ('C', '1107 ', 'ARG', 0.14932642533798207, (185.51000000000005, 194.874, 260.65))]
data['cbeta'] = [('A', ' 130 ', 'VAL', ' ', 0.25844748579670695, (182.999, 237.336, 167.601)), ('A', ' 571 ', 'ASP', ' ', 0.26553729876135923, (218.541, 204.88100000000006, 192.017)), ('B', '  59 ', 'PHE', ' ', 0.26405519033558855, (237.306, 178.863, 198.65899999999993)), ('B', ' 459 ', 'SER', ' ', 0.26447787353183283, (180.677, 176.977, 134.52799999999996)), ('B', ' 616 ', 'ASN', ' ', 0.3036431429786737, (212.514, 163.928, 210.634)), ('C', '  99 ', 'ASN', ' ', 0.2626032641624198, (161.03900000000004, 148.99900000000005, 182.075)), ('C', ' 123 ', 'ALA', ' ', 0.32527489441250984, (163.853, 145.19600000000005, 173.67)), ('C', ' 198 ', 'ASP', ' ', 0.25911263050094396, (181.7, 175.282, 177.58099999999996)), ('C', ' 536 ', 'ASN', ' ', 0.26582758445032356, (157.918, 210.11800000000005, 196.72399999999996)), ('C', '1032 ', 'CYS', ' ', 0.28495136710102015, (197.999, 188.17200000000005, 242.24399999999997))]
data['probe'] = [(' C 559  PHE  HE1', ' C 563  GLN  CB ', -1.589, (173.638, 224.901, 187.902)), (' C 559  PHE  CE1', ' C 563  GLN  CB ', -1.523, (172.493, 224.46, 188.129)), (' B 717  ASN  ND2', ' B1311  NAG  C1 ', -1.523, (224.493, 189.4, 256.894)), (' B 717  ASN HD21', ' B1311  NAG  C1 ', -1.484, (224.832, 190.264, 256.794)), (' B1098  ASN  ND2', ' J   1  NAG  C1 ', -1.296, (217.885, 179.93, 272.707)), (' C 559  PHE  CE1', ' C 563  GLN  HB3', -1.281, (173.452, 223.55, 188.314)), (' B1098  ASN HD21', ' J   1  NAG  C1 ', -1.28, (218.372, 178.583, 273.486)), (' C 559  PHE  CD1', ' C 563  GLN  HB2', -1.262, (172.045, 225.019, 188.427)), (' C 559  PHE  CE1', ' C 563  GLN  HB2', -1.189, (172.373, 224.578, 189.163)), (' B 559  PHE  CE1', ' C  43  PHE  CD2', -1.186, (189.705, 161.57, 196.842)), (' C 560  LEU HD12', ' C 562  PHE  CZ ', -1.105, (175.992, 230.246, 188.726)), (' A 200  TYR  CD1', ' A 230  PRO  HA ', -1.094, (185.012, 227.335, 172.236)), (' B 802  PHE  CZ ', ' B 898  PHE  CZ ', -1.089, (218.287, 207.929, 250.078)), (' B 449  TYR  CD1', ' B 495  TYR  O  ', -1.087, (190.45, 152.92, 130.508)), (' B 662  CYS  SG ', ' B 671  CYS  SG ', -1.08, (217.079, 178.964, 224.524)), (' A 603  ASN  ND2', ' A1306  NAG  C1 ', -1.071, (186.091, 234.183, 219.844)), (' A 603  ASN HD21', ' A1306  NAG  C1 ', -1.067, (186.582, 234.352, 220.675)), (' B 165  ASN HD21', ' B1313  NAG  C1 ', -1.067, (237.042, 188.857, 154.297)), (' A 200  TYR  HE1', ' A 230  PRO  HB3', -1.034, (182.722, 226.527, 171.423)), (' A 200  TYR  CE1', ' A 230  PRO  HB3', -1.022, (183.464, 226.022, 171.534)), (' B 451  TYR  HB3', ' B 495  TYR  CE2', -1.0, (189.345, 155.571, 137.03)), (' B 802  PHE  HZ ', ' B 898  PHE  CZ ', -0.978, (218.689, 207.871, 250.547)), (' B 472  ILE  CG2', ' B 488  CYS  SG ', -0.973, (176.07, 165.407, 124.482)), (' B 559  PHE  CE1', ' C  43  PHE  CG ', -0.966, (189.127, 161.991, 196.668)), (' B 802  PHE  HZ ', ' B 898  PHE  HZ ', -0.965, (218.333, 207.269, 250.107)), (' A1079  PRO  HB2', ' B 917  TYR  CE2', -0.954, (216.518, 206.81, 263.759)), (' B 802  PHE  CZ ', ' B 898  PHE  HZ ', -0.953, (218.582, 207.715, 249.412)), (' B 234  ASN HD21', ' B1303  NAG  C1 ', -0.952, (229.88, 181.193, 168.111)), (' B 472  ILE HG21', ' B 488  CYS  SG ', -0.95, (175.324, 166.207, 123.444)), (' A 125  ASN  ND2', ' A 172  SER  O  ', -0.948, (167.259, 243.638, 171.309)), (' A1079  PRO  HB2', ' B 917  TYR  CZ ', -0.946, (216.175, 207.221, 264.701)), (' B 802  PHE  CE1', ' B 898  PHE  CZ ', -0.941, (219.037, 209.086, 249.837)), (' C 329  PHE  HD2', ' C 525  CYS  SG ', -0.935, (169.693, 214.114, 175.948)), (' B 617  CYS  N  ', ' B 644  GLN  OE1', -0.92, (215.045, 164.584, 210.981)), (' C 329  PHE  CD2', ' C 525  CYS  SG ', -0.909, (169.463, 213.528, 175.407)), (' C 559  PHE  HE1', ' C 563  GLN  HB3', -0.902, (174.285, 224.01, 188.277)), (' C 560  LEU HD12', ' C 562  PHE  HZ ', -0.896, (176.899, 230.229, 189.129)), (' B 480  CYS  SG ', ' B 488  CYS  SG ', -0.892, (175.812, 166.118, 122.014)), (' A 127  VAL HG21', ' A1302  NAG  H5 ', -0.89, (172.658, 246.129, 168.029)), (' A 336  CYS  HG ', ' A 361  CYS  HG ', -0.889, (226.207, 209.295, 164.7)), (' B 451  TYR  HB2', ' B 495  TYR  CD2', -0.873, (190.155, 154.637, 135.593)), (' C1134  ASN HD22', ' O   1  NAG  C7 ', -0.872, (175.221, 209.313, 277.043)), (' A1107  ARG  HD3', ' B 904  TYR  CE2', -0.872, (205.618, 208.231, 258.672)), (' A 329  PHE  CD2', ' A 525  CYS  SG ', -0.869, (224.229, 214.928, 174.117)), (' A1094  VAL  HB ', ' B 904  TYR  OH ', -0.869, (206.786, 210.105, 262.403)), (' A 200  TYR  CE1', ' A 230  PRO  CB ', -0.869, (183.264, 226.605, 171.236)), (' B 165  ASN  ND2', ' B1313  NAG  C1 ', -0.847, (237.474, 189.149, 155.232)), (' B 559  PHE  CD1', ' C  43  PHE  CG ', -0.834, (188.949, 160.876, 196.339)), (' A1107  ARG  NH2', ' B 904  TYR  CE1', -0.83, (207.144, 206.903, 260.607)), (' B 616  ASN  HA ', ' B 644  GLN  OE1', -0.824, (214.489, 165.148, 210.674)), (' C1134  ASN  ND2', ' O   1  NAG  C7 ', -0.823, (175.779, 209.772, 276.624)), (' C 124  THR  O  ', ' C 124  THR HG22', -0.821, (170.145, 144.613, 176.309)), (' C 559  PHE  HD1', ' C 563  GLN  HB2', -0.82, (172.041, 225.985, 189.224)), (' A 403  ARG  HD3', ' A 406  GLU  OE2', -0.816, (206.932, 186.712, 155.0)), (' A 200  TYR  HE1', ' A 230  PRO  CB ', -0.812, (183.185, 226.392, 171.184)), (' C 559  PHE  HE1', ' C 563  GLN  CA ', -0.812, (173.335, 224.286, 187.611)), (' B 802  PHE  CE1', ' B 898  PHE  CE1', -0.8, (218.895, 209.221, 249.786)), (' B 559  PHE  CE1', ' C  43  PHE  CE2', -0.799, (188.957, 160.97, 198.547)), (' A1079  PRO  CB ', ' B 917  TYR  CE2', -0.79, (216.24, 207.515, 263.875)), (' A1079  PRO  CB ', ' B 917  TYR  CZ ', -0.79, (215.998, 207.559, 263.71)), (' B 449  TYR  CE1', ' B 495  TYR  O  ', -0.789, (190.691, 152.173, 129.73)), (' B 451  TYR  CB ', ' B 495  TYR  CD2', -0.785, (189.558, 154.73, 136.234)), (' B 559  PHE  CZ ', ' C  43  PHE  CD2', -0.782, (189.782, 161.986, 196.697)), (' B 559  PHE  HE1', ' C  43  PHE  CE2', -0.78, (189.487, 161.228, 198.799)), (' A1102  TRP  HB2', ' A1135  ASN HD21', -0.78, (210.403, 214.543, 274.314)), (' C 560  LEU  CD1', ' C 562  PHE  CZ ', -0.778, (175.329, 230.007, 189.333)), (' B 802  PHE  HE1', ' B 898  PHE  CE1', -0.772, (219.369, 209.963, 250.39)), (' B 122  ASN  O  ', ' B 125  ASN  O  ', -0.767, (255.47, 196.91, 171.899)), (' B 338  PHE  CB ', ' B1306  NAG  H81', -0.767, (194.664, 155.029, 158.8)), (' A 200  TYR  CD1', ' A 230  PRO  CA ', -0.765, (184.314, 227.603, 171.802)), (' A 127  VAL HG21', ' A1302  NAG  C5 ', -0.763, (173.382, 246.746, 167.85)), (' B 451  TYR  CB ', ' B 495  TYR  CE2', -0.735, (189.538, 155.261, 136.758)), (' A1107  ARG  NH2', ' B 904  TYR  CZ ', -0.734, (206.884, 207.249, 260.64)), (' C 379  CYS  SG ', ' C 432  CYS  SG ', -0.733, (183.703, 207.331, 168.872)), (' B 559  PHE  CD1', ' C  43  PHE  CD1', -0.732, (188.171, 160.297, 196.542)), (' A1107  ARG  HD3', ' B 904  TYR  CD2', -0.729, (205.908, 207.334, 258.418)), (' C 132  GLU  OE1', ' C 165  ASN  HB2', -0.715, (172.036, 166.907, 158.074)), (' B 336  CYS  SG ', ' B 358  ILE HG23', -0.709, (190.005, 159.987, 162.631)), (' B 338  PHE  HB3', ' B1306  NAG  H81', -0.708, (195.478, 155.081, 158.513)), (' C 559  PHE  CE1', ' C 563  GLN  C  ', -0.706, (172.284, 223.633, 188.032)), (' B 331  ASN  CG ', ' B1305  NAG  C7 ', -0.698, (193.436, 150.7, 179.475)), (' B1080  ALA  HB3', ' B1132  ILE HG13', -0.693, (198.279, 177.628, 269.428)), (' A 200  TYR  HD1', ' A 230  PRO  HA ', -0.69, (183.834, 227.992, 173.125)), (' B 720  ILE HD13', ' B1049  LEU  CD1', -0.687, (215.881, 198.36, 251.446)), (' A 378  LYS  HE2', ' A 380  TYR  CE1', -0.667, (206.374, 199.107, 168.083)), (' B 496  GLY  O  ', ' B 498  GLN  HG3', -0.664, (196.023, 150.113, 130.159)), (' B1098  ASN HD22', ' J   1  NAG  C1 ', -0.661, (218.148, 179.562, 272.21)), (' C 560  LEU  CD1', ' C 562  PHE  CE2', -0.659, (175.094, 230.476, 189.169)), (' B 338  PHE  HB2', ' B1306  NAG  H81', -0.654, (194.747, 154.861, 159.78)), (' B 234  ASN  ND2', ' B1303  NAG  C1 ', -0.652, (230.179, 181.294, 168.274)), (' B 417  LYS  HD3', ' B 455  LEU  CD1', -0.649, (190.551, 166.908, 130.671)), (' A1079  PRO  CB ', ' B 917  TYR  OH ', -0.648, (215.435, 207.109, 263.839)), (' A1081  ILE HD12', ' A1135  ASN  HB3', -0.648, (212.32, 210.799, 275.452)), (' B1098  ASN HD21', ' J   1  NAG  C2 ', -0.644, (218.073, 178.059, 273.877)), (' C 801  ASN  OD1', ' M   1  NAG  N2 ', -0.643, (194.398, 165.4, 248.259)), (' C 336  CYS  SG ', ' C 361  CYS  SG ', -0.636, (171.851, 218.062, 166.187)), (' A 357  ARG  HB2', ' A 396  TYR  CE2', -0.636, (227.957, 199.1, 166.439)), (' C 718  PHE  CZ ', ' C 923  ILE HD11', -0.632, (188.633, 180.512, 257.712)), (' B 332  ILE HD11', ' B 362  VAL HG11', -0.632, (196.331, 157.89, 170.831)), (' A  46  SER  OG ', ' A 281  GLU  HG2', -0.63, (173.701, 225.943, 204.369)), (' A1102  TRP  CB ', ' A1135  ASN HD21', -0.63, (210.351, 214.138, 273.963)), (' B 123  ALA  HB3', ' B1302  NAG  H82', -0.629, (258.729, 197.393, 170.606)), (' C 560  LEU HD13', ' C 562  PHE  CE2', -0.628, (175.249, 231.33, 188.519)), (' B 120  VAL HG12', ' B 122  ASN  HB3', -0.628, (253.58, 193.079, 171.611)), (' B1115  ILE HD12', ' B1135  ASN  ND2', -0.626, (206.159, 181.194, 273.981)), (' B 616  ASN  CA ', ' B 644  GLN  OE1', -0.621, (214.664, 164.519, 210.49)), (' A 520  ALA  HB1', ' A 521  PRO  HD2', -0.616, (230.633, 204.439, 178.479)), (' B 472  ILE HG23', ' B 488  CYS  SG ', -0.616, (176.993, 165.998, 124.721)), (' C 124  THR  CG2', ' C 124  THR  O  ', -0.612, (169.568, 144.717, 176.567)), (' C 328  ARG  NH1', ' C 578  ASP  OD2', -0.609, (161.179, 216.49, 184.009)), (' A 329  PHE  HD2', ' A 525  CYS  SG ', -0.609, (224.807, 214.735, 175.364)), (' A 391  CYS  SG ', ' A 525  CYS  SG ', -0.604, (224.572, 212.71, 174.816)), (' A1136  THR  O  ', ' A1136  THR HG22', -0.599, (209.318, 212.111, 281.102)), (' B 466  ARG  HG2', ' B 466  ARG  O  ', -0.598, (178.86, 163.255, 143.796)), (' C 379  CYS  HA ', ' C 432  CYS  SG ', -0.595, (185.304, 208.123, 168.996)), (' B 616  ASN  C  ', ' B 644  GLN  OE1', -0.595, (215.101, 164.346, 210.368)), (' B 332  ILE  O  ', ' B 332  ILE HG23', -0.595, (196.322, 153.312, 172.189)), (' B 720  ILE HD13', ' B1049  LEU HD12', -0.591, (216.152, 198.726, 251.228)), (' B 800  PHE  CD1', ' B 898  PHE  CE2', -0.591, (219.643, 207.017, 253.4)), (' A 127  VAL HG11', ' A1302  NAG  O6 ', -0.59, (175.225, 246.225, 167.012)), (' C 718  PHE  HZ ', ' C 923  ILE HD11', -0.589, (188.476, 180.144, 258.203)), (' C 599  THR HG22', ' C 601  GLY  H  ', -0.583, (170.57, 179.447, 216.127)), (' C 801  ASN  CG ', ' M   1  NAG  C7 ', -0.582, (194.439, 165.378, 249.45)), (' C 132  GLU  CD ', ' C 165  ASN  HB2', -0.577, (172.044, 167.108, 158.541)), (' B 720  ILE  CD1', ' B1049  LEU  CD1', -0.574, (216.748, 198.914, 251.927)), (' C 801  ASN  OD1', ' M   1  NAG  C7 ', -0.57, (194.778, 165.962, 249.231)), (' B1081  ILE HD12', ' B1135  ASN  HB3', -0.57, (203.597, 179.959, 275.204)), (' B 559  PHE  CZ ', ' B 566  GLY  HA3', -0.565, (191.12, 162.609, 195.992)), (' B1094  VAL  CG1', ' C 904  TYR  OH ', -0.562, (205.04, 183.955, 260.828)), (' B 800  PHE  CD1', ' B 898  PHE  CD2', -0.56, (219.874, 207.47, 253.42)), (' C 565  PHE  HZ ', ' C 567  ARG HH21', -0.559, (179.335, 216.085, 186.805)), (' C 560  LEU  O  ', ' C 577  ARG  NH2', -0.558, (170.391, 227.379, 187.327)), (' B 577  ARG  HB2', ' B 584  ILE  CD1', -0.558, (191.651, 157.339, 191.723)), (' A1094  VAL  CB ', ' B 904  TYR  OH ', -0.555, (207.45, 210.456, 262.419)), (' B 480  CYS  HG ', ' B 488  CYS  CB ', -0.555, (176.009, 167.745, 122.615)), (' B 215  ASP  N  ', ' B 266  TYR  HH ', -0.552, (250.878, 178.698, 192.263)), (' A 121  ASN  OD1', ' A 125  ASN  O  ', -0.551, (172.141, 247.934, 175.026)), (' B 387  LEU HD11', ' B 432  CYS  SG ', -0.55, (200.508, 165.863, 158.764)), (' C 815  ARG  HD2', ' C 820  ASP  OD1', -0.547, (198.402, 166.726, 230.855)), (' B 129  LYS  NZ ', ' B1302  NAG  O6 ', -0.544, (250.195, 193.47, 165.05)), (' B1097  SER  HA ', ' B1101  HIS  O  ', -0.543, (212.068, 177.893, 271.266)), (' B 484  GLU  HG2', ' B 484  GLU  O  ', -0.542, (178.282, 161.652, 120.852)), (' C 391  CYS  SG ', ' C 524  VAL  O  ', -0.541, (172.171, 215.575, 174.476)), (' B 715  PRO  HD3', ' C 894  LEU HD13', -0.541, (213.074, 184.352, 255.74)), (' B 616  ASN  HA ', ' B 644  GLN  CD ', -0.538, (214.648, 165.533, 211.718)), (' A 332  ILE HG21', ' A 361  CYS  HA ', -0.537, (229.986, 213.141, 167.489)), (' A 127  VAL  CG2', ' A1302  NAG  H5 ', -0.536, (173.446, 245.951, 168.49)), (' A 904  TYR  CZ ', ' C1107  ARG  HD3', -0.533, (186.003, 199.123, 259.391)), (' A 603  ASN HD22', ' A1306  NAG  C1 ', -0.518, (186.278, 233.771, 219.487)), (' A  29  THR  C  ', ' A1301  NAG  H82', -0.515, (196.059, 248.697, 193.996)), (' A 403  ARG  HD3', ' A 406  GLU  CD ', -0.515, (207.142, 187.836, 155.049)), (' B 717  ASN  ND2', ' B1311  NAG  C2 ', -0.514, (224.791, 190.257, 258.955)), (' A 200  TYR  CE1', ' A 230  PRO  CA ', -0.513, (183.917, 227.588, 171.85)), (' B 720  ILE  CD1', ' B1049  LEU HD11', -0.513, (215.927, 198.565, 252.484)), (' B 717  ASN  HB3', ' B1071  GLN  HG3', -0.513, (222.632, 187.569, 256.247)), (' B 992  GLN  O  ', ' B 995  ARG  HB2', -0.513, (205.017, 202.899, 186.499)), (' C 117  LEU HD11', ' C 231  ILE HG21', -0.511, (174.086, 166.635, 171.246)), (' A 738  CYS  SG ', ' A 760  CYS  SG ', -0.51, (183.678, 192.857, 200.234)), (' C 328  ARG  O  ', ' C 579  PRO  CG ', -0.507, (166.537, 215.574, 180.724)), (' B1098  ASN  ND2', ' J   1  NAG  C2 ', -0.507, (218.519, 178.487, 273.314)), (' A1079  PRO  HB3', ' B 917  TYR  CE2', -0.506, (216.55, 207.682, 263.362)), (' A 200  TYR  CE1', ' A 230  PRO  HA ', -0.505, (184.248, 227.21, 172.23)), (' B1107  ARG  HD3', ' C 904  TYR  CE2', -0.505, (205.045, 186.102, 257.834)), (' B 127  VAL HG21', ' B1302  NAG  C1 ', -0.5, (253.036, 195.878, 168.0)), (' A 904  TYR  CE2', ' C1107  ARG  NH1', -0.498, (186.487, 200.312, 260.777)), (' C 559  PHE  CE1', ' C 563  GLN  CA ', -0.497, (173.02, 224.717, 187.687)), (' C 738  CYS  SG ', ' C 739  THR  N  ', -0.497, (208.273, 185.807, 198.973)), (' A1081  ILE HD12', ' A1135  ASN  CB ', -0.497, (212.473, 211.193, 275.624)), (' C 201  PHE  HB2', ' C 231  ILE HG12', -0.495, (175.607, 167.163, 174.14)), (' B 454  ARG  HG3', ' B 492  LEU  CD2', -0.495, (181.445, 162.975, 135.108)), (' B 129  LYS  CE ', ' B1302  NAG  O6 ', -0.495, (250.528, 193.691, 165.378)), (' A 398  ASP  HB2', ' A 512  VAL  HB ', -0.495, (217.325, 197.081, 163.568)), (' B 802  PHE  HE1', ' B 898  PHE  CZ ', -0.495, (219.768, 209.375, 250.907)), (' B 800  PHE  CG ', ' B 898  PHE  HE2', -0.491, (220.408, 206.339, 252.267)), (' B1094  VAL HG11', ' C 904  TYR  OH ', -0.491, (205.543, 183.663, 260.695)), (' B 331  ASN  ND2', ' B1305  NAG  C7 ', -0.489, (194.129, 150.489, 179.702)), (' C 660  TYR  HB2', ' C 695  TYR  CZ ', -0.487, (165.738, 188.051, 228.551)), (' C 560  LEU HD13', ' C 562  PHE  HE2', -0.487, (175.545, 231.789, 188.618)), (' A1102  TRP  CD1', ' A1135  ASN  OD1', -0.483, (212.631, 215.229, 274.504)), (' B 720  ILE HD13', ' B1049  LEU HD11', -0.482, (215.852, 198.061, 252.187)), (' A 284  THR  O  ', ' A 286  THR HG23', -0.482, (177.789, 232.498, 199.239)), (' B 480  CYS  SG ', ' B 488  CYS  CB ', -0.48, (176.016, 167.582, 122.078)), (' B 714  ILE HG22', ' B1110  TYR  HB2', -0.48, (215.037, 185.599, 261.437)), (' B 121  ASN  HA ', ' B 126  VAL HG22', -0.479, (251.796, 195.519, 175.708)), (' C1000  ARG  O  ', ' C1003  SER  HB3', -0.476, (198.671, 188.089, 199.108)), (' A 200  TYR  OH ', ' C 355  ARG  NH2', -0.475, (184.678, 223.45, 170.947)), (' B 559  PHE  CE2', ' C  43  PHE  HB3', -0.473, (189.824, 162.353, 195.218)), (' A 398  ASP  OD2', ' A 423  TYR  OH ', -0.473, (217.682, 194.28, 164.527)), (' B 660  TYR  HB2', ' B 695  TYR  CZ ', -0.472, (223.504, 174.966, 227.238)), (' B1082  CYS  SG ', ' B1132  ILE HD13', -0.468, (197.232, 175.871, 273.806)), (' C 328  ARG  O  ', ' C 579  PRO  HG3', -0.467, (166.808, 215.526, 180.702)), (' B 454  ARG  HA ', ' B 492  LEU HD23', -0.467, (182.917, 163.225, 133.62)), (' B 331  ASN  CG ', ' B1305  NAG  N2 ', -0.465, (193.888, 150.801, 180.362)), (' C 559  PHE  HE1', ' C 563  GLN  C  ', -0.463, (173.468, 224.071, 187.632)), (' A 391  CYS  HB3', ' A 544  ASN  O  ', -0.461, (222.589, 211.59, 177.716)), (' B1080  ALA  CB ', ' B1132  ILE HG13', -0.461, (198.541, 177.979, 269.821)), (' A1079  PRO  HB3', ' B 917  TYR  OH ', -0.46, (215.758, 207.818, 263.661)), (' B 800  PHE  CG ', ' B 898  PHE  CE2', -0.459, (220.16, 206.94, 252.405)), (' C 328  ARG HH11', ' C 578  ASP  CG ', -0.455, (161.727, 217.291, 184.048)), (' A1090  PRO  HD3', ' A1095  PHE  CE1', -0.454, (210.377, 207.363, 268.492)), (' C 801  ASN  CG ', ' M   1  NAG  N2 ', -0.454, (194.169, 165.112, 249.206)), (' B 559  PHE  CE2', ' B 566  GLY  HA3', -0.453, (191.054, 162.682, 195.49)), (' B 234  ASN HD21', ' B1303  NAG  C2 ', -0.453, (228.877, 181.028, 168.528)), (' B1094  VAL HG13', ' C 904  TYR  OH ', -0.451, (205.047, 184.571, 261.401)), (' C 992  GLN  O  ', ' C 995  ARG  HB2', -0.45, (198.32, 189.445, 186.499)), (' C 201  PHE  HB2', ' C 231  ILE  CD1', -0.448, (175.25, 167.783, 174.571)), (' B 411  ALA  HB1', ' B 412  PRO  HD2', -0.448, (199.015, 172.754, 146.933)), (' B1102  TRP  HB2', ' B1135  ASN HD21', -0.448, (207.625, 180.144, 274.546)), (' C 115  GLN  HB3', ' C 233  ILE HD13', -0.447, (172.859, 167.716, 166.675)), (' A 127  VAL HG21', ' A1302  NAG  C1 ', -0.446, (172.838, 247.118, 169.035)), (' C 718  PHE  CG ', ' C1067  TYR  CE1', -0.444, (186.471, 183.694, 256.236)), (' C 334  ASN  O  ', ' C 361  CYS  HB2', -0.443, (168.303, 218.028, 166.205)), (' A 457  ARG  HD3', ' A 459  SER  O  ', -0.443, (215.223, 178.264, 165.448)), (' B1102  TRP  HB2', ' B1135  ASN  ND2', -0.442, (207.347, 179.783, 274.297)), (' B1115  ILE HD12', ' B1135  ASN HD22', -0.442, (206.071, 180.782, 274.167)), (' A 122  ASN  N  ', ' A 122  ASN  OD1', -0.439, (173.166, 249.233, 172.999)), (' A  64  TRP  CD1', ' A 266  TYR  CE2', -0.439, (190.563, 252.779, 189.617)), (' B 454  ARG  CG ', ' B 492  LEU  CD2', -0.438, (181.64, 163.273, 134.681)), (' A 336  CYS  SG ', ' A 358  ILE  CG2', -0.437, (225.329, 207.609, 165.08)), (' A 869  MET  HE1', ' C 697  MET  CG ', -0.437, (170.426, 195.643, 228.578)), (' A 378  LYS  HE2', ' A 380  TYR  HE1', -0.436, (205.789, 198.658, 168.753)), (' B 120  VAL HG12', ' B 122  ASN  CB ', -0.436, (254.224, 192.649, 171.592)), (' B 454  ARG  NH2', ' B 467  ASP  O  ', -0.433, (180.117, 164.812, 140.082)), (' C 801  ASN  OD1', ' C 803  SER  OG ', -0.432, (194.656, 165.801, 247.024)), (' B 660  TYR  HB2', ' B 695  TYR  CE1', -0.432, (223.212, 174.899, 227.812)), (' C 132  GLU  OE1', ' C 165  ASN  ND2', -0.432, (171.789, 167.684, 156.943)), (' A 342  PHE  HB2', ' A1305  NAG  H82', -0.43, (219.275, 208.311, 155.981)), (' C 559  PHE  CE1', ' C 563  GLN  O  ', -0.43, (171.889, 224.047, 187.657)), (' A 200  TYR  HD1', ' A 230  PRO  CA ', -0.429, (183.645, 228.449, 172.756)), (' A 204  TYR  CE2', ' A 225  PRO  HB3', -0.427, (182.032, 231.388, 184.415)), (' B 350  VAL HG12', ' B 422  ASN  HB3', -0.426, (188.315, 163.513, 139.459)), (' B 577  ARG  HB2', ' B 584  ILE HD12', -0.424, (191.631, 157.997, 192.097)), (' A1037  SER  H  ', ' A1048  HIS  CD2', -0.422, (191.78, 204.751, 246.888)), (' B 601  GLY  O  ', ' B 604  THR  HB ', -0.421, (231.949, 185.225, 217.972)), (' C 231  ILE  H  ', ' C 231  ILE HG13', -0.421, (177.95, 168.412, 173.536)), (' B 559  PHE  CZ ', ' C  43  PHE  CG ', -0.419, (189.551, 161.742, 196.613)), (' B 332  ILE  O  ', ' B 332  ILE HG13', -0.414, (195.724, 154.682, 171.736)), (' A 332  ILE  CG2', ' A 361  CYS  HA ', -0.413, (230.174, 213.474, 167.726)), (' C 719  THR HG23', ' C1070  ALA  HB2', -0.412, (180.594, 182.541, 253.276)), (' A 327  VAL  H  ', ' A 531  THR HG22', -0.411, (223.518, 223.986, 179.849)), (' B 800  PHE  CD1', ' B 898  PHE  HE2', -0.41, (219.83, 206.664, 252.933)), (' B 338  PHE  HB3', ' B1306  NAG  C8 ', -0.41, (195.612, 155.306, 158.523)), (' A 378  LYS  HD3', ' A 380  TYR  OH ', -0.41, (206.574, 199.332, 166.138)), (' A1107  ARG  CD ', ' B 904  TYR  CE2', -0.409, (205.884, 207.868, 259.686)), (' C 449  TYR  CE1', ' C 496  GLY  HA2', -0.409, (199.188, 216.819, 143.969)), (' B 331  ASN  OD1', ' B1305  NAG  C7 ', -0.408, (193.687, 151.349, 180.448)), (' A 336  CYS  SG ', ' A 361  CYS  SG ', -0.406, (226.471, 209.604, 164.323)), (' B  83  VAL HG12', ' B 237  ARG  HD3', -0.404, (241.6, 175.851, 172.437)), (' A1073  LYS  HA ', ' A1310  NAG  H82', -0.404, (205.613, 224.557, 259.566)), (' B 618  THR HG21', ' B1308  NAG  H81', -0.403, (215.792, 159.282, 205.064)), (' A 904  TYR  CE1', ' C1107  ARG  HD3', -0.403, (186.063, 199.011, 259.153)), (' C  64  TRP  CD1', ' C 266  TYR  CE2', -0.402, (154.471, 163.732, 189.917)), (' B 616  ASN  HA ', ' B 644  GLN  NE2', -0.402, (214.22, 165.702, 211.853)), (' B 718  PHE  CG ', ' B1067  TYR  CE1', -0.401, (216.998, 193.477, 255.83))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
