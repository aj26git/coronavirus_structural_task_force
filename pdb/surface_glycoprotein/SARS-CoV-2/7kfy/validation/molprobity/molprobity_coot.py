# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 147 ', 'PRO', None, (1.5919999999999992, -6.975, -2.393)), ('H', ' 149 ', 'PRO', None, (-1.885, -8.758, -7.191000000000002)), ('L', '   8 ', 'PRO', None, (7.257999999999999, -36.57, -21.638)), ('L', '  95 ', 'PRO', None, (4.844, -40.1, 0.511)), ('L', ' 141 ', 'PRO', None, (9.666, -22.632, -31.516))]
data['rota'] = [('A', ' 345 ', 'THR', 0.29328305910592734, (0.785, -73.76700000000001, 3.189)), ('A', ' 452 ', 'LEU', 0.07745066798323755, (-6.971999999999999, -58.649, 0.969)), ('H', ' 120 ', 'SER', 0.22001588747181355, (7.588999999999998, 2.2410000000000005, -9.404000000000003)), ('H', ' 128 ', 'SER', 0.056533366080241135, (14.576, 5.43, -32.074)), ('H', ' 178 ', 'LEU', 0.1263010633574499, (6.953, -7.245000000000002, -14.177)), ('L', '   3 ', 'GLN', 0.2501651773217245, (10.931000000000001, -41.599000000000004, -7.522000000000002)), ('L', '  27 ', 'GLN', 0.2692253705879788, (10.293, -49.5, -7.963000000000002)), ('L', '  33 ', 'LEU', 0.166492636068658, (-1.178, -44.614, -9.969000000000003)), ('L', ' 105 ', 'GLU', 0.05178595223363165, (1.149, -27.294, -26.052)), ('L', ' 202 ', 'SER', 0.2154523876509645, (20.612999999999992, -19.288999999999998, -38.258)), ('L', ' 213 ', 'GLU', 0.14406777927173284, (24.116, 6.503, -25.717))]
data['cbeta'] = [('H', ' 178 ', 'LEU', ' ', 0.2643474346084721, (5.469999999999998, -7.288999999999998, -13.718000000000004))]
data['probe'] = [(' H  82  MET  HB3', ' H  82C LEU HD21', -0.583, (0.648, -22.764, 7.43)), (' H  29  VAL HG13', ' H  34  MET  HG3', -0.582, (-13.454, -34.786, 5.174)), (' L  78  LEU HD11', ' L 104  LEU HD21', -0.567, (-3.032, -33.306, -26.056)), (' L 148  TRP  CZ3', ' L 194 ACYS  HB3', -0.543, (20.71, -8.207, -22.796)), (' H 167  PRO  HD2', ' L 162  SER  OG ', -0.524, (6.335, -13.467, -17.84)), (' A 360  ASN  H  ', ' A 523  THR  HB ', -0.496, (-2.197, -76.695, 27.83)), (' L 103  LYS  HE2', ' L 105  GLU  HB3', -0.484, (2.513, -25.925, -24.152)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.462, (4.253, -63.031, 24.134)), (' A 421  TYR  CD1', ' A 457  ARG  HB3', -0.448, (-11.89, -49.002, 9.697)), (' A 371  SER  OG ', ' A 373  SER  OG ', -0.448, (14.011, -69.267, 10.301)), (' H  82  MET  HE1', ' H 109  VAL HG21', -0.438, (-2.47, -21.556, 4.561)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.438, (8.747, -59.199, 10.979)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.432, (-3.639, -65.688, 14.369)), (' H 100  TYR  CE2', ' H 100B TYR  HB2', -0.43, (-9.642, -43.279, -3.349)), (' L  18  ARG  HG3', ' L  76  SER  HA ', -0.419, (-4.792, -41.277, -29.504)), (' L 194 BCYS  O  ', ' L 206  THR  HA ', -0.415, (22.32, -10.255, -28.826)), (' H 116  THR  HA ', ' H 146  PHE  O  ', -0.414, (2.617, -4.68, -1.023)), (' L 191  VAL HG22', ' L 210  ASN  ND2', -0.408, (29.693, -0.924, -25.989)), (' L 145  LYS  HB3', ' L 197  THR  HB ', -0.407, (20.408, -19.716, -26.878)), (' L 120  PRO  HG3', ' L 130  ALA  HB1', -0.401, (20.788, 0.27, -15.335))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
