# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('F', ' 470 ', 'PRO', 0.0, (-4.882, -15.230000000000015, -30.116))]
data['omega'] = [('F', ' 337 ', 'VAL', None, (7.562, -29.140000000000015, -13.612)), ('H', ' 146 ', 'PRO', None, (63.41, -22.372000000000014, 8.993)), ('H', ' 148 ', 'PRO', None, (58.97600000000003, -26.143000000000008, 11.198999999999998)), ('L', '   8 ', 'PRO', None, (36.116, -18.938, 30.237)), ('L', '  95 ', 'PRO', None, (28.843999999999994, -16.658000000000015, 7.038)), ('L', ' 141 ', 'PRO', None, (53.52100000000003, -29.05900000000001, 40.709))]
data['rota'] = [('F', ' 357 ', 'ASN', 0.19385079605151492, (24.779, -45.246, -1.053)), ('F', ' 470 ', 'PRO', 0.0017001436524766722, (-4.882, -15.230000000000015, -30.116)), ('F', ' 472 ', 'LEU', 0.1429016971464892, (-2.5300000000000065, -9.028000000000008, -29.889))]
data['cbeta'] = []
data['probe'] = [(' F 323  CYS  SG ', ' F 348  CYS  SG ', -1.013, (7.247, -46.697, 5.142)), (' F 415  ASP  OD1', ' F 701  HOH  O  ', -0.856, (16.201, -17.987, 6.334)), (' F 353  SER  HA ', ' F 356  TYR  CD2', -0.812, (22.14, -43.793, 3.311)), (' H  87  THR HG23', ' H 110  THR  HA ', -0.808, (55.099, -21.549, 6.035)), (' F 337  VAL HG11', ' F 389  VAL HG22', -0.755, (11.592, -28.419, -13.692)), (' F 342  ARG  HD3', ' F 383  TYR  HB3', -0.751, (5.163, -32.655, 0.715)), (' F 343  LYS  HD3', ' F 344  LYS  H  ', -0.744, (3.441, -39.179, 0.107)), (' H   2  MET  HE3', ' H   4  LEU  CD1', -0.733, (35.603, -36.475, 3.252)), (' H   2  MET  HE3', ' H   4  LEU HD13', -0.715, (35.603, -37.336, 4.098)), (' L   6  GLN  O  ', ' L 100  GLN  NE2', -0.684, (35.926, -16.883, 24.68)), (' A   1  NAG  O6 ', ' H  27  TYR  CE2', -0.681, (29.814, -50.272, 1.767)), (' F 331  ALA  HB3', ' F 334  PHE  HE1', -0.677, (9.383, -40.703, -9.895)), (' L 163  VAL HG22', ' L 175  LEU HD12', -0.663, (59.504, -25.289, 31.495)), (' F 337  VAL HG23', ' F 409  ASN HD22', -0.659, (8.547, -25.315, -14.02)), (' F 326  GLY  O  ', ' F 330  ASN  HB2', -0.643, (10.471, -47.317, -6.778)), (' L 165  GLU  OE1', ' L 302  HOH  O  ', -0.636, (55.013, -30.064, 23.615)), (' H 118  PRO  HB3', ' H 144  TYR  HB3', -0.632, (68.205, -27.432, 12.226)), (' F 343  LYS  O  ', ' F 383  TYR  HA ', -0.6, (5.754, -35.265, 1.607)), (' L 120  PRO  HD3', ' L 132  VAL HG22', -0.6, (78.277, -28.883, 28.663)), (' L 186  TYR  CZ ', ' L 211  ARG  HG3', -0.58, (83.301, -29.295, 29.585)), (' F 336  SER  HB2', ' F 438  TYR  HD1', -0.568, (7.47, -32.4, -16.799)), (' F 439  LYS  NZ ', ' F 480  ASP  HB3', -0.566, (5.377, -28.329, -24.106)), (' H  40  MET  HB2', ' H  43  LYS  HG3', -0.561, (47.754, -17.914, 13.749)), (' F 353  SER  HA ', ' F 356  TYR  CG ', -0.559, (22.491, -43.106, 3.143)), (' F 331  ALA  HB3', ' F 334  PHE  CE1', -0.559, (8.862, -40.491, -10.135)), (' F 443  LEU HD23', ' F 460  PHE  CD2', -0.556, (2.708, -12.988, -20.084)), (' F 395  ARG HH12', ' H  56  GLU  HB2', -0.555, (26.266, -23.953, -6.042)), (' H 199  HIS  ND1', ' H 202  SER  OG ', -0.547, (66.367, -27.77, 7.088)), (' F 334  PHE  CE2', ' F 386  SER  HB3', -0.544, (9.019, -36.718, -8.897)), (' H  11  VAL HG11', ' H 201  PRO  HA ', -0.533, (61.4, -25.765, 3.563)), (' H   9  THR HG23', ' H 108  THR  HB ', -0.53, (53.584, -29.262, 6.367)), (' F 343  LYS  HD3', ' F 344  LYS  N  ', -0.528, (3.508, -38.835, 0.493)), (' F 461  SER  OG ', ' F 465  LYS  N  ', -0.521, (-4.081, -8.224, -19.426)), (' F 413  PRO  HD2', ' F 416  PHE  HB2', -0.514, (12.69, -23.92, 1.593)), (' L  89  GLN HE21', ' L  96  TYR  HB3', -0.51, (31.137, -22.455, 11.145)), (' H 142  LYS  NZ ', ' H 170  GLN  OE1', -0.51, (72.216, -22.221, 19.804)), (' F 341  GLU  CD ', ' F 342  ARG  H  ', -0.507, (2.117, -33.09, -3.956)), (' L   2  ILE HD13', ' L  27  GLN  HB3', -0.503, (23.891, -13.737, 15.133)), (' L 124  GLN  O  ', ' L 127  SER  HB3', -0.501, (80.629, -27.571, 19.124)), (' L 161  GLU  HA ', ' L 176  SER  O  ', -0.5, (64.976, -24.91, 29.253)), (' F 353  SER  CA ', ' F 356  TYR  CD2', -0.496, (22.04, -44.314, 3.933)), (' F 389  VAL HG12', ' F 390  LYS  O  ', -0.496, (16.331, -27.79, -15.161)), (' F 380  SER  O  ', ' F 509  THR  OG1', -0.494, (4.414, -38.593, 10.994)), (' L  21  ILE HD12', ' L  73  LEU HD23', -0.493, (34.081, -26.842, 27.193)), (' F 381  ASN  HB2', ' F 383  TYR  CZ ', -0.491, (4.224, -34.288, 6.43)), (' F 341  GLU  OE1', ' F 342  ARG  N  ', -0.487, (2.392, -33.697, -4.048)), (' F 439  LYS  HZ1', ' F 480  ASP  HB3', -0.484, (5.552, -27.938, -24.322)), (' F 358  SER  HB2', ' F 361  PHE  CD2', -0.483, (21.56, -41.617, -4.833)), (' F 342  ARG  HG2', ' F 385  ASP  OD1', -0.48, (5.579, -31.62, -1.764)), (' L  31  ASN  O  ', ' L  50  TRP  HA ', -0.479, (22.154, -27.325, 17.516)), (' A   1  NAG  O6 ', ' H  27  TYR  CD2', -0.479, (30.096, -49.346, 2.391)), (' H  12  LYS  O  ', ' H 111  VAL  HA ', -0.473, (57.237, -20.8, 1.97)), (' F 358  SER  HB2', ' F 361  PHE  HD2', -0.466, (22.113, -41.73, -4.438)), (' L 154  LEU  H  ', ' L 154  LEU HD12', -0.466, (76.779, -17.748, 42.112)), (' F 334  PHE  CD2', ' F 495  ARG  HG2', -0.463, (11.104, -36.911, -11.192)), (' F 489  ILE  HA ', ' F 492  GLN  HG3', -0.461, (22.4, -33.186, -21.31)), (' H 100A PRO  HD3', ' L  91  TYR  CZ ', -0.46, (25.086, -28.519, 13.479)), (' F 396  GLN  HA ', ' F 401  GLN  HG3', -0.451, (18.772, -21.435, -7.293)), (' H 112  VAL HG11', ' H 146  PRO  HG3', -0.45, (60.975, -21.285, 6.131)), (' F 418  GLY  HA2', ' F 501  PHE  HE1', -0.449, (15.281, -32.349, 4.819)), (' F 425  THR HG21', ' F 495  ARG  HE ', -0.449, (13.298, -38.543, -14.55)), (' F 408  TYR  CD1', ' F 444  ARG  HB3', -0.448, (5.528, -15.975, -12.727)), (' L 107  LYS  HA ', ' L 140  TYR  OH ', -0.445, (47.11, -28.851, 38.718)), (' H 117  PRO  HB3', ' H 204  THR HG21', -0.443, (69.783, -28.718, 6.187)), (' F 395  ARG  NH1', ' H  56  GLU  HB2', -0.442, (25.871, -23.887, -6.278)), (' H  20  ILE HD11', ' H  80  LEU HD23', -0.442, (44.448, -24.295, 1.745)), (' F 344  LYS  O  ', ' F 345  ILE HD13', -0.439, (5.382, -41.064, 2.385)), (' F 390  LYS  HB2', ' F 481  TYR  CE1', -0.439, (15.115, -26.971, -18.76)), (' F 409  ASN  N  ', ' F 409  ASN  OD1', -0.438, (7.664, -21.394, -11.875)), (' H 151  VAL  HA ', ' H 196  ASN  O  ', -0.437, (63.075, -36.519, 14.238)), (' F 337  VAL  O  ', ' F 340  TRP  HD1', -0.437, (6.281, -27.111, -10.169)), (' F 455  ILE HG12', ' F 705  HOH  O  ', -0.435, (-3.135, -23.744, -10.096)), (' F 339  ALA  HA ', ' F 453  ARG  HD2', -0.435, (1.909, -28.216, -9.474)), (' A   1  NAG  HN2', ' F 353  SER  HB3', -0.427, (23.158, -46.653, 3.809)), (' L  13  VAL  HB ', ' L  78  LEU HD23', -0.421, (39.275, -29.822, 35.432)), (' L  66  GLY  HA3', ' L  71  PHE  HA ', -0.419, (23.971, -22.713, 26.599)), (' L 158  ASN  N  ', ' L 158  ASN  OD1', -0.419, (73.55, -17.504, 31.286)), (' F 323  CYS  CB ', ' F 348  CYS  HG ', -0.418, (7.845, -47.057, 4.971)), (' F 483  PHE  CD2', ' F 493  PRO  HB3', -0.415, (13.982, -33.315, -19.918)), (' L 159  SER  HA ', ' L 178  THR  O  ', -0.414, (70.824, -21.623, 28.968)), (' L 160  GLN  NE2', ' L 301  HOH  O  ', -0.413, (65.035, -17.934, 24.875)), (' F 488  GLY  O  ', ' F 492  GLN  HG3', -0.41, (21.972, -32.467, -21.998)), (' F 486  THR  O  ', ' F 487  THR  HB ', -0.409, (21.394, -32.532, -28.713)), (' F 601  NAG  O4 ', ' F 601  NAG  O6 ', -0.408, (18.556, -50.748, -6.042)), (' F 347  ASN  ND2', ' F 347  ASN  O  ', -0.406, (3.738, -46.569, 8.47)), (' H   2  MET  SD ', ' H  29  PHE  HD1', -0.406, (33.294, -37.92, 1.392)), (' F 389  VAL  CG1', ' F 393  ASP  HB2', -0.406, (15.829, -26.498, -14.276)), (' H  67  VAL HG21', ' H  80  LEU HD11', -0.405, (41.603, -20.103, 0.804)), (' H  30  ILE  O  ', ' H  30  ILE HG13', -0.405, (26.625, -35.027, -3.388)), (' L 183  LYS  O  ', ' L 187  GLU  HB2', -0.402, (86.852, -24.011, 26.443))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
