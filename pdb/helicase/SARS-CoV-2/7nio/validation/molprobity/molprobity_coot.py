# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 338 ', 'ALA', 0.02360226239075267, (-24.795, 24.645000000000003, -43.83)), ('E', ' 227 ', 'LEU', 0.0026852331307442422, (-35.180000000000014, 12.041, 20.926))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.2809113721041658, (3.843000000000007, 0.11300000000000665, -43.526)), ('A', ' 100 ', 'SER', 0.030464691904750454, (5.987000000000001, 0.22300000000000786, -29.683)), ('A', ' 160 ', 'ASP', 0.14408703061429542, (-45.693, 26.029000000000003, -36.585)), ('A', ' 192 ', 'LYS', 0.09820372599389238, (-35.842, 14.510000000000007, -52.425)), ('A', ' 207 ', 'ASP', 0.13251927367139413, (-46.800000000000026, 13.583000000000002, -26.397)), ('A', ' 215 ', 'THR', 0.07259068030326661, (-34.45, 28.035000000000004, -41.515)), ('A', ' 216 ', 'THR', 0.24259979180047114, (-38.242, 28.397000000000006, -41.25200000000002)), ('A', ' 219 ', 'LEU', 0.08616638070077019, (-43.327, 21.773000000000014, -43.01800000000001)), ('A', ' 220 ', 'ASN', 0.0, (-46.01400000000001, 19.361000000000004, -44.199000000000005)), ('A', ' 231 ', 'THR', 0.07622044496014588, (-17.141999999999996, 12.637000000000008, -41.798)), ('A', ' 247 ', 'VAL', 0.04390972683026333, (12.485000000000005, 37.177, -22.889000000000003)), ('A', ' 257 ', 'ASN', 0.038490557088253316, (-1.917000000000024, 55.04500000000003, -24.171)), ('A', ' 258 ', 'ILE', 0.003351370545372269, (-4.794000000000002, 52.676, -23.431000000000004)), ('A', ' 271 ', 'LYS', 0.025601804560727928, (1.5989999999999978, 37.613, -19.873)), ('A', ' 278 ', 'SER', 0.005008627521620226, (-1.4040000000000126, 30.924, -22.335)), ('A', ' 280 ', 'LEU', 0.0, (-7.368, 32.171, -19.048)), ('A', ' 286 ', 'THR', 0.25691130407755997, (-16.265, 38.332, -14.957)), ('A', ' 328 ', 'ASP', 0.007522806165061322, (-13.614000000000015, 47.27600000000001, -41.52000000000001)), ('A', ' 345 ', 'LYS', 0.0, (-22.535, 42.851, -39.468)), ('A', ' 484 ', 'VAL', 0.006301065150182694, (-38.574999999999996, 8.739, -23.459)), ('A', ' 495 ', 'VAL', 0.29719955392443115, (-44.457, 24.763, -5.942)), ('A', ' 502 ', 'ARG', 0.00517606215417644, (-47.161, 35.157, -3.906000000000001)), ('A', ' 516 ', 'ASN', 0.04194078571936127, (-36.15600000000001, 19.997000000000014, -21.464000000000002)), ('A', ' 525 ', 'ILE', 0.10403094964811233, (-48.689, 25.698000000000004, -15.941000000000004)), ('A', ' 528 ', 'LEU', 0.06425848685780776, (-42.119, 31.797, -18.424)), ('A', ' 531 ', 'GLN', 0.08222848666800107, (-33.952, 27.343000000000014, -21.099)), ('A', ' 549 ', 'THR', 0.25789904129014624, (-36.21800000000001, 17.987, -11.152000000000003)), ('E', '   7 ', 'LEU', 0.005636433927063163, (-1.9880000000000033, 18.331999999999987, 20.958)), ('E', '  46 ', 'ASN', 0.0, (-10.872000000000025, 31.428, 36.336)), ('E', '  56 ', 'ASP', 0.023924507242986656, (-19.20200000000003, 41.395, 28.275)), ('E', '  63 ', 'LEU', 0.22141993741093452, (-8.152000000000019, 40.81499999999999, 26.993000000000002)), ('E', ' 146 ', 'LYS', 0.07542884368904088, (-30.754000000000005, 16.708, 17.8)), ('E', ' 156 ', 'GLU', 0.14353816695087926, (-53.839, 9.075, 17.192)), ('E', ' 183 ', 'THR', 0.05904545915631185, (-37.821, 9.335, 24.186)), ('E', ' 193 ', 'VAL', 0.23594129578641396, (-44.16200000000001, 9.610999999999985, 33.516)), ('E', ' 194 ', 'GLN', 0.005596595241472418, (-41.360000000000014, 8.874999999999984, 31.062)), ('E', ' 217 ', 'TYR', 0.08070956268128299, (-46.977999999999994, 0.8829999999999867, 27.442)), ('E', ' 230 ', 'HIS', 0.012368488221238443, (-27.087999999999997, 10.486999999999998, 26.045)), ('E', ' 270 ', 'GLN', 0.0230898292200349, (-1.8099999999999972, -18.511000000000003, 13.637)), ('E', ' 288 ', 'LYS', 0.024610090117233224, (-16.749, -14.451, 8.189)), ('E', ' 289 ', 'SER', 0.20126115929277724, (-18.736, -15.828, 11.12)), ('E', ' 361 ', 'ASN', 0.1780921041454693, (-21.805, 0.4599999999999893, 23.483)), ('E', ' 369 ', 'ASP', 0.17339246851403878, (-7.414999999999997, -13.591000000000001, 25.598000000000003)), ('E', ' 531 ', 'GLN', 0.016550407722637942, (-35.942000000000014, -5.891, 3.806)), ('E', ' 579 ', 'ARG', 0.22189458086604277, (-27.312, 3.2310000000000034, -16.359))]
data['cbeta'] = []
data['probe'] = [(' E  73  LYS  HZ3', ' E  76  LYS  HE2', -0.71, (-4.399, 48.475, 26.152)), (' A 333  ILE HD13', ' A 349  ASN  HA ', -0.668, (-13.641, 34.354, -44.096)), (' E 268  ASN  HB3', ' E 291  PHE  HE2', -0.662, (-8.25, -16.509, 9.726)), (' A 405  LEU HD11', ' A 533  VAL HG12', -0.643, (-24.9, 24.029, -18.387)), (' A 328  ASP  N  ', ' A 328  ASP  OD1', -0.626, (-14.264, 48.64, -40.579)), (' E 182  PHE  HA ', ' E 227  LEU  HA ', -0.62, (-35.956, 10.215, 20.17)), (' A 279  THR  HB ', ' A 429  MET  HE2', -0.611, (-6.754, 28.286, -19.745)), (' E 152  ALA  HB3', ' E 225  PHE  HB2', -0.595, (-41.576, 11.99, 19.234)), (' A 460  LYS  NZ ', ' A 819  HOH  O  ', -0.587, (-6.336, 31.318, -9.977)), (' A 511  PHE  HB3', ' A 530  THR HG22', -0.584, (-38.757, 27.912, -18.019)), (' A 453  SER  HA ', ' A 457  TYR  HB2', -0.581, (-15.307, 30.413, -6.942)), (' E 271  LYS  HD3', ' E 435  ASP  HB3', -0.581, (-2.505, -11.03, 8.924)), (' E 445  PRO  HD2', ' E 448  ILE HD12', -0.578, (-25.843, -14.742, -7.106)), (' E  22  ARG  NH1', ' E 816  HOH  O  ', -0.572, (-18.495, 24.577, 26.082)), (' A 285  GLY  O  ', ' A 287  GLY  N  ', -0.572, (-17.432, 38.467, -17.054)), (' A 497  ARG  HD2', ' A 525  ILE HG22', -0.567, (-49.679, 26.031, -13.234)), (' A 479  VAL HG13', ' E 481  THR HG22', -0.56, (-44.514, 10.602, -8.582)), (' A 480  ILE  HB ', ' E 480  ILE  HB ', -0.556, (-38.673, 10.02, -9.577)), (' E 326  PRO  HG2', ' E 329  LYS  HE2', -0.554, (-17.845, -24.666, 26.041)), (' A 215  THR  OG1', ' A 216  THR  N  ', -0.553, (-36.455, 27.931, -42.658)), (' A  12  THR HG21', ' A  25  LEU  O  ', -0.55, (1.448, -2.001, -40.383)), (' E 146  LYS  HB3', ' E 227  LEU HD13', -0.545, (-32.075, 14.793, 18.087)), (' A 551  GLU  HB2', ' E 552  THR HG22', -0.542, (-31.913, 11.137, -6.439)), (' E 226  VAL HG13', ' E 227  LEU  H  ', -0.536, (-36.733, 12.882, 23.124)), (' A 182  PHE  HB3', ' A 225  PHE  HB3', -0.531, (-34.243, 15.004, -38.669)), (' E 182  PHE  HB3', ' E 225  PHE  HB3', -0.53, (-40.109, 10.116, 20.376)), (' A 533  VAL HG11', ' A 560  ARG  HG3', -0.529, (-26.18, 22.769, -16.011)), (' E 280  LEU  HB2', ' E 436  MET  HE3', -0.528, (-8.108, -11.723, 9.166)), (' E 534  ASP  OD1', ' E 801  HOH  O  ', -0.528, (-28.968, 1.257, 3.687)), (' E 331  SER  HB2', ' E 353  GLU  HG3', -0.527, (-22.443, -16.008, 29.68)), (' A 280  LEU HD21', ' A 438  LEU  HG ', -0.526, (-9.887, 36.092, -16.987)), (' E  12  THR  HB ', ' E  26  CYS  HA ', -0.519, (-1.325, 24.099, 27.894)), (' E 500  LEU HD11', ' E 528  LEU HD11', -0.516, (-42.11, -10.305, -5.325)), (' A 533  VAL HG23', ' A 816  HOH  O  ', -0.511, (-30.1, 23.383, -17.44)), (' E 560  ARG  NE ', ' E 801  HOH  O  ', -0.509, (-28.69, 2.125, 2.089)), (' A 452  VAL  HA ', ' A 455  LEU  HB3', -0.506, (-19.324, 27.155, -6.421)), (' A 455  LEU  HG ', ' A 456  VAL HG13', -0.504, (-18.878, 24.246, -7.735)), (' A  65  LEU HD23', ' A  81  PHE  CZ ', -0.5, (4.696, -13.489, -47.665)), (' E 466  ASP  OD1', ' E 467  LYS  N  ', -0.497, (-22.311, -21.137, -13.342)), (' E 249  ILE HD11', ' E 270  GLN  HG3', -0.494, (0.649, -20.209, 15.16)), (' A 481  THR HG22', ' E 479  VAL HG13', -0.49, (-43.636, 9.603, -11.787)), (' A 286  THR HG23', ' A 438  LEU  HB2', -0.49, (-13.073, 37.017, -15.384)), (' E  46  ASN  N  ', ' E  46  ASN  OD1', -0.488, (-9.08, 31.303, 36.302)), (' A 152  ALA  HB1', ' A 165  LEU HD22', -0.482, (-40.058, 12.629, -36.967)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.482, (6.202, 29.323, -27.508)), (' E  32  ASP  HB2', ' E 103  VAL HG11', -0.479, (-2.203, 26.185, 17.037)), (' A 444  CYS  HB2', ' A 449  VAL HG22', -0.477, (-22.172, 36.638, -8.727)), (' E 146  LYS  HZ3', ' E 227  LEU  HB3', -0.477, (-32.26, 12.621, 20.054)), (' A 152  ALA  HB2', ' A 167  TRP  CH2', -0.475, (-37.518, 10.892, -35.438)), (' E 244  GLU  HB2', ' E 276  LYS  HB2', -0.471, (1.278, -6.343, 19.784)), (' A 519  ASN  ND2', ' A 531  GLN  O  ', -0.47, (-35.088, 24.958, -20.15)), (' E 451  THR HG21', ' E 585  LEU HD23', -0.468, (-23.94, -6.341, -11.208)), (' A 283  PRO  HG2', ' A 461  LEU HD13', -0.467, (-14.439, 34.153, -10.932)), (' A 444  CYS  SG ', ' A 803  HOH  O  ', -0.467, (-25.154, 35.647, -10.874)), (' E 513  SER  OG ', ' E 519  ASN  OD1', -0.464, (-37.631, -0.992, -0.615)), (' A  31  TYR  CE1', ' A  87  GLY  HA2', -0.464, (4.172, -10.962, -32.299)), (' E 153  THR  HB ', ' E 166  SER  HB2', -0.461, (-48.26, 16.035, 18.029)), (' A 517  SER  O  ', ' A 521  VAL HG23', -0.461, (-41.812, 18.994, -19.464)), (' A 252  LEU  HB3', ' A 299  TYR  CD1', -0.457, (1.285, 42.764, -28.635)), (' E 533  VAL HG11', ' E 560  ARG  HG3', -0.454, (-27.511, -0.876, 0.136)), (' A 378  MET  O  ', ' A 407  ALA  HB2', -0.453, (-16.981, 20.862, -26.437)), (' E 376  ILE HG22', ' E 400  GLY  HA3', -0.451, (-15.016, -5.444, 8.803)), (' E  31  TYR  CE1', ' E  87  GLY  HA2', -0.451, (1.403, 33.249, 19.08)), (' E 303  ARG  NH1', ' E 353  GLU  O  ', -0.449, (-16.284, -14.316, 30.0)), (' E 353  GLU  OE1', ' E 804  HOH  O  ', -0.449, (-19.316, -19.122, 31.523)), (' E 181  VAL  O  ', ' E 228  THR  N  ', -0.449, (-34.165, 9.728, 21.075)), (' A 154  VAL HG22', ' A 163  LEU HD13', -0.446, (-43.275, 16.515, -37.484)), (' E 129  ARG  HA ', ' E 129  ARG  HD2', -0.446, (-5.519, 11.087, 21.399)), (' E  11  GLN  HG2', ' E  93  TYR  CE2', -0.446, (0.433, 21.878, 34.807)), (' A 176  LEU HD22', ' A 200  PHE  HB2', -0.445, (-36.814, 15.981, -31.343)), (' E  11  GLN  HG2', ' E  93  TYR  HE2', -0.443, (0.416, 21.264, 34.767)), (' A 489  ASN  N  ', ' A 518  GLN  OE1', -0.443, (-41.293, 17.575, -13.914)), (' E 173  ARG HH12', ' E 485  SER  HB3', -0.44, (-38.737, 12.99, 5.93)), (' E  13  SER  O  ', ' E  44  SER  HA ', -0.439, (-7.219, 27.064, 32.684)), (' E 226  VAL HG13', ' E 227  LEU  N  ', -0.438, (-36.408, 12.847, 22.665)), (' E  64  TYR  HA ', ' E  82  PRO  HA ', -0.435, (-4.168, 41.556, 27.983)), (' E 173  ARG  NH1', ' E 484  VAL  O  ', -0.434, (-39.402, 13.939, 5.656)), (' A 414  LYS  HG2', ' E 580  ASP  HA ', -0.431, (-23.24, 2.563, -16.686)), (' E 186  ARG HH21', ' E 219  LEU  HA ', -0.43, (-48.778, 6.012, 26.315)), (' A 152  ALA  HB2', ' A 167  TRP  CZ3', -0.428, (-37.386, 10.737, -35.617)), (' E 156  GLU  HB3', ' E 164  HIS  HB2', -0.427, (-53.17, 9.442, 14.565)), (' A 500  LEU  HA ', ' A 500  LEU HD23', -0.424, (-44.093, 33.735, -8.736)), (' A 544  VAL  O  ', ' A 572  ILE  HA ', -0.424, (-34.0, 32.662, -9.869)), (' E 479  VAL  HB ', ' E 491  PRO  HG2', -0.423, (-43.881, 5.517, -11.863)), (' E  34  VAL  O  ', ' E  40  LYS  NZ ', -0.423, (-9.005, 33.953, 16.715)), (' E 270  GLN  O  ', ' E 274  MET  HG3', -0.422, (0.123, -16.442, 14.812)), (' A 486  SER  HB3', ' A 515  TYR  HB3', -0.422, (-35.461, 16.088, -19.101)), (' E 519  ASN  O  ', ' E 530  THR HG21', -0.422, (-42.203, -4.289, 1.693)), (' E 475  PHE  CZ ', ' E 477  LYS  HE2', -0.421, (-32.282, 4.793, -17.717)), (' A 186  ARG  NH2', ' A 219  LEU  HA ', -0.42, (-42.567, 21.711, -44.622)), (' A 405  LEU HD21', ' A 560  ARG  HA ', -0.419, (-23.589, 22.502, -16.049)), (' E 149  TYR  HB3', ' E 174  PRO  HG3', -0.418, (-36.166, 16.177, 15.062)), (' E 500  LEU HD12', ' E 526  LEU HD22', -0.416, (-44.475, -9.377, -6.513)), (' E 173  ARG  NH2', ' E 485  SER  OG ', -0.413, (-39.108, 11.095, 7.14)), (' E 146  LYS  NZ ', ' E 227  LEU  HB3', -0.413, (-32.234, 12.862, 20.319)), (' E 280  LEU HD12', ' E 436  MET  HB2', -0.411, (-8.459, -13.005, 7.937)), (' E 280  LEU HD11', ' E 438  LEU HD21', -0.41, (-10.626, -14.643, 7.013)), (' E 370  ILE HG12', ' E 395  HIS  HB2', -0.41, (-6.46, -13.0, 20.636)), (' A 376  ILE HG22', ' A 400  GLY  HA3', -0.409, (-12.394, 28.17, -21.499)), (' A 176  LEU HD13', ' A 209  VAL HG11', -0.407, (-40.158, 14.655, -30.276)), (' E 151  ILE HG22', ' E 224  TYR  HB2', -0.406, (-43.397, 15.722, 22.199)), (' A  19  CYS  SG ', ' A 110  ALA  HB1', -0.405, (-8.412, -0.073, -32.998)), (' A 528  LEU  H  ', ' A 528  LEU  HG ', -0.403, (-43.546, 30.812, -16.471)), (' E 288  LYS  HD2', ' E 399  ILE HG22', -0.403, (-15.817, -10.142, 9.314)), (' E 151  ILE  O  ', ' E 803  HOH  O  ', -0.403, (-44.292, 17.471, 17.63)), (' A 271  LYS  HA ', ' A 271  LYS  HD3', -0.402, (3.205, 37.042, -19.749)), (' E 376  ILE HG12', ' E 425  VAL HG11', -0.4, (-11.533, -3.124, 11.578))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
