# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 210 ', 'PRO', None, (-1.3259999999999992, 5.451999999999997, 11.236)), ('B', '  32 ', 'PRO', None, (14.813, -7.468, -9.915))]
data['rota'] = [('A', '  55 ', 'GLU', 0.034882003832057584, (12.208, 24.406999999999993, 5.504)), ('A', '  88 ', 'SER', 0.008534991321068226, (31.907, -8.334, -16.2)), ('A', ' 108 ', 'ARG', 0.2863934958374865, (14.385, 9.087, 22.848)), ('A', ' 111 ', 'ARG', 0.1304318337310073, (17.587, 1.7980000000000003, 17.447)), ('A', ' 132 ', 'SER', 0.1674152378242781, (29.8, -4.400999999999996, 14.846)), ('A', ' 146 ', 'LYS', 0.0, (38.094, -1.085, 5.971)), ('A', ' 207 ', 'SER', 0.261002490865909, (-8.365, 5.5969999999999995, 5.215)), ('A', ' 225 ', 'THR', 0.024162526442865973, (-5.676, -17.342000000000002, 10.487)), ('A', ' 229 ', 'GLU', 0.0774426307406834, (-7.814, -14.263999999999996, 2.876)), ('A', ' 268 ', 'LYS', 0.0, (-10.733, 0.08699999999999998, 21.742)), ('A', ' 273 ', 'ARG', 0.0916053068243461, (-20.611, -8.845, 12.444)), ('C', '   6 ', 'CYS', 0.02440959360683337, (31.019, 10.065, 2.521))]
data['cbeta'] = [('A', ' 214 ', 'THR', ' ', 0.2570289190250607, (-4.018, -6.426999999999996, 14.376)), ('A', ' 225 ', 'THR', ' ', 0.2943867927656702, (-4.427, -17.63, 11.326))]
data['probe'] = [(' A  55 BGLU  HA ', ' A  55 BGLU  OE1', -0.739, (11.974, 23.758, 6.677)), (' A 187  THR  HA ', ' A 204  TRP  O  ', -0.621, (-13.103, -1.199, 7.09)), (' B  51  HIS  HA ', ' B  65  LEU  O  ', -0.577, (2.844, 5.085, -8.958)), (' A 112  GLY  HA3', ' A 160  LEU HD13', -0.511, (21.703, 3.542, 14.131)), (' A  52  ILE HD12', ' A  55 BGLU  HG2', -0.509, (11.405, 20.528, 6.034)), (' A 114  HIS  CB ', ' A 156  LEU HD21', -0.508, (25.06, 2.594, 9.426)), (' B  36  GLU  O  ', ' B  82  VAL  HA ', -0.504, (3.99, -3.956, -15.807)), (' B   6  LYS  O  ', ' B  27  VAL  HA ', -0.49, (2.791, -5.081, -7.241)), (' A  82 AARG  HD2', ' A  89  GLU  HA ', -0.484, (32.454, -4.436, -14.853)), (' A 260  HIS  HA ', ' A 270  LEU  O  ', -0.479, (-12.485, -6.472, 15.529)), (' A 229  GLU  O  ', ' A 245  ALA  HA ', -0.476, (-8.765, -10.826, 4.176)), (' B  29  GLY  HA2', ' B  61  SER  CB ', -0.47, (9.947, -7.044, -2.518)), (' B  29  GLY  HA2', ' B  61  SER  HB2', -0.46, (9.893, -7.025, -3.022)), (' A  82 BARG  HD3', ' A  89  GLU  HA ', -0.444, (32.581, -4.216, -14.844)), (' A 103  VAL  HA ', ' A 108  ARG  O  ', -0.44, (13.674, 6.825, 19.999)), (' A  78  LEU HD23', ' A  95  VAL HG23', -0.439, (25.981, -1.365, -7.099)), (' A 214  THR  HB ', ' A 262  GLN  HB2', -0.437, (-4.966, -5.458, 15.33)), (' B  37  VAL  HA ', ' B  81  ARG  O  ', -0.43, (2.123, -2.751, -15.971)), (' B  25  CYS  HB2', ' B  39  LEU HD21', -0.428, (-2.556, 0.301, -11.979)), (' B  29  GLY  HA2', ' B  61  SER  OG ', -0.428, (9.52, -6.838, -1.82)), (' A 137  ASP  O  ', ' A 141  GLN  HG3', -0.422, (32.999, -11.314, 4.401)), (' A  19  GLU  CB ', ' A  75  ARG  NH2', -0.422, (27.567, 8.092, -14.928)), (' A 117  ALA  HB2', ' B  60  TRP  CE2', -0.41, (20.103, -5.328, 0.928)), (' A  49  ALA  HB1', ' A  51  TRP  NE1', -0.409, (5.198, 15.83, 5.375)), (' A 167  TRP  CH2', ' C   1  LYS  HE3', -0.402, (17.95, 20.387, 9.422)), (' B  71  THR  HA ', ' B  72  PRO  HD2', -0.4, (-14.87, 7.634, -11.067))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
