# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('B', ' 283 ', 'GLY', None, (42.81099999999997, 56.38, 45.32399999999997))]
data['rota'] = [('A', '  50 ', 'LEU', 0.03147133719807236, (17.54099999999999, 55.30200000000004, 25.228)), ('A', '  56 ', 'ASP', 0.22188045687856692, (8.257000000000005, 45.355, 20.36999999999999)), ('A', '  59 ', 'ILE', 0.10759109371511445, (8.927999999999999, 40.42799999999999, 17.860999999999994)), ('A', '  93 ', 'THR', 0.06789221248212854, (23.560000000000002, 21.607, 19.46099999999999)), ('A', ' 106 ', 'ILE', 0.06354786182488532, (22.611999999999977, 35.947, 45.69499999999999)), ('A', ' 216 ', 'ASP', 0.2722401398749271, (47.652, 40.16299999999999, 63.315999999999995)), ('B', '  86 ', 'LEU', 0.003910358767415761, (61.662, 18.768000000000008, 40.479)), ('B', '  87 ', 'LEU', 0.0, (60.88500000000001, 15.294000000000013, 39.28899999999998)), ('B', '  90 ', 'LYS', 0.12978884269836344, (57.16899999999997, 10.236, 31.852)), ('B', ' 222 ', 'ARG', 0.0, (59.11899999999997, 70.314, 35.96399999999998)), ('B', ' 223 ', 'PHE', 0.0023392530366033674, (62.324, 68.294, 36.50199999999998))]
data['cbeta'] = []
data['probe'] = [(' A   4  ARG HH12', ' B   5  LYS  HZ1', -0.868, (47.927, 41.336, 45.58)), (' A   4  ARG  H  ', ' A 299  GLN HE22', -0.853, (43.819, 34.864, 50.768)), (' A   4  ARG HH12', ' B   5  LYS  NZ ', -0.796, (48.226, 40.82, 45.134)), (' A  58  LEU HD22', ' A  82  MET  HE3', -0.689, (13.107, 39.364, 23.284)), (' A 107  GLN  H  ', ' A 110  GLN HE21', -0.684, (23.715, 36.043, 48.622)), (' B 100  LYS  HE3', ' B 156  CYS  HB2', -0.681, (50.525, 30.864, 23.056)), (' B  58  LEU HD22', ' B  82  MET  HE3', -0.617, (65.186, 12.61, 41.879)), (' B 233  VAL HG11', ' B 269  LYS  HG3', -0.588, (65.839, 60.647, 44.142)), (' A 107  GLN  H  ', ' A 110  GLN  NE2', -0.562, (23.333, 35.433, 48.349)), (' A 186  VAL HG23', ' A 188  ARG  HG2', -0.556, (17.028, 51.983, 32.565)), (' B 222  ARG  CZ ', ' B 223  PHE  HD1', -0.527, (62.411, 71.268, 38.307)), (' B  55  GLU  O  ', ' B  59  ILE HG12', -0.517, (70.204, 7.894, 43.955)), (' A  40  ARG  HA ', ' A  87  LEU  HG ', -0.504, (18.353, 39.516, 24.863)), (' A 125 BVAL HG22', ' B   7  ALA  HB3', -0.499, (41.729, 34.806, 37.866)), (' A   4  ARG  NH1', ' B   5  LYS  NZ ', -0.494, (48.353, 40.392, 45.562)), (' A 125 BVAL  CG2', ' B   7  ALA  HB3', -0.474, (41.554, 34.539, 38.294)), (' B 288  GLU  HG2', ' B 291  PHE  CD2', -0.462, (48.345, 48.113, 42.332)), (' A   4  ARG  NH1', ' B   5  LYS  HZ1', -0.462, (47.809, 40.752, 45.984)), (' B 108  PRO  HB3', ' B 132  PRO  HA ', -0.454, (62.482, 41.149, 43.783)), (' B 126  TYR  HE1', ' B 128  CYS  SG ', -0.446, (49.442, 33.701, 45.671)), (' B 222  ARG  NH2', ' B 223  PHE  HD1', -0.437, (62.579, 71.289, 38.589)), (' B 222  ARG  NH2', ' B 223  PHE  CD1', -0.432, (62.947, 71.591, 38.746)), (' A 106  ILE HG13', ' A 110  GLN HE21', -0.43, (24.259, 35.8, 47.735)), (' A 108  PRO  HB3', ' A 132  PRO  HA ', -0.418, (23.358, 44.458, 50.282)), (' A   4  ARG  N  ', ' A 299  GLN HE22', -0.416, (44.077, 35.123, 51.693)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.408, (28.546, 41.904, 51.724)), (' B 288  GLU  HG2', ' B 291  PHE  HD2', -0.407, (48.285, 48.38, 42.216)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.407, (31.531, 51.322, 68.496)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.407, (57.643, 43.237, 42.061)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.405, (50.469, 30.905, 39.084))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
