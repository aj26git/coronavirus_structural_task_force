# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  46 ', 'ALA', 0.04525679232563945, (-20.959999999999994, -24.037000000000006, -0.869)), ('B', ' 302 ', 'GLY', 0.006825982223372688, (-4.8670000000000035, 9.518000000000008, 28.536)), ('B', ' 303 ', 'VAL', 0.0, (-5.6759999999999975, 6.651, 31.005000000000003))]
data['omega'] = []
data['rota'] = [('A', '  22 ', 'CYS', 0.2600932423090888, (14.145, 4.648, 40.214)), ('A', '  82 ', 'MET', 0.24927962669865525, (24.139999999999993, 0.32000000000000006, 30.400000000000002)), ('A', '  83 ', 'GLN', 0.0, (23.430999999999997, -0.47800000000000004, 26.752)), ('A', '  87 ', 'LEU', 0.0, (19.585, -0.144, 30.772)), ('A', ' 106 ', 'ILE', 0.03275314520246772, (14.357999999999999, -0.4960000000000001, 11.101)), ('A', ' 155 ', 'ASP', 0.049136070889962656, (5.036999999999998, -15.830000000000004, 15.871)), ('A', ' 216 ', 'ASP', 0.21286230491511546, (-10.375, 2.9099999999999997, -7.102)), ('A', ' 238 ', 'ASN', 0.1502142372206201, (10.002, 16.843, -1.51)), ('B', '  49 ', 'MET', 0.1933485015494917, (-25.91299999999999, -20.648, 1.6150000000000002)), ('B', '  59 ', 'ILE', 0.024430192273320807, (-30.96400000000001, -31.018999999999995, 12.827)), ('B', '  87 ', 'LEU', 0.0, (-23.948999999999995, -21.247, 17.294)), ('B', ' 127 ', 'GLN', 0.2470122242658529, (-10.488, 0.628, 15.199)), ('B', ' 223 ', 'PHE', 0.0007320058039939514, (-25.562, 31.815999999999995, 20.46)), ('B', ' 286 ', 'ILE', 0.2991121294923383, (-13.195999999999996, 17.946000000000005, 6.734))]
data['cbeta'] = [('A', ' 127 ', 'GLN', ' ', 0.25578061289896187, (0.26099999999999923, 1.4300000000000008, 11.87))]
data['probe'] = [(' A 188  ARG  HE ', ' A 190  THR HG21', -0.759, (19.538, 20.265, 25.045)), (' B 233  VAL  HA ', ' B 236  LYS  HE2', -0.709, (-32.03, 21.761, 8.795)), (' B   6  MET  O  ', ' B 127  GLN  HG3', -0.628, (-8.032, 2.74, 18.16)), (' B   4 AARG  H  ', ' B 299  GLN HE22', -0.572, (-5.7, 10.026, 17.509)), (' B   4 BARG  H  ', ' B 299  GLN HE22', -0.545, (-5.848, 9.803, 18.001)), (' A  19  GLN HE21', ' A  26  THR HG21', -0.514, (5.096, 3.577, 37.309)), (' A 186  VAL HG23', ' A 188  ARG  HG2', -0.509, (19.529, 16.032, 24.313)), (' B  86  LEU  HG ', ' B 179  GLY  HA2', -0.502, (-25.157, -14.129, 16.523)), (' A  22 BCYS  SG ', ' A  66  PHE  CD1', -0.498, (16.832, 1.883, 38.148)), (' A  22 BCYS  HB2', ' A  42  VAL HG22', -0.489, (14.345, 4.636, 37.613)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.484, (-20.922, 6.792, 14.854)), (' A  49  MET  HA ', ' A  52  PRO  HG3', -0.474, (19.875, 14.352, 31.854)), (' A  22 BCYS  SG ', ' A  66  PHE  CE1', -0.466, (16.866, 2.539, 38.027)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.465, (-13.392, -5.158, 17.75)), (' B 288  GLU  HG2', ' B 291  PHE  CD2', -0.457, (-11.29, 11.774, 14.033)), (' B  40  ARG  HA ', ' B  87  LEU HD22', -0.441, (-23.09, -22.004, 13.506)), (' A 186  VAL  CG2', ' A 188  ARG HH11', -0.436, (20.612, 16.694, 22.632)), (' B  22 ACYS  SG ', ' B  66  PHE  CD1', -0.432, (-19.898, -27.512, 12.801)), (' B 108 BPRO  HB3', ' B 132  PRO  HA ', -0.426, (-25.456, 4.567, 13.419)), (' B 108 APRO  HB3', ' B 132  PRO  HA ', -0.425, (-25.567, 4.541, 12.988)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.419, (8.444, 5.609, 4.953)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.418, (-5.702, -10.8, 16.647)), (' B 303  VAL HG13', ' B 304  THR  H  ', -0.403, (-3.243, 6.579, 31.541)), (' A 108 CPRO  HB3', ' A 132  PRO  HA ', -0.401, (13.528, 7.684, 6.677))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
