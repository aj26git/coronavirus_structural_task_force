# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.03671823727124313, (11.13, -10.337, -8.137999999999998))]
data['omega'] = []
data['rota'] = [('A', '  24 ', 'THR', 0.05533669840230512, (49.979, -10.469, -10.999999999999996)), ('A', ' 147 ', 'SER', 0.007699891701059489, (32.168, -5.45, -9.653))]
data['cbeta'] = []
data['probe'] = [(' A 165  MET  HB3', ' A 401  VHP  C37', -0.802, (38.918, 1.848, -17.493)), (' A 290  GLU  OE1', ' A 501  HOH  O  ', -0.799, (23.191, 7.595, -7.157)), (' A 144  SER  O  ', ' A 147 BSER  OG ', -0.753, (34.132, -3.645, -9.536)), (' A 202  VAL HG21', ' A 249  ILE HD11', -0.726, (10.432, 10.099, -17.304)), (' A 216  ASP  OD2', ' A 503  HOH  O  ', -0.688, (11.356, 17.624, 2.653)), (' A  92  ASP  OD1', ' A 504  HOH  O  ', -0.685, (34.632, -25.645, -12.982)), (' A 137  LYS  HG2', ' A 171  VAL HG12', -0.676, (31.205, 10.737, -11.67)), (' A 180  ASN  OD1', ' A 505  HOH  O  ', -0.625, (30.695, -3.309, -28.259)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.617, (19.587, 9.444, -15.608)), (' A 298  ARG  NH2', ' A 502  HOH  O  ', -0.613, (15.842, -1.373, -4.326)), (' A 233  VAL HG21', ' A 269  LYS  HD2', -0.581, (11.018, 28.73, -16.606)), (' A 167  LEU  HB3', ' A 168  PRO  HD2', -0.567, (38.188, 10.747, -17.102)), (' A  83  GLN  NE2', ' A 513  HOH  O  ', -0.555, (28.942, -11.787, -23.399)), (' A 282  LEU  N  ', ' A 503  HOH  O  ', -0.543, (12.844, 17.826, 2.366)), (' A 190  THR  O  ', ' A 192  GLN  HG3', -0.543, (41.902, 7.787, -22.161)), (' A 298  ARG  HD2', ' A 573  HOH  O  ', -0.53, (11.813, -0.901, -8.484)), (' A 169  THR  HB ', ' A 171  VAL HG22', -0.526, (35.173, 11.639, -14.237)), (' A 284  SER  OG ', ' A 288  GLU  OE2', -0.514, (19.749, 16.676, -2.18)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.503, (37.751, -8.206, -14.225)), (' A 298  ARG  HB2', ' A 303  VAL HG11', -0.48, (9.426, -1.704, -6.32)), (' A 305  PHE  O  ', ' A 306  GLN  HB2', -0.472, (12.298, -11.786, -2.018)), (' A 224  THR HG21', ' A 570  HOH  O  ', -0.472, (-1.494, 25.857, -15.756)), (' A 118  TYR  CE2', ' A 144  SER  HB3', -0.469, (37.558, -2.045, -5.318)), (' A 298  ARG  HB2', ' A 303  VAL  CG1', -0.467, (9.364, -1.66, -5.813)), (' A   6  MET  HE3', ' A 299  GLN HE21', -0.465, (13.779, 3.259, 0.761)), (' A 259  ILE HG22', ' A 509  HOH  O  ', -0.462, (2.408, 17.984, -10.187)), (' A  45  THR  O  ', ' A  49  MET  HG3', -0.455, (48.167, -2.583, -17.463)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.452, (28.553, -7.696, -2.298)), (' A 197  ASP  HB3', ' A 542  HOH  O  ', -0.451, (27.033, 17.432, -15.645)), (' A 126  TYR  HE2', ' A 128  CSO  HD ', -0.45, (27.526, 3.494, -7.114)), (' A 168  PRO  HD3', ' A 401  VHP  C3 ', -0.45, (40.829, 10.031, -17.485)), (' A 117  CYS  O  ', ' A 144  SER  HA ', -0.444, (36.195, -4.73, -6.145)), (' A 176  ASP  HB2', ' A 522  HOH  O  ', -0.443, (25.157, -5.541, -20.376)), (' A 212  VAL HG13', ' A 217  ARG  HD3', -0.439, (2.063, 17.56, -1.072)), (' A 298  ARG  NH1', ' A 520  HOH  O  ', -0.434, (15.784, 0.434, -5.354)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.432, (24.623, -2.89, -9.477)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.431, (37.443, -6.228, -23.86)), (' A 189  GLN  HG2', ' A 189  GLN  O  ', -0.431, (47.221, 5.65, -19.048)), (' A 110 BGLN  NE2', ' A 518  HOH  O  ', -0.43, (15.965, 2.523, -14.552)), (' A 168  PRO  HB3', ' A 401  VHP  C2 ', -0.426, (42.426, 11.342, -15.978)), (' A 264  MET  HB2', ' A 509  HOH  O  ', -0.426, (3.843, 17.886, -10.342)), (' A 207  TRP  CD2', ' A 288  GLU  HB2', -0.421, (15.947, 14.645, -5.061)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.417, (25.938, -20.23, -11.083)), (' A 240  GLU  HG3', ' A 574  HOH  O  ', -0.413, (19.076, 13.179, -19.39)), (' A 229  ASP  HB2', ' A 565  HOH  O  ', -0.412, (7.088, 28.761, -22.827)), (' A   1  SER  OG ', ' A   2  GLY  N  ', -0.41, (8.311, 8.759, 5.579)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.402, (32.23, -6.427, -21.652))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
