# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  49 ', 'MET', 0.005039001320715935, (12.809999999999999, -1.057, 29.068999999999996)), ('A', '  73 ', 'VAL', 0.14638503069430583, (0.06400000000000006, -24.264, 15.612)), ('A', ' 106 ', 'ILE', 0.12486681246517892, (19.102000000000007, -1.2279999999999998, 2.288)), ('A', ' 125 ', 'VAL', 0.14763952546073553, (0.7450000000000001, -3.583000000000001, 3.724)), ('A', ' 216 ', 'ASP', 0.20016549592382538, (1.0090000000000008, 16.093, -14.598))]
data['cbeta'] = []
data['probe'] = [(' A 142  ASN  HA ', ' A 401  X7V  O01', -0.776, (3.308, -2.125, 19.649)), (' A  57  LEU  HA ', ' A  60  ARG  HD2', -0.712, (17.494, -11.915, 30.638)), (' A 165  MET  HE1', ' A 192  GLN  NE2', -0.705, (15.504, 3.836, 20.511)), (' A 403  GOL  O1 ', ' A 403  GOL  O3 ', -0.691, (0.74, -18.279, 8.909)), (' A 152  ILE HG22', ' A 154  TYR  O  ', -0.668, (9.666, -10.925, -6.127)), (' A  46  SER  O  ', ' A  49  MET  HE1', -0.654, (8.833, -1.629, 32.465)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.649, (0.291, -9.689, 6.081)), (' A 135  THR  HB ', ' A 171  VAL  CG1', -0.643, (11.521, 7.57, 11.738)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.629, (4.433, -1.147, 14.547)), (' A  15  GLY  O  ', ' A 403  GOL  H2 ', -0.62, (3.681, -18.97, 6.891)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.616, (15.396, -9.784, 24.28)), (' A 152  ILE  CG2', ' A 154  TYR  O  ', -0.597, (8.717, -11.362, -5.927)), (' A 249  ILE HG22', ' A 293  PRO  HG2', -0.594, (16.765, 6.812, -9.569)), (' A  36  VAL HG21', ' A  68  VAL HG11', -0.578, (8.856, -19.549, 14.674)), (' A  45  THR HG22', ' A  48  ASP  OD2', -0.55, (13.165, -7.171, 31.997)), (' A  97  LYS  NZ ', ' A 403  GOL  H12', -0.543, (0.47, -20.515, 6.228)), (' A  22  CYS  HB2', ' A  42  VAL HG22', -0.536, (9.738, -13.247, 23.954)), (' A 207  TRP  CH2', ' A 281  ILE  HB ', -0.531, (3.707, 16.445, -7.425)), (' A 188  ARG  HD2', ' A 190  THR HG21', -0.529, (19.528, 3.922, 26.361)), (' A 185  PHE  HA ', ' A 192  GLN  OE1', -0.51, (17.875, 4.374, 18.896)), (' A 188  ARG  HG3', ' A 190  THR HG23', -0.507, (17.731, 3.574, 25.929)), (' A  57  LEU  HA ', ' A  60  ARG  CD ', -0.504, (16.974, -12.07, 31.035)), (' A 186  VAL HG23', ' A 188  ARG  HG2', -0.5, (18.64, 2.573, 23.11)), (' A  57  LEU  O  ', ' A  60  ARG  CD ', -0.491, (16.484, -12.7, 29.979)), (' A 105  ARG  NH2', ' A 182  TYR  HA ', -0.49, (20.808, 0.846, 9.676)), (' A  63  ASN  HB3', ' A  77  VAL  O  ', -0.483, (13.498, -24.842, 21.772)), (' A  43  ILE HD12', ' A  57  LEU  HB3', -0.476, (16.517, -10.711, 27.921)), (' A  86  VAL HG22', ' A 179  GLY  HA3', -0.475, (19.67, -9.344, 14.286)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.473, (3.49, -10.605, 8.864)), (' A  21  THR  HB ', ' A  67  LEU  HB2', -0.47, (5.02, -17.521, 23.145)), (' A 135  THR  HB ', ' A 171  VAL HG12', -0.469, (11.801, 7.397, 12.675)), (' A  97  LYS  HZ2', ' A 403  GOL  H12', -0.469, (0.97, -21.007, 6.584)), (' A  30  LEU HD22', ' A 148  VAL HG11', -0.46, (11.03, -10.562, 8.068)), (' A  48  ASP  OD2', ' A  57  LEU HD21', -0.457, (14.692, -8.02, 31.686)), (' A  50  LEU HD23', ' A 189  GLN  O  ', -0.455, (14.854, 4.455, 28.999)), (' A  57  LEU  O  ', ' A  60  ARG  HG2', -0.451, (16.552, -13.984, 30.136)), (' A  15  GLY  HA2', ' A 403  GOL  H11', -0.445, (1.777, -18.289, 5.965)), (' A  44  CYS  SG ', ' A  54  TYR  CE1', -0.445, (15.628, -6.611, 25.149)), (' A 235  MET  HB3', ' A 235  MET  HE3', -0.443, (22.3, 23.92, -0.025)), (' A 167  LEU  C  ', ' A 169  THR  H  ', -0.433, (9.401, 8.861, 18.673)), (' A 188  ARG  CD ', ' A 190  THR HG21', -0.431, (19.269, 3.596, 26.553)), (' A  69  GLN  HG3', ' A  74  GLN  OE1', -0.431, (1.045, -21.704, 19.306)), (' A 207  TRP  CZ3', ' A 287  LEU  HA ', -0.429, (6.333, 16.09, -5.153)), (' A 105  ARG HH22', ' A 182  TYR  HA ', -0.426, (21.221, 0.405, 10.28)), (' A  57  LEU HD23', ' A  60  ARG  CD ', -0.413, (16.288, -11.505, 31.509)), (' A 227  LEU  HA ', ' A 227  LEU HD23', -0.413, (22.509, 19.109, -10.148)), (' A 165  MET  HE1', ' A 192  GLN HE22', -0.411, (15.539, 3.048, 20.982)), (' A 112  PHE  CD1', ' A 149  GLY  HA3', -0.408, (10.597, -2.886, 5.148)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.405, (1.806, 1.692, -6.615)), (' A 220  LEU  HA ', ' A 267  SER  OG ', -0.405, (9.399, 21.703, -15.094)), (' A 111  THR  HA ', ' A 129  ALA  HA ', -0.404, (11.808, 3.234, 1.306)), (' A 175  THR  HA ', ' A 181  PHE  HA ', -0.402, (18.252, -2.087, 12.796))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
