# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.01972278061924456, (11.093, -10.35, -8.262)), ('A', ' 169 ', 'THR', 0.009571918916077235, (37.276999999999994, 13.305, -12.484))]
data['omega'] = []
data['rota'] = [('A', ' 147 ', 'SER', 0.1080033851561215, (32.266999999999996, -5.368, -9.61))]
data['cbeta'] = []
data['probe'] = [(' A   8  PHE  HB3', ' A 152  ILE HD12', -0.773, (17.87, -5.656, -6.047)), (' A 144  SER  O  ', ' A 147 BSER  OG ', -0.729, (34.192, -3.572, -9.426)), (' A 194  ALA  O  ', ' A 501  HOH  O  ', -0.681, (31.165, 11.455, -22.494)), (' A 169  THR  HB ', ' A 171  VAL HG22', -0.669, (35.488, 11.363, -14.301)), (' A  31  TRP  CZ2', ' A  75  LEU HD11', -0.649, (32.225, -22.966, -10.876)), (' A  21  THR  HB ', ' A  67  LEU  HB2', -0.645, (44.759, -16.345, -10.815)), (' A 221  ASN  O  ', ' A 502  HOH  O  ', -0.64, (1.876, 25.828, -8.445)), (' A 225  THR  OG1', ' A 229  ASP  OD2', -0.628, (6.828, 27.15, -18.499)), (' A  83  GLN  O  ', ' A  86  VAL HG12', -0.596, (32.952, -8.797, -24.077)), (' A  73  VAL HG22', ' A  74  GLN  H  ', -0.573, (36.529, -24.713, -6.553)), (' A 166  GLU  O  ', ' A 401  VHJ  N10', -0.548, (40.887, 5.989, -15.242)), (' A  46 BSER  HA ', ' A  49  MET  SD ', -0.548, (48.724, -1.751, -15.993)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.541, (28.659, -7.459, -2.382)), (' A 168  PRO  HD3', ' A 401  VHJ  C3 ', -0.541, (40.994, 9.693, -17.199)), (' A 190  THR  O  ', ' A 192  GLN  HG3', -0.531, (42.146, 8.076, -22.008)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.521, (19.403, 9.824, -15.128)), (' A  49  MET  HG2', ' A 401  VHJ  C10', -0.52, (45.111, -1.342, -17.772)), (' A 154  TYR  O  ', ' A 305  PHE  HB3', -0.506, (13.384, -10.261, -6.688)), (' A  46 ASER  HA ', ' A  49  MET  SD ', -0.506, (48.763, -1.738, -15.916)), (' A   1  SER  OG ', ' A   2  GLY  N  ', -0.504, (8.286, 8.917, 5.418)), (' A  73  VAL HG22', ' A  74  GLN  N  ', -0.498, (36.606, -24.488, -6.06)), (' A 114  VAL  O  ', ' A 125  VAL  HA ', -0.479, (26.616, -2.09, -4.007)), (' A  51  ASN  HA ', ' A 188  ARG  HD3', -0.467, (47.071, 2.099, -25.354)), (' A 221  ASN HD22', ' A 270  GLU  HG3', -0.466, (7.11, 29.367, -8.974)), (' A  14  GLU  HG2', ' A 122  PRO  HG2', -0.465, (28.685, -10.497, -1.715)), (' A 102  LYS  NZ ', ' A 508  HOH  O  ', -0.465, (12.937, -10.433, -20.325)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.453, (40.899, -8.393, -15.24)), (' A 167  LEU  HB3', ' A 168  PRO  HD2', -0.45, (38.524, 10.662, -16.604)), (' A  73  VAL  CG2', ' A  74  GLN  H  ', -0.45, (36.34, -25.116, -5.754)), (' A 102  LYS  HG2', ' A 156  CYS  SG ', -0.449, (16.362, -11.646, -15.825)), (' A 298  ARG  CG ', ' A 303  VAL  HB ', -0.449, (9.048, -2.368, -5.642)), (' A 298  ARG  HG3', ' A 303  VAL  HB ', -0.438, (8.912, -1.994, -6.089)), (' A 131  ARG  HG2', ' A 135  THR  O  ', -0.437, (26.918, 8.871, -14.42)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.433, (24.749, -2.873, -9.459)), (' A 233  VAL HG21', ' A 269  LYS  HG3', -0.433, (11.355, 28.029, -15.654)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.422, (34.233, 3.067, -12.19)), (' A 298  ARG  NH2', ' A 503  HOH  O  ', -0.42, (15.161, 0.98, -6.525)), (' A  75  LEU  HB3', ' A  91  VAL  HB ', -0.415, (35.597, -22.911, -13.476)), (' A 256  GLN  HB2', ' A 616  HOH  O  ', -0.41, (-0.304, 6.77, -6.665)), (' A 218  TRP  HB2', ' A 279  ARG  NH1', -0.405, (8.841, 25.736, 2.412)), (' A 239  TYR  CZ ', ' A 272  LEU HD21', -0.402, (17.177, 22.059, -12.014))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
