# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  71 ', 'GLY', 0.025829515397557196, (-24.68900000000001, -5.721, 7.108999999999999))]
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 186  VAL  H  ', ' B 192  GLN HE22', -0.9, (19.368, -2.229, -2.076)), (' B 231  ASN  ND2', ' B 242  LEU  H  ', -0.841, (11.164, 22.2, 8.322)), (' A  71  GLY  H  ', ' A 403  DMS  H23', -0.78, (-24.011, -5.761, 8.755)), (' B  90  LYS  HB2', ' B 501  PEG  H11', -0.758, (-0.612, -13.373, -15.848)), (' B 231  ASN HD21', ' B 242  LEU  H  ', -0.743, (10.638, 22.22, 8.576)), (' A  33  ASP  OD1', ' A  34  ASP  N  ', -0.674, (-26.262, -20.487, 15.776)), (' A  49  MET  HB3', ' A 189  GLN  HG3', -0.655, (-26.018, 5.584, 32.12)), (' A  58  LEU HD22', ' A  82  MET  HE3', -0.65, (-32.251, -9.253, 30.715)), (' A 141  LEU HD21', ' B   6  MET  HE1', -0.65, (-10.555, 3.806, 16.779)), (' A 169  THR HG23', ' A 171  VAL HG22', -0.637, (-10.264, 4.867, 33.222)), (' A  86  VAL HG23', ' A 179  GLY  HA2', -0.636, (-21.257, -10.831, 30.07)), (' A  36  VAL HG13', ' A  89  LEU  HB2', -0.624, (-29.222, -11.739, 19.763)), (' A  30  LEU HD22', ' A 148  VAL HG11', -0.611, (-17.967, -10.653, 20.567)), (' A 165  MET  HE3', ' A 187  ASP  HA ', -0.6, (-21.786, -0.645, 33.053)), (' B  21  THR  HB ', ' B  67  LEU  HB3', -0.6, (6.114, -23.738, -4.251)), (' B 130  MET  HE1', ' B 182  TYR  CG ', -0.598, (7.899, 3.01, 0.244)), (' A  38  CYS  HA ', ' A 162  MET  HE1', -0.597, (-22.993, -8.192, 22.836)), (' A 130  MET  HE1', ' A 136  ILE HD11', -0.596, (-10.718, -6.053, 30.054)), (' B 185  PHE  HA ', ' B 192  GLN  NE2', -0.581, (19.474, -1.503, -1.461)), (' A  56  ASP  O  ', ' A  60  ARG  HG3', -0.577, (-39.075, -4.706, 32.448)), (' A  36  VAL  CG1', ' A  89  LEU  HB2', -0.545, (-29.107, -11.742, 19.174)), (' A  21  THR  HB ', ' A  67  LEU  HB3', -0.544, (-32.531, -2.206, 16.072)), (' B 175  THR HG22', ' B 181  PHE  HA ', -0.541, (10.965, -2.004, -4.097)), (' A 235  MET  HE2', ' A 241  PRO  HB3', -0.538, (4.501, -7.314, 45.433)), (' B  86  VAL HG23', ' B 179  GLY  HA2', -0.53, (7.178, -4.793, -7.264)), (' A 175  THR HG22', ' A 181  PHE  CD1', -0.528, (-19.617, -6.734, 33.275)), (' A 224  THR HG22', ' A 225  THR  H  ', -0.513, (18.53, -12.298, 43.204)), (' A 299  GLN  HB3', ' B 141  LEU  CD2', -0.508, (8.508, -14.727, 17.932)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.508, (-24.896, -15.392, 12.412)), (' B 185  PHE  HA ', ' B 192  GLN HE21', -0.507, (19.434, -1.299, -0.969)), (' A 219  PHE  HE2', ' A 264  MET  HE1', -0.504, (17.708, -7.878, 31.135)), (' A  87  LEU HD23', ' A  88  LYS  N  ', -0.498, (-29.56, -11.187, 25.013)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.49, (-7.646, -15.436, -6.029)), (' A   6  MET  HE2', ' B 142  ASN  ND2', -0.481, (5.587, -7.95, 14.355)), (' A   6  MET  CE ', ' B 142  ASN  HA ', -0.478, (4.966, -9.691, 13.394)), (' A  63  ASN  OD1', ' A  80  HIS  ND1', -0.472, (-37.18, -12.389, 23.167)), (' B 186  VAL  N  ', ' B 192  GLN HE22', -0.471, (18.87, -2.253, -2.434)), (' A 224  THR HG22', ' A 225  THR  N  ', -0.47, (19.022, -12.111, 43.468)), (' A   6  MET  HE1', ' B 141  LEU  O  ', -0.469, (5.823, -10.907, 13.88)), (' A  -1  ALA  HB1', ' B 141  LEU HD11', -0.468, (12.759, -14.253, 15.89)), (' B  27  LEU HD13', ' B  39  PRO  HD2', -0.468, (7.202, -13.211, -2.354)), (' A  46  SER  HA ', ' A  49  MET  HE2', -0.466, (-30.205, 7.552, 29.71)), (' A  52  PRO  HD2', ' A 188  ARG  HG2', -0.463, (-27.369, 0.766, 37.252)), (' A   6  MET  HE2', ' B 142  ASN HD22', -0.461, (5.154, -8.242, 14.234)), (' B 108  PRO  HA ', ' B 130  MET  HG2', -0.459, (7.676, 6.591, 3.737)), (' B 211  ALA  HB1', ' B 216  ASP  HB3', -0.457, (-2.638, 16.038, 25.618)), (' B 226  THR  OG1', ' B 229  ASP  HB2', -0.455, (12.306, 31.18, 12.122)), (' A 291  PHE  CE2', ' A 296  VAL HG22', -0.453, (8.31, -11.918, 24.438)), (' A 102  LYS  NZ ', ' A 156  CYS  SG ', -0.45, (-10.126, -22.369, 20.941)), (' A 287  LEU HD12', ' A 404  DMS  H22', -0.447, (10.825, 0.678, 33.274)), (' B  33  ASP  O  ', ' B  94  ALA  HA ', -0.443, (-8.532, -15.025, -9.66)), (' A   6  MET  HE1', ' B 142  ASN  HA ', -0.441, (5.481, -9.886, 13.235)), (' B  46  SER  HA ', ' B  49  MET  SD ', -0.433, (22.029, -19.189, -2.84)), (' B 101  TYR  HA ', ' B 157  VAL  O  ', -0.432, (-8.063, -1.535, -2.626)), (' A 136  ILE HD13', ' A 161  TYR  CE1', -0.432, (-11.933, -4.621, 29.02)), (' A  40  ARG  HG3', ' A  54  TYR  CE1', -0.429, (-28.402, -4.34, 31.58)), (' B 108  PRO  HA ', ' B 130  MET  CG ', -0.429, (7.75, 6.53, 3.984)), (' A 230  PHE  CD1', ' A 265  CYS  HB3', -0.427, (13.224, -8.467, 41.099)), (' A   0  MET  HB3', ' A   0  MET  HE2', -0.427, (11.343, -9.32, 19.696)), (' B  70  ALA  HB1', ' B 505  PEG  H41', -0.424, (-6.947, -19.478, -0.827)), (' B 242  LEU HD12', ' B 246  HIS  HB2', -0.421, (5.413, 20.043, 7.39)), (' B 294  PHE  O  ', ' B 298  ARG  HB2', -0.421, (-7.827, 9.504, 10.135)), (' A  54  TYR  HB3', ' A  82  MET  HE1', -0.42, (-31.252, -7.041, 32.988)), (' A  63  ASN  HB3', ' A  77  VAL HG12', -0.419, (-37.203, -11.827, 19.382)), (' B 131  ARG  HG2', ' B 135  THR  O  ', -0.416, (10.278, 2.978, 8.47)), (' B 266  ALA  HA ', ' B 269  LYS  HE3', -0.414, (8.716, 26.71, 19.351)), (' A   9  PRO  HD3', ' B 124  GLY  HA2', -0.413, (-2.209, -11.669, 13.399)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.413, (-22.048, -17.961, 13.086)), (' A  -1  ALA  O  ', ' B 139  SER  HB2', -0.413, (12.947, -10.257, 14.951)), (' B 269  LYS  HB3', ' B 269  LYS  HE3', -0.411, (9.525, 26.141, 19.53)), (' B  28  ASN  HB2', ' B 146  GLY  HA3', -0.411, (4.585, -12.966, 1.179)), (' B  84  ASN  HB2', ' B 179  GLY  HA3', -0.41, (8.392, -3.504, -9.769)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.408, (-0.755, -7.757, 32.262)), (' A 253  LEU HD21', ' A 296  VAL HG12', -0.407, (10.731, -15.941, 26.011)), (' A  37  TYR  CE2', ' A  88  LYS  HD3', -0.405, (-24.63, -15.881, 25.039)), (' A  35  VAL HG13', ' A  37  TYR  CE1', -0.404, (-24.45, -16.679, 20.836)), (' B 169  THR  O  ', ' B 169  THR HG22', -0.402, (17.733, -1.775, 13.217)), (' B 130  MET  HE1', ' B 182  TYR  CD1', -0.402, (7.723, 3.269, 0.176)), (' A 165  MET  CE ', ' A 187  ASP  HA ', -0.4, (-22.439, -0.245, 33.242)), (' B  75  LEU  HA ', ' B  75  LEU HD23', -0.4, (-5.144, -23.403, -7.918))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
