# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 276 ', 'MET', 0.016570275951367133, (0.5140000000000047, -3.9349999999999996, 37.627999999999986)), ('B', ' 303 ', 'VAL', 0.017556060552069843, (7.476000000000003, 24.487999999999996, 28.277))]
data['omega'] = []
data['rota'] = [('A', '   4 ', 'ARG', 4.821975057366386e-05, (20.517999999999994, -3.480999999999999, 21.195999999999994)), ('A', '   5 ', 'LYS', 0.0, (19.278999999999996, -0.812, 18.767)), ('A', '   6 ', 'MET', 0.0, (22.662999999999997, 0.062, 17.17899999999999)), ('A', '  56 ', 'ASP', 0.0873667371818365, (8.01, 34.263, -3.738)), ('A', '  97 ', 'LYS', 0.0006982095991854111, (35.759, 15.89, 3.9409999999999994)), ('A', ' 166 ', 'GLU', 0.08958764379980497, (6.584000000000001, 16.899, 13.114999999999997)), ('A', ' 197 ', 'ASP', 0.004460883702302047, (0.3829999999999991, 1.757, 8.732)), ('A', ' 217 ', 'ARG', 0.12027461057535849, (14.341999999999999, -19.426, 22.375)), ('A', ' 269 ', 'LYS', 0.06613115693928473, (1.6479999999999997, -16.814, 14.366)), ('A', ' 270 ', 'GLU', 0.03848196370999362, (1.301000000000001, -18.228999999999992, 17.930999999999997)), ('A', ' 288 ', 'GLU', 0.10784159711156587, (10.17, -5.075, 17.906)), ('A', ' 298 ', 'ARG', 0.18146244535910266, (25.758, -6.469, 10.799999999999997)), ('A', ' 306 ', 'GLN', 0.045307288049824174, (36.058, 2.085, 7.823)), ('B', '   1 ', 'SER', 0.13070754705576032, (9.232, 15.670000000000002, 20.31299999999999)), ('B', '   6 ', 'MET', 0.10470052297092297, (20.312999999999995, 8.589, 21.536999999999992)), ('B', '  87 ', 'LEU', 0.0670393739527477, (48.26499999999999, -1.7639999999999998, 28.573)), ('B', ' 102 ', 'LYS', 0.0, (39.55899999999998, 13.714000000000002, 29.378999999999994)), ('B', ' 128 ', 'CYS', 0.060165270478856926, (24.448000000000004, 2.495, 27.64099999999999)), ('B', ' 269 ', 'LYS', 0.0, (5.183000000000003, 2.598, 45.29699999999999)), ('B', ' 270 ', 'GLU', 0.2933505780978871, (1.584999999999999, 1.5909999999999997, 44.598)), ('B', ' 271 ', 'LEU', 0.04805580072071677, (2.7539999999999996, 0.15399999999999997, 41.253)), ('B', ' 276 ', 'MET', 0.0, (0.5140000000000047, -3.9349999999999996, 37.627999999999986)), ('B', ' 279 ', 'ARG', 0.08168363290889932, (-1.1629999999999985, -1.9040000000000001, 31.677999999999997))]
data['cbeta'] = [('A', '   4 ', 'ARG', ' ', 0.317285287962533, (21.432, -2.483, 21.88)), ('A', '  97 ', 'LYS', ' ', 0.3255648869829194, (36.05399999999999, 16.136, 5.428)), ('A', ' 128 ', 'CYS', ' ', 0.3890560066701546, (14.567999999999998, 5.993999999999998, 12.254)), ('A', ' 140 ', 'PHE', ' ', 0.32971736645044, (13.324999999999992, 15.968999999999996, 15.634999999999998)), ('A', ' 166 ', 'GLU', ' ', 0.2995360490279496, (6.721000000000001, 17.49, 14.514999999999997)), ('A', ' 225 ', 'THR', ' ', 0.25219537480383913, (2.6449999999999987, -22.116999999999997, 9.419)), ('B', '  47 ', 'GLU', ' ', 0.25805370079581974, (45.38799999999999, -22.601, 28.329)), ('B', '  87 ', 'LEU', ' ', 0.28258323278621134, (48.294, -2.7519999999999993, 27.416999999999994)), ('B', ' 101 ', 'TYR', ' ', 0.25065525886921586, (40.7, 13.051999999999996, 25.087))]
data['probe'] = [(' A 109  GLY  HA2', ' A 200  ILE HD13', -0.83, (9.497, -2.072, 7.988)), (' B  47  GLU  HG3', ' B  47  GLU  O  ', -0.824, (45.964, -22.093, 29.981)), (' B  38  CYS  HA ', ' B 162  MET  HE1', -0.804, (42.132, -0.912, 24.741)), (' B 100  LYS  HB2', ' B 156  CYS  HA ', -0.782, (37.313, 17.66, 23.306)), (' A  53  ASN  ND2', ' A  56  ASP  HB2', -0.779, (5.874, 33.03, -3.766)), (' B 102  LYS  HE2', ' B 104  VAL HG12', -0.766, (36.832, 13.672, 32.909)), (' A 235  MET  SD ', ' A 241  PRO  HG3', -0.751, (-1.63, -10.493, 3.544)), (' B 146  GLY  HA2', ' B 162  MET  HE2', -0.745, (40.257, -1.098, 24.501)), (' A 220  LEU HD21', ' A 264  MET  HE1', -0.722, (12.722, -20.128, 15.976)), (' B  37  TYR  CE2', ' B  88  LYS  HD3', -0.704, (47.836, 4.833, 28.618)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.699, (42.032, -0.134, 32.502)), (' A  49  MET  HA ', ' A  52  PRO  HG3', -0.692, (4.087, 28.838, 5.7)), (' A 165  MET  HB3', ' C  -1  LEU HD23', -0.688, (8.002, 20.763, 8.289)), (' A 129  ALA  HB2', ' A 290  GLU  HG2', -0.668, (12.031, 0.598, 12.645)), (' A 270  GLU  HG3', ' A 270  GLU  O  ', -0.664, (1.933, -18.44, 19.877)), (' A 133  ASN  ND2', ' A 194  ALA  HB1', -0.656, (0.79, 7.728, 9.77)), (' B  10  SER  O  ', ' B  14  GLU  HG3', -0.652, (33.463, 8.475, 15.78)), (' A 231  ASN  O  ', ' A 235  MET  HG2', -0.651, (-2.395, -12.742, 5.652)), (' B 212  VAL HG13', ' B 217  ARG  NH1', -0.65, (0.583, 13.203, 31.993)), (' A  83  GLN  OE1', ' A  88  LYS  NZ ', -0.636, (18.272, 17.914, -6.146)), (' A  53  ASN HD22', ' A  56  ASP  H  ', -0.635, (6.822, 32.086, -3.531)), (' B 279  ARG  CG ', ' B 279  ARG HH21', -0.63, (-4.246, -2.058, 33.212)), (' B 129  ALA  HB3', ' B 290  GLU  HG2', -0.628, (21.279, 2.42, 31.48)), (' A 197  ASP  C  ', ' A 197  ASP  OD1', -0.627, (1.673, 0.787, 9.585)), (' A  39  PRO  HG2', ' A 145  SER  HB3', -0.615, (14.62, 21.285, 7.53)), (' A  30  LEU HD22', ' A 148  VAL HG11', -0.605, (21.397, 14.968, 4.272)), (' A 246  HIS  HA ', ' A 249  ILE HD12', -0.605, (11.681, -10.794, 1.775)), (' B 281  ILE  N  ', ' B 281  ILE HD12', -0.594, (3.177, 1.101, 31.232)), (' A 129  ALA  CB ', ' A 290  GLU  HG2', -0.562, (12.202, 1.221, 12.107)), (' B  39  PRO  HD3', ' B 162  MET  HE2', -0.561, (41.309, -2.307, 24.964)), (' A 146  GLY  HA2', ' A 162  MET  HE2', -0.558, (18.198, 19.07, 6.27)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.556, (13.784, 17.996, -1.013)), (' B 127  GLN  HA ', ' B 127  GLN  OE1', -0.554, (24.851, 6.027, 24.425)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.551, (32.001, 3.279, 15.388)), (' A 133  ASN  HB3', ' A 197  ASP  HB3', -0.536, (1.286, 4.054, 8.439)), (' B 279  ARG  HG2', ' B 279  ARG HH21', -0.534, (-4.016, -2.416, 32.972)), (' A  22  CYS  SG ', ' A  61  LYS  HD2', -0.531, (16.591, 33.823, 2.995)), (' A 286  LEU HD11', ' B 284  SER  HA ', -0.525, (5.849, -2.072, 25.27)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.518, (47.462, -8.627, 28.832)), (' A 139  SER  HB2', ' B   4  ARG  HG2', -0.516, (13.275, 10.248, 19.572)), (' A 106  ILE HG23', ' A 160  CYS  HB2', -0.514, (16.277, 5.972, 1.827)), (' A 166  GLU  OE1', ' B   1  SER  N  ', -0.513, (8.57, 16.111, 18.926)), (' A  95  ASN  HB3', ' A  98  THR  HB ', -0.511, (32.576, 17.79, 0.581)), (' A  53  ASN HD22', ' A  56  ASP  HB2', -0.509, (6.072, 32.866, -2.785)), (' A 175  THR HG22', ' A 181  PHE  CD1', -0.507, (9.108, 16.492, 1.721)), (' B 279  ARG  CG ', ' B 279  ARG  NH2', -0.504, (-3.873, -2.388, 33.901)), (' B 233  VAL HG13', ' B 237  TYR  HE1', -0.503, (7.146, -1.945, 47.506)), (' A 205  LEU HD22', ' A 264  MET  HB3', -0.493, (10.064, -16.043, 11.321)), (' B  38  CYS  HA ', ' B 162  MET  CE ', -0.492, (42.027, -1.05, 25.24)), (' A  53  ASN  ND2', ' A  56  ASP  H  ', -0.491, (6.387, 32.03, -3.595)), (' A 108  PRO  HB3', ' A 132  PRO  HA ', -0.49, (5.644, 1.601, 4.881)), (' B 201  THR HG21', ' B 230  PHE  HE2', -0.488, (12.729, 4.564, 43.914)), (' B  37  TYR  HE2', ' B  88  LYS  HD3', -0.488, (47.132, 5.392, 29.217)), (' B 218  TRP  CZ3', ' B 276  MET  HG3', -0.487, (-0.96, 0.098, 36.288)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.486, (14.024, 17.835, 14.75)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.48, (21.421, 4.209, 36.252)), (' A 220  LEU  CD2', ' A 264  MET  HE1', -0.479, (12.248, -20.289, 16.546)), (' A  32  LEU HD13', ' A 101  TYR  CD2', -0.475, (25.946, 13.631, -1.103)), (' B  36  VAL  O  ', ' B  89  LEU  N  ', -0.472, (49.364, 1.788, 25.0)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.471, (31.034, 4.747, 24.746)), (' B  27  LEU HD13', ' B  39  PRO  HD2', -0.467, (42.197, -4.697, 23.871)), (' A  63  ASN  HB3', ' A  77  VAL  O  ', -0.467, (26.039, 33.378, -3.296)), (' A 163  HIS  NE2', ' C   0  GLN  OE1', -0.466, (11.022, 16.982, 12.939)), (' B 213  ILE HD13', ' B 300  CYS  SG ', -0.464, (8.613, 15.52, 28.861)), (' A 111  THR HG23', ' A 292  THR HG23', -0.463, (14.998, -1.817, 9.125)), (' A  41  HIS  CE1', ' C  -1  LEU HD22', -0.461, (9.644, 22.512, 7.589)), (' B 165  MET  CE ', ' B 185  PHE  HB3', -0.461, (34.9, -8.703, 35.879)), (' B  96  PRO  HD2', ' B  97  LYS  NZ ', -0.459, (46.629, 10.561, 13.044)), (' B 163  HIS  NE2', ' B 172  HIS  HB3', -0.457, (31.279, -6.158, 27.672)), (' B 204  VAL HG23', ' B 289  ASP  HB3', -0.454, (13.879, 2.262, 36.054)), (' A 139  SER  OG ', ' B   6  MET  HE1', -0.454, (15.734, 12.03, 20.093)), (' A 166  GLU  OE1', ' B   1  SER  OG ', -0.453, (7.154, 16.337, 19.207)), (' A 169  THR  OG1', ' A 171  VAL HG22', -0.452, (2.418, 10.996, 14.254)), (' A 133  ASN  N  ', ' A 197  ASP  HB2', -0.451, (2.618, 3.345, 7.331)), (' A 133  ASN  H  ', ' A 197  ASP  HB2', -0.451, (2.858, 3.568, 7.718)), (' A   9  PRO  HG2', ' B 122  PRO  HB2', -0.449, (31.581, 2.476, 12.411)), (' A 165  MET  HB3', ' C  -1  LEU  CD2', -0.446, (7.761, 20.874, 8.294)), (' A 240  GLU  N  ', ' A 240  GLU  OE1', -0.445, (2.626, -5.976, 7.487)), (' A 165  MET  CE ', ' A 185  PHE  HB3', -0.443, (4.032, 16.032, 5.874)), (' B 208  LEU  HB3', ' B 264  MET  CE ', -0.442, (5.767, 8.659, 37.054)), (' B 114  VAL HG11', ' B 140  PHE  CZ ', -0.44, (30.166, -1.16, 24.114)), (' B 112  PHE  HZ ', ' B 136  ILE HG21', -0.437, (28.978, 0.573, 30.06)), (' B  92  ASP  OD1', ' B  93  THR  N  ', -0.437, (54.916, 6.653, 15.624)), (' B   8  PHE  HB3', ' B 152  ILE HD12', -0.436, (29.4, 12.339, 20.981)), (' B 232  LEU  HA ', ' B 235  MET  HE1', -0.436, (12.474, -0.485, 53.352)), (' A 190  THR  O  ', ' C  -3  ALA  N  ', -0.434, (-0.43, 20.651, 11.367)), (' B  52  PRO  HD2', ' B 188  ARG  HD2', -0.433, (44.1, -14.504, 37.238)), (' B  47  GLU  CG ', ' B  47  GLU  O  ', -0.432, (46.197, -22.198, 29.977)), (' A 105  ARG  NH2', ' A 182  TYR  HA ', -0.432, (8.166, 9.828, -0.146)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.43, (25.933, 13.882, 14.103)), (' B 240  GLU  HG3', ' B 241  PRO  HD2', -0.428, (20.178, 2.447, 45.283)), (' B 167  LEU HD12', ' B 171  VAL HG23', -0.427, (28.167, -9.019, 33.65)), (' B 103  PHE  CE2', ' B 177  LEU  HB3', -0.425, (42.297, 6.905, 30.08)), (' A 286  LEU HD21', ' B 283  GLY  O  ', -0.424, (4.343, -1.226, 24.069)), (' A  43  ILE HD12', ' A  57  LEU  HB3', -0.423, (11.173, 32.096, 0.778)), (' A  37  TYR  O  ', ' A 162  MET  HE1', -0.423, (20.368, 19.941, 3.412)), (' B 106  ILE HG23', ' B 160  CYS  HB2', -0.419, (32.306, 7.284, 32.87)), (' B 212  VAL HG13', ' B 217  ARG HH12', -0.419, (0.758, 13.345, 31.872)), (' A   6  MET  HB3', ' A   6  MET  HE3', -0.417, (24.004, -0.91, 15.108)), (' A 190  THR  O  ', ' C  -4  SER  HA ', -0.416, (-1.335, 20.938, 10.996)), (' A 276  MET  HE2', ' A 279  ARG  O  ', -0.415, (7.583, -11.283, 26.04)), (' B 225  THR HG23', ' B 229  ASP  HB3', -0.415, (6.353, 6.953, 51.348)), (' A 126  TYR  CD1', ' B   6  MET  HE2', -0.414, (17.789, 10.382, 18.091)), (' C  -1  LEU  HA ', ' C  -1  LEU HD23', -0.413, (8.042, 21.294, 9.84)), (' A 102  LYS  HE2', ' A 158  SER  OG ', -0.413, (23.668, 3.761, -0.597)), (' A  48  ASP  O  ', ' A  52  PRO  HB3', -0.413, (5.303, 30.241, 4.66)), (' B  58  LEU HD22', ' B  82  MET  HE2', -0.41, (52.663, -5.044, 33.098)), (' A 217  ARG  CG ', ' A 217  ARG  O  ', -0.408, (14.265, -21.516, 22.402)), (' A   4  ARG  HG2', ' B 139  SER  HB2', -0.407, (23.726, -4.518, 21.997)), (' A   9  PRO  CG ', ' B 122  PRO  HB2', -0.405, (31.834, 2.482, 12.939)), (' A 127  GLN  O  ', ' B   4  ARG  NH2', -0.404, (15.248, 4.554, 16.388)), (' A 105  ARG HH22', ' A 182  TYR  HA ', -0.404, (8.166, 10.323, -0.125)), (' A   4  ARG  HD3', ' A   4  ARG HH21', -0.403, (23.316, -2.242, 25.125)), (' A  80  HIS  HB3', ' A  89  LEU HD23', -0.401, (20.993, 28.87, -2.527)), (' B  34  ASP  O  ', ' B  90  LYS  HD3', -0.4, (53.764, 6.384, 22.392)), (' A  92  ASP  OD1', ' A  93  THR  N  ', -0.4, (33.224, 27.963, -2.418)), (' B 302  GLY  O  ', ' B 303  VAL  HB ', -0.4, (6.635, 23.225, 26.172))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
