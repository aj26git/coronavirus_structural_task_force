# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 154 ', 'TYR', 0.028963535557476355, (5.068999999999998, 10.668, 36.504999999999995))]
data['omega'] = []
data['rota'] = [('A', '  67 ', 'LEU', 0.0726590715217783, (-4.52, 19.035, 17.82)), ('A', '  76 ', 'ARG', 0.0037979717811962733, (-0.499000000000001, 25.796, 16.035)), ('A', ' 141 ', 'LEU', 0.0, (0.6479999999999979, -1.051, 23.047)), ('A', ' 188 ', 'ARG', 0.001575956529210487, (-3.793, -0.613, 6.046999999999998)), ('A', ' 216 ', 'ASP', 0.08126581831296727, (32.386, -16.896000000000008, 29.666)), ('A', ' 217 ', 'ARG', 0.014519851959848642, (34.75099999999999, -19.263, 27.731)), ('A', ' 286 ', 'LEU', 0.20521939246375284, (19.802999999999997, -19.253, 24.101)), ('B', '  22 ', 'CYS', 0.2563340029343826, (40.34100000000001, 14.494000000000005, 42.848)), ('B', '  25 ', 'THR', 0.26536988583375837, (40.934999999999995, 9.794000000000004, 39.639)), ('B', '  73 ', 'VAL', 0.003150532575091347, (31.009, 24.512, 32.674)), ('B', ' 198 ', 'THR', 0.06710794906498557, (17.878999999999998, -16.646, 45.461999999999996)), ('B', ' 216 ', 'ASP', 0.12165273160630902, (2.131999999999999, -17.631, 25.648)), ('B', ' 303 ', 'VAL', 0.06250936810340553, (-5.030000000000003, -4.787, 33.622))]
data['cbeta'] = []
data['probe'] = [(' A  86  VAL HG13', ' A 179  GLY  HA2', -0.743, (6.655, 8.097, 6.49)), (' B 256  GLN  HG2', ' B 303  VAL HG12', -0.583, (-4.399, -7.725, 31.963)), (' A 225  THR HG22', ' A 226  THR  O  ', -0.546, (33.807, -23.435, 8.126)), (' A 151  ASN  OD1', ' A 401   CL CL  ', -0.544, (22.743, 1.62, 17.328)), (' A  86  VAL HG13', ' A 179  GLY  CA ', -0.535, (7.055, 8.174, 6.112)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.511, (26.882, 7.062, 49.388)), (' A 286  LEU HD11', ' A 704  HOH  O  ', -0.503, (17.001, -14.975, 24.987)), (' A 225  THR HG21', ' A 230  PHE  HB2', -0.501, (32.486, -23.036, 9.788)), (' B 210  ALA  HB2', ' B 296  VAL HG13', -0.488, (3.509, -8.73, 32.598)), (' B 297  VAL HG11', ' B 305  PHE  CD2', -0.487, (-1.624, -1.478, 36.604)), (' A 217  ARG  HG2', ' A 220  LEU HD12', -0.477, (37.482, -19.485, 25.96)), (' A 126  TYR  HE1', ' A 128  CYS  SG ', -0.457, (11.996, -2.66, 20.931)), (' A 257  THR  HB ', ' A 259  ILE HD12', -0.457, (38.867, -14.369, 22.15)), (' B 190  THR HG21', ' B 784  HOH  O  ', -0.451, (38.849, -8.463, 53.208)), (' A 140  PHE  O  ', ' B   1  SER  N  ', -0.418, (1.632, -4.156, 21.526)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.414, (-1.476, 9.297, 13.48)), (' A  52  PRO  HG2', ' A  54  TYR  CE2', -0.412, (-4.566, 4.093, 4.576)), (' A 210  ALA  O  ', ' A 214  ASN  ND2', -0.41, (31.691, -9.675, 27.446)), (' B 297  VAL HG22', ' B 303  VAL HG21', -0.41, (-1.623, -5.287, 35.673)), (' A 126  TYR  CE1', ' A 128  CYS  SG ', -0.406, (12.578, -2.525, 20.803)), (' A 125  VAL HG11', ' B 125  VAL HG11', -0.406, (16.795, 4.603, 27.942)), (' A 102  LYS  HG3', ' A 156  CYS  SG ', -0.401, (22.956, 13.152, 12.538))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
