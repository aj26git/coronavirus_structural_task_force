# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 154 ', 'TYR', 0.02813688927762757, (-14.581000000000003, 2.515, 3.1020000000000008))]
data['omega'] = []
data['rota'] = [('A', ' 141 ', 'LEU', 0.00014671452451016113, (-16.308000000000007, 6.668, 20.586)), ('A', ' 196 ', 'THR', 0.10706105605336773, (-4.242, 2.8060000000000005, 40.36200000000001)), ('B', '  45 ', 'THR', 0.025166263618806507, (18.913000000000007, -19.706, -6.378000000000002)), ('B', ' 153 ', 'ASP', 0.003420211103276902, (-10.847, 3.4059999999999993, 2.7800000000000002)), ('B', ' 154 ', 'TYR', 0.0021500625483788396, (-14.581000000000003, 2.515, 3.1020000000000008)), ('B', ' 155 ', 'ASP', 0.0014459311796670088, (-14.516000000000004, -1.0570000000000002, 1.708)), ('B', ' 196 ', 'THR', 0.2161376563987081, (20.41, 7.254, 9.7))]
data['cbeta'] = [('A', ' 142 ', 'ASN', ' ', 0.317313954995485, (-19.728, 6.066, 23.636)), ('B', ' 155 ', 'ASP', ' ', 0.4447009873095147, (-15.989, -1.398, 1.338))]
data['probe'] = [(' A 102  LYS  NZ ', ' A 156  CYS  SG ', -0.768, (-9.831, -23.077, 20.375)), (' B  22  CYS  SG ', ' B 550  HOH  O  ', -0.685, (10.967, -20.57, -10.594)), (' A 504  DMS  S  ', ' A 657  HOH  O  ', -0.656, (-1.917, -2.125, 18.524)), (' A   6  MET  HB2', ' A 508  DMS  H11', -0.634, (0.865, -10.02, 15.812)), (' B  69  GLN  HG2', ' B  74  GLN  HG3', -0.595, (-0.268, -25.294, -3.535)), (' B  50  LEU  O  ', ' B 188  ARG  HD3', -0.591, (24.361, -9.133, -6.48)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.586, (7.221, -4.696, -7.4)), (' A  30  LEU HD22', ' A 148  VAL HG11', -0.571, (-17.792, -10.963, 20.642)), (' B 136  ILE  HB ', ' B 172  HIS  CD2', -0.555, (8.608, -2.709, 6.901)), (' A   0  MET  SD ', ' A 210  ALA  HB1', -0.528, (12.094, -11.366, 22.762)), (' A 169  THR HG23', ' A 171  VAL HG22', -0.526, (-9.614, 4.139, 33.058)), (' B  49  MET  HE2', ' B 189  GLN  HG2', -0.521, (19.783, -12.312, -1.337)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.518, (-21.503, -11.067, 29.536)), (' B  27  LEU HD21', ' B  42  VAL  HB ', -0.516, (9.732, -15.194, -3.862)), (' A  45  THR  OG1', ' A  47  GLU  HG2', -0.507, (-34.373, 6.0, 30.268)), (' A  58  LEU HD22', ' A  82  MET  HE2', -0.503, (-32.606, -10.432, 31.092)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.501, (-16.715, -6.155, 14.861)), (' B  84  ASN  HB2', ' B 179  GLY  HA3', -0.499, (8.253, -3.199, -9.894)), (' A 264  MET  HE3', ' A 267  SER  HB2', -0.497, (17.814, -8.262, 34.048)), (' B 142  ASN  O  ', ' B 501  HOH  O  ', -0.489, (6.234, -8.366, 8.657)), (' A 279  ARG  NH1', ' A 602  HOH  O  ', -0.479, (20.167, 5.82, 30.301)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.476, (-23.73, -4.436, 22.812)), (' A 256  GLN  NE2', ' A 300  CYS  O  ', -0.474, (13.632, -20.371, 23.351)), (' A 235  MET  SD ', ' A 241  PRO  HG3', -0.471, (3.578, -5.452, 45.745)), (' A   0  MET  HB3', ' A 214  ASN  ND2', -0.469, (14.601, -11.363, 19.737)), (' B  45  THR HG23', ' B  48  ASP  HB2', -0.468, (20.284, -18.54, -8.975)), (' B 298  ARG  NH2', ' B 401  DMS  H22', -0.46, (-5.915, 4.378, 10.15)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.457, (-21.714, -18.463, 12.804)), (' A  78  ILE HG13', ' A  90  LYS  HG2', -0.453, (-33.795, -18.367, 18.604)), (' B 259  ILE HG21', ' B 264  MET  HE2', -0.45, (-1.056, 23.38, 18.854)), (' A 246  HIS  HA ', ' A 249  ILE HD12', -0.448, (4.475, -16.936, 36.52)), (' B  27  LEU HD13', ' B  39  PRO  HD2', -0.446, (7.23, -13.137, -2.328)), (' B 111  THR HG22', ' B 129  ALA  HB2', -0.443, (3.173, 5.511, 10.404)), (' B 209  TYR  O  ', ' B 213  ILE HG13', -0.443, (-6.281, 17.5, 19.064)), (' A  61  LYS  HA ', ' A  65  ASN HD22', -0.443, (-39.492, -5.903, 24.395)), (' B 269  LYS  HG2', ' B 273  GLN  OE1', -0.441, (13.075, 24.55, 20.129)), (' B 130  MET  HB2', ' B 130  MET  HE2', -0.44, (6.063, 3.683, 4.185)), (' A 166  GLU  OE2', ' A 172  HIS  NE2', -0.437, (-13.673, 3.359, 25.854)), (' A 114  VAL  HB ', ' A 126  TYR  CE1', -0.433, (-8.35, -3.609, 21.696)), (' B  69  GLN  NE2', ' B  74  GLN  OE1', -0.432, (-1.108, -26.731, -1.606)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.432, (6.243, 8.762, 8.83)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.431, (-12.711, -5.094, 12.852)), (' B 211  ALA  HB1', ' B 216  ASP  HB3', -0.43, (-2.626, 15.942, 25.457)), (' A  97  LYS  HB2', ' A  97  LYS  HE3', -0.426, (-20.762, -15.251, 9.38)), (' B 167  LEU HD12', ' B 171  VAL HG23', -0.425, (15.507, -2.301, 7.423)), (' B 207  TRP  CD2', ' B 288  GLU  HB3', -0.425, (2.287, 10.213, 19.646)), (' A 211  ALA  HB1', ' A 216  ASP  HB3', -0.422, (17.994, -7.0, 24.44)), (' A 124  GLY  HA2', ' B   9  PRO  HD3', -0.419, (-9.474, -1.688, 11.539)), (' A 504  DMS  H22', ' B 127  GLN  H  ', -0.418, (0.406, -2.442, 14.751)), (' A  40  ARG  HG3', ' A  54  TYR  CE1', -0.417, (-28.145, -4.595, 31.377)), (' A  55  GLU  OE1', ' A 601  HOH  O  ', -0.417, (-29.987, -9.307, 37.809)), (' A 186  VAL HG23', ' A 188  ARG  HB3', -0.414, (-22.612, -0.152, 37.836)), (' A 119  ASN  ND2', ' A 502  PEG  H21', -0.413, (-26.465, 2.348, 13.432)), (' B 121  SER  HA ', ' B 122  PRO  HD3', -0.413, (-2.414, -17.688, 5.722)), (' A  49  MET  HE2', ' A 165  MET  HE1', -0.412, (-23.057, 1.34, 31.15)), (' A 187  ASP  N  ', ' A 187  ASP  OD1', -0.412, (-23.368, -3.662, 35.005)), (' A  51  ASN  O  ', ' A 603  HOH  O  ', -0.411, (-33.203, 2.045, 37.579)), (' A 503  PEG  H11', ' A 503  PEG  H32', -0.41, (-0.619, 2.743, 27.712)), (' B  88  LYS  NZ ', ' B 506  HOH  O  ', -0.41, (2.287, -5.022, -14.983)), (' A  95  ASN  OD1', ' A  97  LYS  HE3', -0.41, (-21.683, -14.879, 9.291)), (' A  70  ALA  O  ', ' A  73  VAL HG22', -0.408, (-26.45, -8.979, 6.974)), (' A 118  TYR  CE2', ' A 144  SER  HB3', -0.408, (-16.007, 2.058, 19.252)), (' A 130  MET  HE3', ' A 134  PHE  HA ', -0.404, (-8.542, -6.454, 34.43)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.4, (-26.637, -2.523, 23.45))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
