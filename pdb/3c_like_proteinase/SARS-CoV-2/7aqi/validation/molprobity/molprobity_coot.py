# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   1 ', 'SER', 0.030007203478492395, (-2.794999999999998, 5.271, -16.474)), ('A', '   5 ', 'LYS', 0.0, (2.221, 4.658, -3.709)), ('A', '  24 ', 'THR', 0.03999102275557245, (4.838000000000001, -11.645999999999997, 29.209)), ('A', '  60 ', 'ARG', 0.05025128505313636, (18.06, -17.019, 32.283)), ('A', ' 217 ', 'ARG', 0.0, (3.308, 18.90299999999999, -16.552)), ('A', ' 240 ', 'GLU', 0.1716456645376192, (20.15800000000001, 15.736999999999997, -0.229)), ('A', ' 252 ', 'PRO', 0.02615396498407397, (16.46, 6.064, -18.305))]
data['cbeta'] = []
data['probe'] = [(' A  24  THR HG23', ' A 697  HOH  O  ', -0.905, (7.598, -10.83, 30.073)), (' A   4  ARG  H  ', ' A 299 BGLN HE22', -0.88, (1.691, 4.248, -8.694)), (' A   4  ARG  H  ', ' A 299 AGLN HE22', -0.879, (0.575, 4.683, -8.975)), (' A 166  GLU  HG3', ' A 172 BHIS  CD2', -0.776, (7.473, 4.567, 15.386)), (' A 166  GLU  HG3', ' A 172 AHIS  CD2', -0.769, (7.398, 4.878, 15.886)), (' A 142 DASN  HA ', ' A 402  DMS  H23', -0.675, (4.414, -1.433, 19.716)), (' A 142 CASN  HA ', ' A 402  DMS  H23', -0.654, (4.394, -1.432, 19.728)), (' A   4  ARG  H  ', ' A 299 BGLN  NE2', -0.641, (1.249, 4.37, -9.348)), (' A 154 ATYR  O  ', ' A 305 APHE  HB3', -0.616, (7.755, -12.029, -8.248)), (' A 142 BASN  HA ', ' A 402  DMS  H23', -0.607, (4.345, -1.44, 19.747)), (' A 154 BTYR  O  ', ' A 305 BPHE  HB3', -0.607, (7.77, -12.044, -8.269)), (' A 142 AASN  HA ', ' A 402  DMS  H23', -0.606, (4.346, -1.44, 19.749)), (' A  40 AARG  HA ', ' A  87 ALEU  HG ', -0.557, (16.074, -11.25, 20.712)), (' A 188  ARG  HD3', ' A 661  HOH  O  ', -0.55, (21.736, -1.743, 25.638)), (' A 166  GLU  HG3', ' A 172 BHIS  HD2', -0.544, (7.85, 3.726, 15.753)), (' A  40 BARG  HA ', ' A  87 BLEU  HG ', -0.539, (16.081, -11.257, 20.718)), (' A 300  CYS  HB3', ' A 401 BQEL  H19', -0.496, (6.515, 3.923, -16.893)), (' A 142 DASN  HA ', ' A 402  DMS  C2 ', -0.479, (4.612, -1.212, 20.415)), (' A  24  THR HG23', ' A 525  HOH  O  ', -0.478, (6.786, -9.853, 29.945)), (' A 142 CASN  HA ', ' A 402  DMS  C2 ', -0.458, (4.592, -1.211, 20.427)), (' A 274 AASN  C  ', ' A 405  IMD  H5 ', -0.449, (6.795, 29.685, -4.226)), (' A 274 BASN  C  ', ' A 405  IMD  H5 ', -0.44, (6.797, 30.056, -4.0)), (' A 256  GLN  NE2', ' A 401 BQEL H24B', -0.432, (7.399, 5.501, -21.951)), (' A 165 BMET  SD ', ' A 187  ASP  HA ', -0.426, (16.095, -0.008, 20.259)), (' A 131  ARG  HD3', ' A 137 BLYS  HD2', -0.418, (10.759, 9.541, 6.116)), (' A 165 BMET  HB2', ' A 165 BMET  HE2', -0.415, (13.756, 1.913, 17.415)), (' A  31  TRP  CD2', ' A  95  ASN  HB2', -0.414, (8.943, -21.374, 8.621)), (' A 155  ASP  HB3', ' A 306 BGLN  HB3', -0.411, (9.047, -15.946, -8.142)), (' A 142 AASN  HA ', ' A 402  DMS  C2 ', -0.407, (4.681, -1.443, 20.438)), (' A 142 BASN  HA ', ' A 402  DMS  C2 ', -0.407, (4.68, -1.443, 20.436)), (' A  22  CYS  SG ', ' A  61  LYS  HD2', -0.404, (12.713, -15.673, 27.368)), (' A 298  ARG  HG3', ' A 303 AVAL  HB ', -0.4, (8.42, -3.636, -11.792)), (' A 298  ARG  HG3', ' A 303 BVAL  HB ', -0.4, (8.42, -3.636, -11.792))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
