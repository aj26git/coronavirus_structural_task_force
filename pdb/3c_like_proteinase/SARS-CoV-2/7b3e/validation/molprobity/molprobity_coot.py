# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   5 ', 'LYS', 0.012477446792121871, (-2.556999999999999, -4.320000000000002, -19.335)), ('A', ' 128 ', 'CYS', 0.2176116084101752, (4.548, -4.294999999999998, -24.665)), ('A', ' 216 ', 'ASP', 0.119063204812265, (-20.329, -5.69, -23.068)), ('A', ' 238 ', 'ASN', 0.1309600200785796, (-4.037, 0.706, -41.837)), ('B', ' 128 ', 'CYS', 0.07490866185481113, (-3.673, 1.319, -10.29)), ('B', ' 216 ', 'ASP', 0.20760717370786355, (2.792, 16.65, -27.803999999999995)), ('B', ' 227 ', 'LEU', 0.0760214287980049, (-8.064999999999996, 28.544, -9.458)), ('B', ' 277 ', 'ASN', 0.120027306577824, (-11.096, 17.834000000000007, -31.937999999999995))]
data['cbeta'] = []
data['probe'] = [(' B  58  LEU HD22', ' B  82  MET  HE3', -0.805, (-10.864, -12.876, 13.513)), (' B 169  THR HG23', ' B 798  HOH  O  ', -0.657, (-20.748, -0.776, -8.672)), (' B  76  ARG  NH2', ' B 704  HOH  O  ', -0.607, (6.808, -26.526, 12.244)), (' B 165  MET  HE1', ' B 187  ASP  HA ', -0.546, (-16.85, -7.145, 2.59)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.542, (-14.918, -2.483, -43.365)), (' B 178  GLU  OE2', ' B 601  EDO  H11', -0.541, (-3.26, 1.238, 12.14)), (' B 169  THR  OG1', ' B 171  VAL HG22', -0.533, (-17.323, -0.803, -9.289)), (' A  61  LYS  NZ ', ' A 504  HOH  O  ', -0.531, (38.234, -0.475, -23.842)), (' A  86  VAL HG23', ' A 179  GLY  HA2', -0.507, (22.072, -9.817, -29.45)), (' B 224  THR HG22', ' B 225  THR  N  ', -0.494, (-4.616, 31.531, -16.028)), (' B  52  PRO  HD2', ' B 188  ARG  HD3', -0.492, (-21.96, -9.39, 7.507)), (' B  15  GLY  O  ', ' B 605  EDO  H11', -0.49, (7.794, -14.942, 0.181)), (' B 165  MET  HE2', ' B 606  MYC  C1 ', -0.49, (-17.199, -8.413, -0.032)), (' A 140  PHE  O  ', ' B   1  SER  N  ', -0.489, (13.261, 7.289, -23.699)), (' B 178  GLU  OE2', ' B 601  EDO  C1 ', -0.476, (-3.365, 1.388, 11.652)), (' B  52  PRO  HD2', ' B 188  ARG  CD ', -0.471, (-21.931, -9.452, 7.33)), (' A 126  TYR  HE1', ' A 128 BCYS  HG ', -0.469, (7.381, -1.412, -23.184)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.466, (9.947, -8.085, -21.286)), (' A  61  LYS  HE2', ' A 617  HOH  O  ', -0.447, (37.874, -1.894, -27.789)), (' B 224  THR HG22', ' B 225  THR  H  ', -0.444, (-4.392, 31.066, -16.048)), (' B  50  LEU HD23', ' B 189  GLN  HB3', -0.436, (-24.151, -11.99, 1.564)), (' A 165  MET  HB2', ' A 407  MYC  O30', -0.431, (19.958, 3.398, -31.384)), (' A 165  MET  CE ', ' A 185  PHE  HB3', -0.423, (17.987, -0.532, -35.528)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.416, (0.001, -2.974, -5.301)), (' A 298  ARG  NH1', ' A 509  HOH  O  ', -0.415, (0.485, -12.085, -19.966)), (' B 260  ALA  O  ', ' B 263  ASP  HB3', -0.415, (0.493, 26.847, -17.083)), (' B   5  LYS  HD3', ' B 720  HOH  O  ', -0.413, (-2.997, 2.504, -14.699)), (' B 210  ALA  HB2', ' B 296  VAL HG13', -0.404, (4.424, 12.863, -17.511))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
