# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  49 ', 'MET', 0.0013184353776928119, (21.655, -15.172999999999996, -4.165))]
data['omega'] = []
data['rota'] = [('A', '  47 ', 'GLU', 0.0377810836075173, (-33.916, 8.063, 32.555)), ('A', '  76 ', 'ARG', 0.0, (-35.179, -11.879999999999997, 12.989999999999998)), ('A', ' 222 ', 'ARG', 0.013636940873609739, (25.92, -9.053, 37.837)), ('A', ' 227 ', 'LEU', 0.16289474235929455, (12.054000000000004, -12.411999999999997, 45.532)), ('A', ' 228 ', 'ASN', 0.056819792716345525, (11.018, -10.515, 48.686)), ('A', ' 279 ', 'ARG', 0.04302656077967346, (18.643, 4.208, 25.236)), ('A', ' 301 ', 'SER', 0.2617463082298543, (11.756, -20.99299999999999, 19.938)), ('B', ' 155 ', 'ASP', 0.002828774267982226, (-14.623999999999999, -0.532, 1.512)), ('B', ' 188 ', 'ARG', 0.0182194768476317, (20.133999999999993, -9.028999999999996, -3.619)), ('B', ' 189 ', 'GLN', 0.005602747567776079, (22.111, -10.549, -0.755))]
data['cbeta'] = [('A', '  22 ', 'CYS', ' ', 0.3276310718452448, (-32.53, -0.9599999999999997, 22.052)), ('B', ' 155 ', 'ASP', ' ', 0.3180716610090803, (-16.082, -0.8279999999999996, 1.12))]
data['probe'] = [(' A  76  ARG  HG2', ' A  76  ARG HH21', -1.143, (-36.749, -12.108, 9.912)), (' A   1  SER  HB2', ' A 214  ASN HD22', -0.894, (16.108, -9.572, 17.357)), (' B 127  GLN  H  ', ' B 702  DMS  H22', -0.844, (0.687, -2.06, 14.414)), (' B 139  SER  H  ', ' B 705  DMS  H11', -0.84, (7.757, -6.453, 11.205)), (' B  55  GLU  OE2', ' B  82  MET  HE1', -0.818, (14.285, -8.699, -14.251)), (' B 228  ASN  O  ', ' B 232  LEU HD23', -0.795, (15.736, 27.789, 10.345)), (' A  66  PHE  CD1', ' A 540  HOH  O  ', -0.725, (-33.865, -4.588, 21.822)), (' B 167  LEU  HB3', ' B 168  PRO  HD2', -0.72, (19.898, -3.814, 6.593)), (' A  70  ALA  HB1', ' A 401  DMS  H21', -0.713, (-24.392, -9.658, 8.73)), (' A  66  PHE  CE1', ' A 540  HOH  O  ', -0.698, (-33.921, -4.771, 22.695)), (' B 139  SER  H  ', ' B 705  DMS  C1 ', -0.687, (7.463, -6.832, 10.647)), (' A  76  ARG  HG2', ' A  76  ARG  NH2', -0.676, (-37.205, -11.224, 9.679)), (' B 166  GLU  HG3', ' B 172  HIS  CD2', -0.662, (12.184, -7.96, 7.845)), (' A 288  GLU  HG2', ' A 291  PHE  CE2', -0.648, (5.936, -4.549, 24.022)), (' B  53  ASN  OD1', ' B  56  ASP  CB ', -0.646, (18.716, -12.697, -16.62)), (' B 702  DMS  S  ', ' B 819  HOH  O  ', -0.64, (-2.061, -2.061, 18.341)), (' B 139  SER  N  ', ' B 705  DMS  H11', -0.634, (8.214, -6.715, 11.364)), (' B 294  PHE  HE1', ' B 298  ARG  NH1', -0.631, (-8.169, 7.719, 6.519)), (' B 228  ASN  O  ', ' B 232  LEU  CD2', -0.627, (15.717, 27.04, 10.072)), (' A 228  ASN  HB3', ' A 534  HOH  O  ', -0.612, (12.213, -9.543, 51.111)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.606, (-21.628, -10.484, 29.316)), (' A 235  MET  SD ', ' A 241  PRO  HG3', -0.588, (3.623, -5.212, 45.577)), (' A  90  LYS  HE2', ' A 405  PEG  H42', -0.585, (-32.507, -18.824, 22.097)), (' A 217  ARG  HB2', ' A 220  LEU HD12', -0.58, (22.921, -8.8, 28.213)), (' A 227  LEU  O  ', ' A 227  LEU HD23', -0.576, (10.334, -11.158, 44.876)), (' B  58  LEU HD22', ' B  82  MET  HB2', -0.575, (9.565, -11.739, -14.262)), (' A 288  GLU  HG2', ' A 291  PHE  CD2', -0.575, (5.931, -5.013, 24.441)), (' A   1  SER  CB ', ' A 214  ASN HD22', -0.549, (15.64, -9.151, 16.794)), (' A   1  SER  HB2', ' A 214  ASN  ND2', -0.539, (15.346, -9.491, 17.361)), (' B 145  CYS  HA ', ' B 163  HIS  HD1', -0.539, (9.261, -10.262, 2.806)), (' B  53  ASN  OD1', ' B  56  ASP  N  ', -0.535, (17.986, -13.023, -16.547)), (' A  74  GLN  CD ', ' A  76  ARG  NH1', -0.533, (-36.549, -7.055, 9.731)), (' B 294  PHE  CE1', ' B 298  ARG  NH1', -0.524, (-8.28, 8.259, 6.459)), (' B  43  ILE  HB ', ' B  61  LYS  HE3', -0.523, (12.738, -18.13, -10.333)), (' A 295  ASP  OD1', ' A 407  DMS  H22', -0.519, (1.375, -14.26, 21.443)), (' B 165  MET  HE1', ' B 187  ASP  HA ', -0.519, (16.194, -6.691, -2.551)), (' B 233  VAL HG21', ' B 269  LYS  HE3', -0.512, (14.117, 26.536, 18.061)), (' B  55  GLU  CD ', ' B  82  MET  HE1', -0.508, (14.403, -8.221, -14.464)), (' A 224  THR HG22', ' A 225  THR  H  ', -0.506, (18.903, -12.362, 42.569)), (' B  53  ASN  OD1', ' B  56  ASP  HB2', -0.504, (19.313, -12.817, -17.105)), (' A  46  SER  HA ', ' A  49  MET  HE3', -0.502, (-29.76, 8.22, 29.459)), (' A 227  LEU  CD2', ' A 231  ASN  ND2', -0.498, (7.852, -11.287, 45.084)), (' B  45  THR HG23', ' B  48  ASP  H  ', -0.494, (21.255, -19.639, -7.506)), (' A 126  TYR  CD1', ' B   4  ARG  HD2', -0.494, (-5.607, -0.527, 21.427)), (' B  55  GLU  OE2', ' B  82  MET  CE ', -0.487, (13.47, -8.713, -13.681)), (' A  50  LEU  HB2', ' A 524  HOH  O  ', -0.484, (-30.577, 6.607, 37.049)), (' B  66  PHE  HB2', ' B  77  VAL HG21', -0.481, (4.032, -20.952, -10.509)), (' B  45  THR HG23', ' B  47  GLU  HG3', -0.48, (21.439, -20.534, -7.872)), (' B  62  SER  OG ', ' B  64  HIS  CE1', -0.469, (6.884, -25.342, -17.986)), (' A 154  TYR  O  ', ' A 155  ASP  HB2', -0.466, (-7.279, -23.531, 13.87)), (' A 142  ASN  HA ', ' A 142  ASN HD22', -0.464, (-17.653, 6.931, 21.631)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.463, (7.296, -5.334, -6.855)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.462, (14.844, -2.292, 42.891)), (' A 140  PHE  HB2', ' B   2  GLY  O  ', -0.457, (-9.833, 7.604, 22.375)), (' A 143  GLY  HA2', ' A 553  HOH  O  ', -0.457, (-21.395, 2.994, 22.082)), (' A  52  PRO  HD2', ' A 188  ARG  HG2', -0.456, (-27.359, 1.243, 37.045)), (' B 235  MET  HE2', ' B 241  PRO  HB3', -0.455, (14.682, 20.513, 7.379)), (' B 163  HIS  CD2', ' B 172  HIS  HB3', -0.454, (10.254, -6.244, 5.589)), (' B  55  GLU  O  ', ' B  59  ILE HG12', -0.452, (14.588, -14.436, -18.565)), (' A  61  LYS  HZ1', ' A  65  ASN  HB3', -0.451, (-37.093, -3.536, 21.999)), (' A 286  LEU  HG ', ' B 286  LEU HD12', -0.449, (8.701, 5.618, 26.111)), (' B  55  GLU  CD ', ' B  55  GLU  H  ', -0.449, (15.786, -9.938, -14.664)), (' A  74  GLN  OE1', ' A  76  ARG  NH1', -0.447, (-36.796, -7.4, 9.401)), (' A  61  LYS  NZ ', ' A  65  ASN  HB3', -0.445, (-36.904, -3.254, 22.467)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.444, (0.203, -3.151, 5.127)), (' B  54  TYR  HB2', ' B  55  GLU  OE2', -0.442, (15.332, -9.674, -13.062)), (' B 229  ASP  O  ', ' B 233  VAL HG23', -0.44, (14.669, 26.307, 14.766)), (' A 217  ARG  HG3', ' A 217  ARG HH11', -0.439, (25.459, -8.475, 26.991)), (' A  63  ASN  HB3', ' A  77  VAL  O  ', -0.435, (-37.934, -11.724, 18.103)), (' B  67  LEU HD12', ' B  68  VAL  N  ', -0.43, (1.861, -24.37, -5.559)), (' B  53  ASN  OD1', ' B  56  ASP  HB3', -0.428, (19.318, -13.569, -16.076)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.427, (13.077, -14.489, -8.508)), (' A 286  LEU  HG ', ' B 286  LEU  CD1', -0.427, (9.101, 5.912, 25.748)), (' B 166  GLU  HG3', ' B 172  HIS  HD2', -0.426, (12.183, -8.064, 7.59)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.422, (-9.935, -8.336, 21.328)), (' B 189  GLN  C  ', ' B 189  GLN  NE2', -0.42, (23.263, -10.039, 0.316)), (' A  76  ARG  HA ', ' A  76  ARG  HD3', -0.418, (-36.532, -10.343, 13.155)), (' B  75  LEU  CD2', ' B  75  LEU  N  ', -0.41, (-3.73, -23.025, -6.156)), (' A 169  THR  O  ', ' A 169  THR HG22', -0.409, (-8.116, 7.415, 32.842)), (' B 127  GLN  H  ', ' B 702  DMS  C2 ', -0.402, (0.409, -1.171, 14.596)), (' A  58  LEU HD22', ' A  82  MET  HB2', -0.402, (-31.827, -10.228, 30.062)), (' B  75  LEU  N  ', ' B  75  LEU HD22', -0.401, (-4.051, -23.317, -6.191))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
