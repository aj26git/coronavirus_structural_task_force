# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 154 ', 'TYR', 0.012062443873974444, (11.837000000000003, -16.624000000000013, -22.025)), ('C', ' 154 ', 'TYR', 0.031034260995079693, (-4.331999999999999, -3.6190000000000015, 26.243))]
data['omega'] = []
data['rota'] = [('A', ' 303 ', 'VAL', 0.068286358298115, (23.930999999999997, -54.805, -25.316)), ('B', '  51 ', 'ASN', 0.0690983317933491, (4.839999999999989, -54.93100000000001, -6.765999999999999)), ('B', '  56 ', 'ASP', 0.010685695445419259, (6.294999999999976, -49.265, 3.4249999999999994)), ('B', '  76 ', 'ARG', 0.008192715764005654, (23.10799999999996, -33.51300000000003, 3.323)), ('B', ' 125 ', 'VAL', 0.11045515382705927, (19.603000000000005, -32.853, -25.349)), ('B', ' 153 ', 'ASP', 0.06364099290768276, (9.045999999999989, -19.207000000000015, -21.942999999999998)), ('B', ' 155 ', 'ASP', 0.0028928056271434167, (13.900999999999996, -16.712, -18.804)), ('B', ' 188 ', 'ARG', 0.2459502544672598, (6.201999999999984, -51.01600000000003, -11.253)), ('B', ' 229 ', 'ASP', 0.2377850833276558, (-14.79400000000002, -32.60300000000003, -44.769)), ('B', ' 245 ', 'ASP', 0.11816055866213258, (-9.025000000000007, -23.851, -31.221)), ('B', ' 262 ', 'LEU', 0.003754044572361178, (-8.431000000000008, -24.295000000000016, -44.487)), ('B', ' 270 ', 'GLU', 0.0874761941597895, (-4.290000000000013, -34.214, -50.893)), ('C', '  50 ', 'LEU', 0.16267710996950108, (-4.219, 38.341, 23.567999999999998)), ('C', '  51 ', 'ASN', 0.13731506816529743, (-5.1229999999999905, 38.38100000000003, 27.289)), ('C', '  76 ', 'ARG', 0.13617498782398071, (-27.639999999999986, 19.037000000000013, 24.926)), ('C', ' 107 ', 'GLN', 0.08166800711722016, (7.152000000000001, 12.134000000000006, 30.955999999999996)), ('C', ' 110 ', 'GLN', 0.0, (7.594000000000001, 9.030000000000008, 26.018)), ('C', ' 154 ', 'TYR', 0.013349316484116526, (-4.331999999999999, -3.6190000000000015, 26.243)), ('C', ' 155 ', 'ASP', 0.001414387133991113, (-7.9209999999999985, -2.4109999999999996, 25.684)), ('C', ' 229 ', 'ASP', 0.2895504485392755, (32.355, 7.979000000000007, 30.32)), ('D', ' 153 ', 'ASP', 0.0004416673024999423, (-12.015999999999996, 9.102000000000007, 0.9059999999999999)), ('D', ' 188 ', 'ARG', 0.2162834376067207, (5.709, -19.704, -3.282)), ('D', ' 214 ', 'ASN', 0.16760032152542428, (5.613999999999999, 25.253, 5.808)), ('D', ' 235 ', 'MET', 0.002579535112850921, (18.419, 9.491, -13.697)), ('D', ' 303 ', 'VAL', 0.041703316847251516, (-2.2919999999999923, 29.229, 2.442))]
data['cbeta'] = []
data['probe'] = [(' B  45  THR HG23', ' B  47  GLU  H  ', -0.749, (15.136, -55.089, -5.152)), (' C  58  LEU HD22', ' C  82  MET  HE3', -0.673, (-14.429, 27.776, 31.777)), (' D 232  LEU  O  ', ' D 235  MET  HE2', -0.656, (20.654, 11.738, -17.272)), (' C  25  THR HG23', ' C 401  TG3  H3 ', -0.639, (-12.855, 28.898, 17.54)), (' B  51  ASN  ND2', ' B 501  HOH  O  ', -0.595, (0.788, -53.971, -6.574)), (' D 109  GLY  HA2', ' D 200  ILE HD13', -0.544, (6.229, 6.517, -5.351)), (' C 217  ARG  NH2', ' C 504  HOH  O  ', -0.537, (21.927, -9.925, 16.699)), (' C 109  GLY  HA2', ' C 200  ILE HD13', -0.535, (11.386, 11.339, 24.447)), (' A 131  ARG  HD3', ' A 137  LYS  HE2', -0.523, (23.568, -32.804, -45.237)), (' B  45  THR HG22', ' B  48  ASP  OD2', -0.52, (13.497, -54.162, -3.209)), (' C   2  GLY  N  ', ' C 214  ASN  OD1', -0.512, (12.023, -5.257, 9.994)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.511, (22.132, -21.076, -27.122)), (' B 168  PRO  HG3', ' B 401  TG3  H36', -0.494, (6.053, -55.134, -21.928)), (' C  45  THR HG22', ' C  48  ASP  OD2', -0.492, (-13.004, 37.802, 22.79)), (' D  40  ARG  HB2', ' D  82  MET  HE2', -0.482, (-5.745, -19.667, -2.579)), (' C 198  THR HG22', ' C 238  ASN  OD1', -0.481, (20.607, 19.635, 24.117)), (' A 110  GLN  HG2', ' A 741  HOH  O  ', -0.479, (33.62, -38.424, -38.795)), (' D 108  PRO  HG3', ' D 134  PHE  CE1', -0.477, (3.863, -0.59, -10.378)), (' D 402  BTB  H32', ' D 402  BTB  H61', -0.474, (26.19, 13.905, -0.678)), (' C  45  THR HG23', ' C  47  GLU  H  ', -0.471, (-12.037, 38.077, 19.757)), (' D   4  ARG  NH1', ' D 510  HOH  O  ', -0.466, (6.495, 13.735, 15.329)), (' B 100  LYS  HE2', ' B 156  CYS  HB2', -0.466, (9.813, -17.129, -15.728)), (' C  41  HIS  NE2', ' C 401  TG3  H6 ', -0.465, (-8.053, 26.632, 20.197)), (' A 202  VAL HG21', ' A 249  ILE HD11', -0.458, (32.804, -45.077, -40.962)), (' C 115  LEU HD11', ' C 122  PRO  HB3', -0.457, (-9.363, 10.154, 13.761)), (' D  66  PHE  CE1', ' D  87  LEU HD21', -0.455, (-9.878, -21.666, 2.61)), (' C 236  LYS  HG3', ' C 509  HOH  O  ', -0.455, (31.941, 16.891, 25.587)), (' C 102  LYS  HE3', ' C 156  CYS  SG ', -0.454, (-6.268, 2.442, 31.481)), (' D   5  LYS  NZ ', ' D 290  GLU  HB2', -0.453, (7.323, 8.085, 2.673)), (' D  58  LEU HD22', ' D  82  MET  HE3', -0.451, (-8.328, -21.743, -3.454)), (' C 190  THR  O  ', ' C 192  GLN  HG3', -0.449, (3.129, 33.777, 23.707)), (' C  56  ASP  O  ', ' C  59  ILE HG22', -0.437, (-17.385, 35.928, 32.82)), (' A 192  GLN  H  ', ' A 401  TG3  C34', -0.434, (26.604, -17.888, -55.13)), (' B 108  PRO  HB3', ' B 132  PRO  HA ', -0.433, (-1.86, -36.648, -26.83)), (' C 166  GLU  OE2', ' D   1  SER  HB3', -0.43, (2.454, 26.258, 12.615)), (' C  86  VAL HG13', ' C 179  GLY  HA2', -0.43, (-6.516, 20.887, 30.091)), (' B 102  LYS  HE3', ' B 156  CYS  SG ', -0.428, (7.557, -19.694, -14.623)), (' A 198  THR HG22', ' A 238  ASN  OD1', -0.428, (26.604, -38.295, -54.972)), (' A 100  LYS  HB3', ' A 100  LYS  HE2', -0.427, (39.886, -29.595, -21.475)), (' A 402  BTB  H32', ' A 402  BTB  H52', -0.426, (11.873, -45.236, -54.007)), (' A 401  TG3  H40', ' A 401  TG3  H49', -0.423, (21.752, -16.542, -48.069)), (' D  44  CYS  HB2', ' D 596  HOH  O  ', -0.422, (0.683, -22.465, 3.826)), (' A 401  TG3  H6 ', ' A 698  HOH  O  ', -0.421, (25.376, -12.157, -38.905)), (' C 175  THR HG22', ' C 181  PHE  HA ', -0.421, (-1.117, 22.169, 29.306)), (' C 235  MET  HB2', ' C 235  MET  HE3', -0.418, (27.738, 15.19, 29.189)), (' A 402  BTB  H82', ' A 402  BTB  O1 ', -0.415, (13.804, -45.634, -57.162)), (' C  52  PRO  HD2', ' C 188  ARG  HB2', -0.412, (-4.418, 35.119, 26.61)), (' D 196  THR  O  ', ' D 501  HOH  O  ', -0.412, (13.679, 0.156, -9.34)), (' A  90  LYS  HB2', ' A  90  LYS  HE2', -0.411, (44.186, -10.248, -28.461)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.403, (18.871, -24.153, -6.782)), (' D  62  SER  HG ', ' D  64  HIS  CE1', -0.402, (-15.565, -30.622, 6.095)), (' A 126  TYR  CD2', ' B   6  MET  HE2', -0.401, (18.446, -25.004, -34.631)), (' A 234  ALA  O  ', ' A 239  TYR  HB2', -0.401, (26.009, -44.938, -53.306)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.401, (12.897, -31.937, -21.163))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
