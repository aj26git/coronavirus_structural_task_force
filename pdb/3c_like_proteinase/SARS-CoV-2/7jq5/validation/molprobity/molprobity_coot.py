# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.010050882305964098, (11.104999999999999, -10.245999999999999, -8.258999999999999)), ('A', ' 169 ', 'THR', 0.01125236658693433, (37.36299999999999, 13.147999999999996, -12.482999999999997))]
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 168  PRO  HD3', ' A 401  NOL  H1 ', -0.892, (41.329, 10.291, -17.842)), (' A 259  ILE  O  ', ' A 501  HOH  O  ', -0.802, (1.035, 16.285, -11.804)), (' A 168  PRO  HG3', ' A 401  NOL  H6 ', -0.763, (42.669, 11.746, -17.449)), (' A 298  ARG  NH2', ' A 505  HOH  O  ', -0.727, (15.5, 1.53, -5.311)), (' A 251  GLY  O  ', ' A 254  SER  HB3', -0.716, (0.395, 11.014, -13.097)), (' A 209  TYR  OH ', ' A 501  HOH  O  ', -0.709, (2.367, 15.358, -12.118)), (' A  42  VAL HG13', ' A 567  HOH  O  ', -0.707, (43.163, -11.359, -18.001)), (' A 290  GLU  OE1', ' A 502  HOH  O  ', -0.696, (22.769, 8.031, -7.286)), (' A 137  LYS  HG2', ' A 171  VAL HG12', -0.69, (31.216, 10.862, -11.853)), (' A 202  VAL HG21', ' A 586  HOH  O  ', -0.66, (10.297, 10.285, -17.284)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.657, (19.437, 9.661, -15.824)), (' A 169  THR  HB ', ' A 171  VAL HG22', -0.642, (35.379, 11.409, -14.272)), (' A 240  GLU  OE2', ' A 503  HOH  O  ', -0.637, (19.4, 11.245, -20.319)), (' A  49  MET  HA ', ' A 577  HOH  O  ', -0.635, (47.213, -2.076, -20.427)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.634, (38.004, -8.166, -14.51)), (' A  49  MET  HG2', ' A 401  NOL H622', -0.628, (45.404, -1.971, -17.494)), (' A 192  GLN  O  ', ' A 504  HOH  O  ', -0.59, (39.541, 11.185, -20.134)), (' A  34  ASP  OD2', ' A  90  LYS  NZ ', -0.573, (29.477, -24.248, -20.499)), (' A  27  LEU  HB3', ' A 541  HOH  O  ', -0.568, (41.072, -5.819, -11.587)), (' A 249  ILE  HB ', ' A 586  HOH  O  ', -0.562, (8.796, 9.219, -17.64)), (' A 168  PRO  CG ', ' A 401  NOL  H6 ', -0.561, (41.79, 11.424, -16.9)), (' A  49  MET  HG2', ' A 401  NOL H632', -0.547, (45.579, -0.966, -18.566)), (' A 168  PRO  HD3', ' A 401  NOL  C1 ', -0.546, (41.669, 10.275, -17.465)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.545, (40.694, -8.172, -14.978)), (' A 110 AGLN  NE2', ' A 514  HOH  O  ', -0.539, (14.845, 0.929, -18.399)), (' A 294  PHE  O  ', ' A 298  ARG  HG2', -0.538, (9.848, 2.021, -8.179)), (' A 165  MET  HE1', ' A 192  GLN  NE2', -0.535, (39.817, 4.889, -21.112)), (' A  46 ASER  HA ', ' A  49  MET  SD ', -0.53, (48.986, -1.748, -16.146)), (' A  73  VAL HG22', ' A 608  HOH  O  ', -0.53, (36.683, -25.252, -2.035)), (' A 167  LEU  HB3', ' A 168  PRO  HD2', -0.525, (38.256, 10.443, -17.02)), (' A  49  MET  HG2', ' A 401  NOL  C62', -0.519, (45.154, -1.373, -17.973)), (' A  46 BSER  HA ', ' A  49  MET  SD ', -0.513, (49.019, -1.706, -16.091)), (' A 218  TRP  HB2', ' A 279  ARG HH22', -0.511, (9.158, 26.362, 2.128)), (' A 130  MET  HE3', ' A 182  TYR  CD1', -0.509, (25.583, 2.569, -19.601)), (' A  41  HIS  CG ', ' A 401  NOL H621', -0.505, (42.36, -3.0, -17.836)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.503, (29.173, -7.576, -2.106)), (' A 243  THR  O  ', ' A 247  VAL HG23', -0.488, (7.017, 15.027, -21.194)), (' A 190  THR  O  ', ' A 192  GLN  HG3', -0.483, (41.78, 7.846, -21.66)), (' A 152  ILE  CD1', ' A 157  VAL HG22', -0.482, (19.111, -10.236, -9.245)), (' A  27  LEU  CD1', ' A  39  PRO  HD2', -0.465, (38.263, -8.504, -14.251)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.462, (43.226, -8.532, -20.987)), (' A 246  HIS  HA ', ' A 586  HOH  O  ', -0.456, (9.365, 10.233, -18.192)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.453, (24.73, -2.884, -9.504)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.448, (32.287, -6.283, -21.719)), (' A  52  PRO  HD2', ' A 188  ARG  HG2', -0.445, (44.448, 0.328, -24.707)), (' A  44  CYS  SG ', ' A 577  HOH  O  ', -0.445, (46.797, -3.727, -20.233)), (' A 165  MET  CE ', ' A 192  GLN  NE2', -0.441, (39.532, 5.273, -20.633)), (' A  41  HIS  HB2', ' A 401  NOL H631', -0.439, (43.592, -3.429, -19.138)), (' A 237  TYR  O  ', ' A 238  ASN  HB2', -0.439, (21.686, 22.446, -15.592)), (' A 245  ASP  O  ', ' A 249  ILE HG13', -0.435, (6.924, 9.12, -19.798)), (' A 401  NOL H632', ' A 577  HOH  O  ', -0.434, (46.018, -2.058, -19.782)), (' A 152  ILE HD12', ' A 157  VAL HG22', -0.43, (18.51, -10.159, -8.779)), (' A  44  CYS  CB ', ' A 577  HOH  O  ', -0.42, (46.521, -3.723, -19.868)), (' A   8  PHE  HE1', ' A 305  PHE  CZ ', -0.417, (13.497, -4.268, -6.637)), (' A  14  GLU  HG2', ' A 122  PRO  HG2', -0.414, (28.765, -10.572, -1.44)), (' A 169  THR HG22', ' A 171  VAL HG13', -0.414, (33.716, 12.524, -12.276)), (' A 110 BGLN  NE2', ' A 519  HOH  O  ', -0.414, (14.017, 2.974, -14.839)), (' A 106  ILE HD11', ' A 130  MET  HE2', -0.412, (23.932, 2.333, -16.747)), (' A  49  MET  HG2', ' A 401  NOL  C63', -0.41, (45.591, -1.299, -17.967)), (' A 187  ASP  C  ', ' A 188  ARG  HG3', -0.409, (42.05, 0.948, -23.685)), (' A  44  CYS  HB3', ' A 577  HOH  O  ', -0.407, (47.011, -3.542, -19.66)), (' A 166  GLU  HG2', ' A 167  LEU  O  ', -0.407, (39.175, 8.322, -12.407)), (' A  36  VAL HG21', ' A  68  VAL HG11', -0.404, (35.757, -18.296, -12.461)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.404, (34.052, 3.167, -12.369)), (' A   6  MET  HE3', ' A 299  GLN  NE2', -0.401, (14.359, 3.31, 0.993)), (' A 129  ALA  HB3', ' A 290  GLU  HG2', -0.401, (21.874, 8.807, -11.309)), (' A 271  LEU  HA ', ' A 271  LEU HD23', -0.4, (13.022, 26.563, -5.867))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
