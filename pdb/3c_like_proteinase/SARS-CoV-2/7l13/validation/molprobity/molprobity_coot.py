# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   6 ', 'MET', 0.12606072070750043, (1.095, 6.798, -17.092)), ('A', '  62 ', 'SER', 0.010564171888233087, (-40.716, 7.96, -22.97200000000001)), ('A', '  81 ', 'SER', 0.20708799987099163, (-32.373, 13.738000000000003, -27.601000000000003)), ('A', '  90 ', 'LYS', 0.2789047159295263, (-31.722, 15.338999999999999, -19.663)), ('A', ' 128 ', 'CYS', 0.07035202835024441, (-4.355, 4.391000000000001, -24.689000000000004)), ('A', ' 165 ', 'MET', 0.06596817232978867, (-18.170000000000016, -1.6279999999999986, -29.621000000000002)), ('A', ' 188 ', 'ARG', 0.0, (-24.716, -1.8, -35.98)), ('A', ' 217 ', 'ARG', 0.038635363616335676, (22.231, 5.861999999999997, -26.724000000000004)), ('B', '  47 ', 'GLU', 0.03125609706063559, (24.326, 18.562, 4.658)), ('B', '  57 ', 'LEU', 0.031466700648083816, (17.044, 17.027, 13.769000000000002)), ('B', '  67 ', 'LEU', 0.1690807657447778, (4.143, 24.406, 6.075)), ('B', '  82 ', 'MET', 0.27005252785246003, (8.109999999999992, 10.137999999999993, 13.98)), ('B', '  86 ', 'VAL', 0.09685463725245438, (7.728, 8.365, 8.378)), ('B', ' 107 ', 'GLN', 0.0, (5.315000000000001, -8.773999999999997, -0.273)), ('B', ' 167 ', 'LEU', 0.0, (18.626, 4.589, -6.416000000000001)), ('B', ' 177 ', 'LEU', 0.08262034172797451, (2.964000000000002, 3.807, 5.711000000000001)), ('B', ' 216 ', 'ASP', 0.1575306802120719, (-2.846, -16.166999999999998, -27.817)), ('B', ' 222 ', 'ARG', 0.003771797443232876, (1.522, -31.26699999999999, -25.04600000000001)), ('B', ' 233 ', 'VAL', 0.12756512431230205, (15.411, -24.023, -15.115000000000002)), ('B', ' 242 ', 'LEU', 0.22972944091732422, (7.783, -21.708, -7.901)), ('B', ' 253 ', 'LEU', 0.0, (-6.946, -20.009, -14.196000000000003)), ('B', ' 256 ', 'GLN', 0.09876013112910997, (-11.076, -21.536, -16.731000000000005)), ('B', ' 257 ', 'THR', 0.013599336671177298, (-8.596, -22.434, -19.427000000000007))]
data['cbeta'] = []
data['probe'] = [(' A 235  MET  HE2', ' A 241  PRO  HB3', -0.679, (4.091, 7.927, -45.731)), (' B 298  ARG  HD3', ' B 305  PHE  HZ ', -0.665, (-9.863, -4.153, -9.211)), (' A 502  HOH  O  ', ' B   4  ARG  NH2', -0.658, (-1.737, 2.275, -24.604)), (' A 245  ASP  OD1', ' A 501  HOH  O  ', -0.655, (2.982, 19.144, -42.835)), (' B 298  ARG  HG3', ' B 303  VAL  HB ', -0.654, (-11.426, -6.995, -10.71)), (' A 231  ASN  HB3', ' A 235  MET  HE3', -0.645, (7.117, 7.179, -47.044)), (' B 159  PHE  HB3', ' B 177  LEU HD13', -0.632, (0.02, 4.136, 2.399)), (' A 290  GLU  OE1', ' A 502  HOH  O  ', -0.593, (-0.846, 2.137, -25.506)), (' B  68  VAL HG23', ' B  75  LEU  HB2', -0.588, (-1.334, 21.842, 6.019)), (' A  50  LEU  O  ', ' A 188  ARG  HD2', -0.578, (-27.209, -3.965, -39.654)), (' A 118  TYR  HB2', ' B 304  THR HG21', -0.575, (-17.939, -2.719, -13.813)), (' B  51  ASN  HA ', ' B 188  ARG  HD2', -0.564, (24.006, 10.013, 6.984)), (' A   4  ARG  HG2', ' B 139  SER  HB2', -0.556, (7.611, 4.965, -15.164)), (' B 227  LEU HD11', ' B 242  LEU HD12', -0.554, (6.193, -24.655, -9.329)), (' A  61  LYS  NZ ', ' A 503  HOH  O  ', -0.552, (-37.558, 0.319, -23.675)), (' B  45  THR  OG1', ' B  47  GLU  HG2', -0.546, (22.387, 20.62, 5.238)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.544, (6.215, -9.564, -8.431)), (' A 110  GLN HE21', ' A 111  THR  H  ', -0.53, (-2.239, 11.547, -27.392)), (' A   5  LYS  HD3', ' A 502  HOH  O  ', -0.528, (-0.04, 2.843, -24.171)), (' B 222  ARG  HG2', ' B 222  ARG  O  ', -0.508, (2.092, -33.449, -24.485)), (' A 165  MET  HE2', ' A 401  XF7 CL24', -0.507, (-19.382, -3.111, -34.417)), (' B  20  VAL HG22', ' B  68  VAL HG12', -0.502, (2.92, 19.044, 4.762)), (' A  83  GLN  OE1', ' A  88  LYS  NZ ', -0.485, (-25.916, 16.761, -28.839)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.485, (-9.232, 12.653, 5.582)), (' B 262  LEU  HA ', ' B 265  CYS  HB2', -0.475, (4.342, -26.639, -14.964)), (' A  10  SER  O  ', ' A  14  GLU  HG3', -0.463, (-11.88, 9.097, -12.006)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.46, (0.324, 2.986, -5.544)), (' B 262  LEU  H  ', ' B 262  LEU HD12', -0.451, (1.341, -27.892, -13.217)), (' A 108  PRO  HB3', ' A 132  PRO  HA ', -0.45, (-4.349, 7.249, -36.793)), (' A 137  LYS  O  ', ' B   4  ARG  NH1', -0.45, (-4.333, -0.948, -26.115)), (' B 260  ALA  HB3', ' B 263  ASP  HB2', -0.443, (-0.869, -28.675, -17.177)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.44, (-26.809, 2.188, -24.305)), (' B 165  MET  HE1', ' B 187  ASP  HA ', -0.44, (17.146, 7.332, 2.437)), (' A 199  THR HG21', ' A 239  TYR  CZ ', -0.438, (6.946, 1.355, -35.885)), (' A 140  PHE  O  ', ' B   1  SER  N  ', -0.437, (-13.424, -7.063, -24.387)), (' A   1  SER  OG ', ' A   2  GLY  N  ', -0.436, (14.642, 6.91, -14.778)), (' A   5  LYS  HG2', ' A 127  GLN  HB3', -0.435, (-0.186, 4.379, -21.009)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.434, (-22.294, 17.091, -13.181)), (' A  56  ASP  O  ', ' A  60  ARG  HG3', -0.433, (-40.02, 4.014, -32.044)), (' B  43  ILE HD12', ' B  57  LEU  HB3', -0.432, (15.095, 16.253, 11.599)), (' B 298  ARG  HD3', ' B 305  PHE  CZ ', -0.429, (-10.082, -4.292, -9.217)), (' B 266  ALA  O  ', ' B 270  GLU  HG2', -0.428, (7.955, -25.959, -21.962)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.427, (-9.847, 7.851, -21.369)), (' B  74  GLN  NE2', ' B 404  HOH  O  ', -0.427, (0.92, 25.326, 6.994)), (' B 257  THR HG22', ' B 259  ILE  H  ', -0.426, (-5.756, -24.21, -18.76)), (' B 288  GLU  OE1', ' B 401  HOH  O  ', -0.421, (5.391, -6.628, -17.302)), (' B   8  PHE  HE1', ' B 305  PHE  CZ ', -0.42, (-9.339, -3.211, -7.772)), (' B 290  GLU  OE1', ' B 402  HOH  O  ', -0.414, (5.102, -3.175, -14.011)), (' B 302  GLY  O  ', ' B 304  THR HG23', -0.413, (-16.411, -4.315, -12.727)), (' A 163  HIS  CE1', ' A 172  HIS  HB3', -0.413, (-13.623, -0.545, -27.802)), (' A   6  MET  HE3', ' B 124  GLY  HA3', -0.412, (1.364, 10.671, -14.518)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.412, (-0.488, 7.185, -32.652)), (' B  22  CYS  SG ', ' B  61  LYS  HD2', -0.407, (11.539, 21.275, 9.386)), (' B 107  GLN  H  ', ' B 107  GLN  HG2', -0.405, (2.993, -9.047, 0.113)), (' B 111  THR HG22', ' B 129  ALA  HB2', -0.404, (3.196, -6.133, -9.921)), (' B 227  LEU  HA ', ' B 227  LEU HD12', -0.404, (7.644, -26.994, -10.618)), (' B 140  PHE  HB3', ' B 144  SER  OG ', -0.403, (9.539, 10.641, -7.673)), (' A 233  VAL HG21', ' A 269  LYS  HE3', -0.401, (15.774, 3.639, -45.398))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
