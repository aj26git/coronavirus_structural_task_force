# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  62 ', 'SER', 0.029379985083723224, (7.945, -22.78, -17.158)), ('B', ' 154 ', 'TYR', 0.0199048250252793, (-14.625, 3.063, 2.093))]
data['omega'] = []
data['rota'] = [('A', ' 137 ', 'LYS', 3.706812098508547e-05, (-6.8430000000000035, 1.293, 27.461)), ('A', ' 141 ', 'LEU', 0.0, (-14.621, 5.605, 21.009)), ('A', ' 158 ', 'SER', 0.05278425052375799, (-11.139, -17.54699999999999, 22.083)), ('A', ' 158 ', 'SER', 0.08367855633626192, (-11.143000000000004, -17.545999999999996, 22.082)), ('A', ' 189 ', 'GLN', 0.16450619494471164, (-23.733, 5.423999999999998, 34.981)), ('A', ' 279 ', 'ARG', 0.08501802044644345, (18.314, 4.205, 25.292999999999996)), ('B', '   5 ', 'LYS', 0.0, (-2.873, 3.2029999999999985, 17.581)), ('B', '  43 ', 'ILE', 0.2948101848444122, (13.089, -17.754999999999995, -8.275)), ('B', ' 235 ', 'MET', 0.0, (17.489, 18.825, 12.138)), ('B', ' 236 ', 'LYS', 0.13245829279282784, (19.978, 19.207, 15.058)), ('B', ' 270 ', 'GLU', 0.021595756532951347, (10.614000000000006, 23.805999999999997, 23.256))]
data['cbeta'] = [('B', ' 154 ', 'TYR', ' ', 0.3377206436522425, (-14.984000000000004, 3.839, 0.83))]
data['probe'] = [(' B  59  ILE HG13', ' B  60  ARG  N  ', -0.739, (13.599, -17.541, -19.365)), (' B  76  ARG  HB2', ' B  92  ASP  OD2', -0.709, (-5.061, -23.943, -13.323)), (' B  62  SER  H  ', ' B  65  ASN HD21', -0.701, (9.865, -23.983, -15.485)), (' A 107  GLN  NE2', ' A 502  HOH  O  ', -0.686, (-8.341, -13.366, 38.248)), (' B  49  MET  HG2', ' B 189  GLN  HG2', -0.646, (20.155, -13.209, -1.691)), (' A 294  PHE  O  ', ' A 298  ARG  HD3', -0.645, (4.193, -18.398, 24.171)), (' A 137  LYS  HE3', ' B 401  PEG  H21', -0.64, (-1.111, 2.1, 27.692)), (' B  49  MET  CG ', ' B 189  GLN  HG2', -0.636, (20.54, -13.296, -2.481)), (' B  43  ILE  C  ', ' B  43  ILE HD12', -0.632, (15.002, -17.125, -8.902)), (' B   1  SER  HA ', ' B 214  ASN HD21', -0.631, (-9.772, 11.357, 24.391)), (' A 209  TYR  O  ', ' A 213  ILE HD12', -0.612, (16.082, -13.529, 25.859)), (' B 245  ASP  O  ', ' B 249  ILE HG13', -0.602, (0.987, 19.744, 3.576)), (' A  -1  ALA  HB1', ' B 141  LEU HD21', -0.599, (12.099, -14.288, 15.701)), (' A 235  MET  SD ', ' A 241  PRO  HG3', -0.592, (3.8, -5.434, 45.144)), (' B 229  ASP  HA ', ' B 232  LEU HD12', -0.58, (15.349, 28.574, 11.897)), (' A  86  VAL HG23', ' A 179  GLY  HA2', -0.572, (-21.327, -10.454, 29.965)), (' B 188  ARG  HB3', ' B 190  THR HG23', -0.569, (22.961, -7.888, -3.851)), (' A 298  ARG  NH1', ' A 503  HOH  O  ', -0.539, (6.069, -23.594, 24.204)), (' B  90  LYS  HB2', ' B 402  PEG  H12', -0.532, (-0.987, -13.436, -15.645)), (' B  59  ILE HG13', ' B  60  ARG  H  ', -0.526, (14.057, -17.72, -18.194)), (' B 155  ASP  N  ', ' B 155  ASP  OD1', -0.516, (-15.378, 0.745, 0.259)), (' A 163  HIS  CE1', ' A 172  HIS  CD2', -0.507, (-14.672, 1.833, 26.36)), (' A  52  PRO  HD2', ' A 188  ARG  HG2', -0.505, (-27.668, 0.619, 36.646)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.503, (-0.688, -7.337, 31.846)), (' A 295  ASP  OD2', ' A 501  HOH  O  ', -0.501, (1.061, -11.65, 23.787)), (' B  27  LEU HD13', ' B  39  PRO  HD2', -0.489, (6.964, -13.347, -2.33)), (' B 231  ASN  O  ', ' B 235  MET  HG2', -0.488, (15.993, 21.726, 10.92)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.486, (-0.2, -3.15, 5.366)), (' B   4  ARG  CZ ', ' B 401  PEG  H31', -0.482, (-2.018, 0.582, 24.362)), (' B  49  MET  HG3', ' B 189  GLN  HG2', -0.478, (20.405, -13.08, -2.472)), (' B   1  SER  HA ', ' B 214  ASN  ND2', -0.475, (-9.552, 11.37, 24.874)), (' B   8  PHE  HE2', ' B 151  ASN HD22', -0.471, (-4.777, 2.618, 6.698)), (' B  21  THR  HB ', ' B  67  LEU  HB3', -0.471, (5.568, -24.354, -4.564)), (' A 141  LEU HD22', ' A 172  HIS  NE2', -0.47, (-13.474, 4.349, 25.274)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.468, (-26.817, -2.824, 23.828)), (' A  49  MET  HG2', ' A 189  GLN  NE2', -0.468, (-24.921, 5.443, 31.034)), (' B 136  ILE  HB ', ' B 172  HIS  CE1', -0.468, (8.493, -3.209, 7.186)), (' A   8  PHE  CZ ', ' A 407  DMS  H23', -0.467, (-1.656, -13.297, 19.494)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.464, (-17.128, -5.835, 14.794)), (' A 165  MET  HE3', ' A 187  ASP  HA ', -0.462, (-21.854, -0.633, 33.055)), (' B  43  ILE  C  ', ' B  43  ILE  CD1', -0.461, (14.535, -16.825, -9.415)), (' A   6  MET  HE3', ' A 407  DMS  H12', -0.46, (2.204, -11.104, 16.135)), (' B  40  ARG  HD3', ' B  85  CYS  HA ', -0.46, (11.691, -8.097, -9.653)), (' A  76  ARG  HB3', ' A  92  ASP  OD2', -0.457, (-35.883, -14.39, 11.351)), (' A 163  HIS  CE1', ' A 172  HIS  HD2', -0.456, (-14.895, 1.972, 26.628)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.452, (-10.488, -8.371, 21.256)), (' B 175  THR HG22', ' B 181  PHE  HA ', -0.445, (10.656, -2.221, -3.873)), (' B 165  MET  HE1', ' B 185  PHE  HB3', -0.444, (16.743, -3.176, -0.642)), (' B 235  MET  HB3', ' B 235  MET  HE3', -0.442, (18.256, 18.124, 9.772)), (' B 215  GLY  HA2', ' B 217  ARG HH11', -0.441, (-7.74, 19.841, 26.421)), (' B  62  SER  C  ', ' B  65  ASN  OD1', -0.441, (7.7, -22.46, -15.094)), (' A 137  LYS  HE3', ' B 401  PEG  C2 ', -0.44, (-1.408, 1.46, 27.871)), (' B   5  LYS  HB2', ' B   5  LYS  HE3', -0.438, (-0.628, 4.377, 18.165)), (' A  41  HIS  HD2', ' A 544  HOH  O  ', -0.435, (-24.208, -3.317, 29.383)), (' B 276  MET  HE3', ' B 279  ARG  O  ', -0.434, (6.359, 13.22, 29.793)), (' A   0  MET  HB3', ' A   0  MET  HE2', -0.431, (11.29, -9.279, 19.587)), (' A   9  PRO  HD3', ' B 124  GLY  HA2', -0.43, (-2.586, -11.899, 13.134)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.429, (-7.413, -15.754, -6.035)), (' A 126  TYR  HA ', ' A 406  XY4  C8 ', -0.428, (-3.934, -3.424, 17.51)), (' A  27  LEU HD13', ' A  39  PRO  HD2', -0.427, (-23.916, -4.201, 23.002)), (' A  46  SER  HA ', ' A 571  HOH  O  ', -0.427, (-28.905, 6.512, 29.158)), (' B  27  LEU HD21', ' B  42  VAL  HB ', -0.426, (9.738, -15.536, -3.718)), (' A   4  ARG  HD3', ' B 126  TYR  CD2', -0.424, (4.361, -3.325, 12.905)), (' B  41  HIS  HB2', ' B  49  MET  HE1', -0.422, (15.664, -13.647, -3.757)), (' B  49  MET  HG3', ' B  49  MET  O  ', -0.421, (20.898, -12.765, -3.674)), (' A 106  ILE HG23', ' A 160  CYS  HB2', -0.42, (-9.901, -13.643, 28.168)), (' B 231  ASN  O  ', ' B 235  MET  CG ', -0.419, (16.338, 21.815, 11.063)), (' B  62  SER  H  ', ' B  65  ASN  ND2', -0.413, (9.416, -23.418, -15.037)), (' A 406  XY4  C1 ', ' A 406  XY4  O1 ', -0.412, (2.935, -0.729, 18.615)), (' A 406  XY4  C10', ' A 406  XY4  O1 ', -0.409, (1.024, -2.436, 17.533)), (' B  70  ALA  O  ', ' B  73  VAL HG22', -0.403, (-6.841, -23.244, -1.842)), (' B 140  PHE  CE1', ' B 166  GLU  HG2', -0.4, (15.542, -10.043, 9.783)), (' B  62  SER  O  ', ' B  80  HIS  CE1', -0.4, (6.283, -19.955, -16.047))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
