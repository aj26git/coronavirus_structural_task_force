# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 140 ', 'PHE', 0.045716505358385576, (-10.837, 6.989, 21.858999999999998)), ('B', '  46 ', 'SER', 0.004032350656372972, (21.681, -19.62, -3.629)), ('B', '  51 ', 'ASN', 0.045156167464497486, (24.303, -11.344, -8.469))]
data['omega'] = [('B', '  47 ', 'GLU', None, (22.9, -18.528, -5.416))]
data['rota'] = [('A', ' 154 ', 'TYR', 0.013981756991251334, (-5.250000000000002, -22.714, 15.215)), ('A', ' 158 ', 'SER', 0.12931550371301032, (-11.069, -17.552, 22.194999999999997)), ('A', ' 158 ', 'SER', 0.01071998049155809, (-11.092, -17.578, 22.194)), ('B', '  50 ', 'LEU', 0.12310675394754837, (24.189, -13.105, -5.288)), ('B', ' 294 ', 'PHE', 0.16312758149182832, (-5.163, 11.778, 9.038)), ('B', ' 298 ', 'ARG', 0.0998773816167673, (-9.875, 10.028, 11.347))]
data['cbeta'] = [('A', ' 154 ', 'TYR', ' ', 0.3221292659769939, (-5.289999999999998, -24.23, 15.408999999999999)), ('A', ' 166 ', 'GLU', ' ', 0.2901950243567506, (-15.988999999999999, 4.121, 28.621)), ('B', '  47 ', 'GLU', ' ', 0.26703888016686084, (23.517, -20.377, -6.653)), ('B', '  49 ', 'MET', ' ', 0.27249677614989565, (20.722, -15.005, -4.213)), ('B', '  51 ', 'ASN', ' ', 0.37589856485535955, (25.761, -11.855, -8.439999999999998)), ('B', ' 298 ', 'ARG', ' ', 0.2657277881182225, (-9.420999999999996, 9.257, 10.128))]
data['probe'] = [(' A 141  LEU HD22', ' A 144  SER  HB3', -0.892, (-16.083, 2.035, 19.329)), (' A 169  THR HG23', ' A 171  VAL HG22', -0.807, (-10.167, 5.07, 33.12)), (' B 118  TYR  OH ', ' B 140  PHE  O  ', -0.752, (8.223, -13.177, 11.108)), (' A 181  PHE  HD2', ' A 185  PHE  HB2', -0.723, (-17.156, -3.203, 35.727)), (' A 245  ASP  O  ', ' A 249  ILE HG13', -0.711, (5.448, -18.787, 36.961)), (' A  54  TYR  HB3', ' A  82  MET  HE1', -0.705, (-31.606, -6.783, 32.469)), (' A 175  THR HG22', ' A 181  PHE  CD1', -0.702, (-19.445, -6.487, 32.687)), (' B  44  CYS  HB3', ' B  49  MET  HG2', -0.696, (18.723, -16.223, -5.571)), (' A   0  MET  HG2', ' B 141  LEU HD12', -0.672, (11.108, -12.582, 17.437)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.669, (7.169, -4.542, -7.375)), (' A 166  GLU  OE2', ' A 172  HIS  ND1', -0.661, (-13.132, 2.717, 26.544)), (' B  58  LEU HD22', ' B  82  MET  HB2', -0.655, (9.615, -11.221, -14.654)), (' A 232  LEU HD12', ' A 236  LYS  HE3', -0.642, (8.619, -1.133, 49.518)), (' A  62  SER  H  ', ' A  65  ASN  ND2', -0.632, (-40.573, -6.451, 23.047)), (' A  71  GLY  H  ', ' A 506  DMS  H21', -0.63, (-24.075, -5.214, 9.273)), (' A  46  SER  HA ', ' A  49  MET  HE3', -0.627, (-29.638, 6.867, 28.416)), (' B  45  THR  O  ', ' B  49  MET  HG3', -0.623, (20.821, -17.36, -5.277)), (' B 294  PHE  HZ ', ' B 298  ARG HH21', -0.614, (-9.151, 11.006, 4.659)), (' A 175  THR HG22', ' A 181  PHE  HD1', -0.594, (-19.434, -7.222, 33.393)), (' A  56  ASP  O  ', ' A  60  ARG  HG3', -0.585, (-39.188, -5.102, 32.475)), (' A 181  PHE  CD2', ' A 185  PHE  HB2', -0.581, (-17.482, -3.548, 35.461)), (' A  86  VAL HG23', ' A 179  GLY  HA2', -0.58, (-21.351, -10.61, 30.171)), (' B  56  ASP  O  ', ' B  60  ARG  HD2', -0.579, (16.527, -16.757, -19.032)), (' A  67  LEU  CD1', ' A  74  GLN HE21', -0.57, (-34.958, -4.828, 11.797)), (' B  70  ALA  HB1', ' B 703  PEG  H41', -0.562, (-6.751, -19.208, -0.924)), (' A  58  LEU HD22', ' A  82  MET  HE3', -0.554, (-32.07, -9.065, 30.574)), (' A 141  LEU HD23', ' A 142  ASN  N  ', -0.553, (-16.726, 5.685, 19.531)), (' B 227  LEU HD11', ' B 242  LEU  HB3', -0.552, (8.094, 23.502, 8.863)), (' A 141  LEU HD23', ' A 142  ASN  H  ', -0.552, (-16.236, 5.237, 18.886)), (' A   0  MET  HB2', ' A 214  ASN  ND2', -0.55, (14.395, -10.883, 19.745)), (' A  78  ILE HD11', ' A  90  LYS  HD3', -0.546, (-34.636, -19.533, 17.855)), (' A 209  TYR  O  ', ' A 213  ILE HG13', -0.54, (15.986, -13.366, 25.532)), (' A 210  ALA  HA ', ' A 213  ILE HD12', -0.533, (13.767, -13.103, 24.237)), (' B  48  ASP  O  ', ' B  51  ASN  N  ', -0.53, (23.731, -13.291, -7.855)), (' B  45  THR  O  ', ' B  47  GLU  N  ', -0.528, (21.913, -18.389, -5.64)), (' A   4  ARG  H  ', ' B 142  ASN HD21', -0.526, (7.313, -5.951, 15.861)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.523, (-0.572, -7.468, 31.972)), (' B  51  ASN  N  ', ' B  52  PRO  HD3', -0.521, (22.781, -12.009, -7.917)), (' B  27  LEU HD21', ' B  42  VAL  HB ', -0.512, (10.044, -15.404, -3.663)), (' B  48  ASP  O  ', ' B  50  LEU  N  ', -0.51, (22.698, -13.782, -6.699)), (' A 138  GLY  HA3', ' A 172  HIS  NE2', -0.506, (-10.189, 1.121, 24.441)), (' A  52  PRO  HD2', ' A 188  ARG  HG2', -0.502, (-27.297, 0.476, 37.032)), (' A  19  GLN HE21', ' A 506  DMS  H13', -0.499, (-26.217, -2.095, 11.345)), (' B  69  GLN  OE1', ' B  74  GLN  HA ', -0.497, (-2.449, -25.808, -4.256)), (' B 127  GLN  H  ', ' B 702  DMS  H22', -0.497, (0.465, -1.99, 14.7)), (' B 175  THR HG22', ' B 181  PHE  HA ', -0.494, (10.728, -1.521, -3.9)), (' B 102  LYS  HE3', ' B 156  CYS  SG ', -0.493, (-9.707, 2.019, -3.773)), (' B  31  TRP  CE2', ' B  95  ASN  HB2', -0.487, (-7.298, -15.697, -6.066)), (' A  62  SER  OG ', ' A  65  ASN  ND2', -0.487, (-41.115, -6.309, 22.023)), (' A 166  GLU  OE1', ' A 172  HIS  CE1', -0.485, (-12.845, 3.682, 25.951)), (' A  49  MET  HB3', ' A 189  GLN  HG3', -0.481, (-25.981, 5.658, 32.42)), (' A   0  MET  HE3', ' A   3  PHE  CG ', -0.478, (9.151, -9.121, 19.187)), (' A 219  PHE  HE1', ' A 264  MET  HE1', -0.475, (17.758, -7.916, 31.129)), (' B 242  LEU HD23', ' B 246  HIS  HB2', -0.473, (5.419, 20.686, 7.059)), (' A 264  MET  HE3', ' A 267  SER  HB2', -0.469, (17.675, -7.658, 34.637)), (' B  50  LEU  HB3', ' B  51  ASN  HB2', -0.467, (26.138, -13.295, -6.877)), (' B  31  TRP  CZ2', ' B  75  LEU HD11', -0.467, (-6.891, -18.891, -6.53)), (' A 166  GLU  OE1', ' A 172  HIS  ND1', -0.466, (-13.181, 3.28, 26.512)), (' A 165  MET  HB2', ' A 165  MET  HE3', -0.464, (-20.252, 2.512, 31.485)), (' B  75  LEU  HA ', ' B  75  LEU HD23', -0.463, (-4.989, -23.442, -8.627)), (' A 233  VAL HG21', ' A 269  LYS  HD2', -0.463, (15.271, -3.132, 45.062)), (' A 137  LYS  HG3', ' A 171  VAL HG12', -0.462, (-6.341, 2.796, 30.02)), (' A  58  LEU HD22', ' A  82  MET  HB2', -0.461, (-31.889, -10.722, 30.501)), (' B 211  ALA  HA ', ' B 282  LEU HD21', -0.456, (-4.023, 13.654, 23.442)), (' B  58  LEU HD11', ' B  87  LEU HD13', -0.456, (8.677, -14.119, -12.228)), (' B 294  PHE  HZ ', ' B 298  ARG  NH2', -0.456, (-9.761, 10.723, 4.909)), (' B 294  PHE  HE1', ' B 298  ARG  HE ', -0.454, (-8.787, 9.267, 6.213)), (' B 269  LYS  HB3', ' B 269  LYS  HE3', -0.45, (9.441, 26.161, 19.867)), (' A  54  TYR  HB3', ' A  82  MET  CE ', -0.444, (-30.926, -7.111, 32.455)), (' B  48  ASP  C  ', ' B  50  LEU  N  ', -0.444, (22.889, -14.713, -6.417)), (' A 126  TYR  CD1', ' B   4  ARG  HD2', -0.443, (-5.781, -1.123, 21.559)), (' B   5  LYS  NZ ', ' B 288  GLU  OE2', -0.443, (3.09, 4.914, 17.679)), (' A   0  MET  HB3', ' A   0  MET  HE2', -0.442, (11.46, -9.195, 19.728)), (' B  86  VAL HG13', ' B 179  GLY  CA ', -0.442, (7.229, -4.656, -7.613)), (' A   1  SER  OG ', ' A  -2  GLY  N  ', -0.437, (18.261, -8.922, 16.227)), (' B 136  ILE HD13', ' B 161  TYR  CZ ', -0.433, (8.355, -2.0, 4.259)), (' B  27  LEU HD13', ' B  39  PRO  HD2', -0.433, (7.197, -13.497, -1.946)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.433, (-26.934, -2.448, 24.079)), (' B  78  ILE HG13', ' B  90  LYS  HG3', -0.433, (-2.607, -17.62, -16.188)), (' A 140  PHE  CG ', ' A 140  PHE  O  ', -0.43, (-12.189, 8.447, 21.134)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.428, (-26.096, -8.024, 32.252)), (' B 130  MET  HE1', ' B 182  TYR  CD2', -0.428, (7.328, 2.161, 1.06)), (' A 102  LYS  HB2', ' A 102  LYS  HE2', -0.426, (-11.337, -20.815, 23.143)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.426, (-24.568, -15.485, 12.66)), (' B  48  ASP  HB3', ' B  52  PRO  HB3', -0.426, (20.949, -15.071, -10.105)), (' B 232  LEU  HA ', ' B 232  LEU HD23', -0.425, (17.97, 23.977, 10.941)), (' A 108  PRO  HA ', ' A 130  MET  HG3', -0.424, (-6.129, -8.059, 33.42)), (' B 701  PEG  H11', ' B 701  PEG  H32', -0.423, (-1.9, 1.816, 27.755)), (' A 208  LEU  HB3', ' A 264  MET  HE2', -0.42, (15.785, -8.19, 31.832)), (' A   4  ARG  HD2', ' B 137  LYS  O  ', -0.419, (7.735, -2.277, 12.945)), (' B  48  ASP  C  ', ' B  50  LEU  H  ', -0.416, (23.053, -14.911, -6.426)), (' A   5  LYS  HB2', ' A   5  LYS  HE3', -0.415, (2.08, -4.138, 20.512)), (' A 108  PRO  HA ', ' A 130  MET  CG ', -0.415, (-6.207, -8.391, 33.172)), (' A  52  PRO  HG2', ' A  54  TYR  CE2', -0.412, (-28.695, -1.662, 34.989)), (' B 226  THR  OG1', ' B 229  ASP  HB2', -0.41, (12.014, 30.641, 12.632)), (' A 141  LEU HD22', ' A 144  SER  CB ', -0.41, (-16.792, 2.029, 19.562)), (' A  67  LEU HD13', ' A  74  GLN HE21', -0.408, (-35.195, -4.266, 12.392)), (' A  41  HIS  HA ', ' A  54  TYR  HE1', -0.406, (-28.779, -2.614, 30.663)), (' A  19  GLN  OE1', ' A 502  PEG  H12', -0.403, (-27.18, 1.739, 12.957)), (' A 130  MET  HE1', ' A 136  ILE HD11', -0.401, (-10.278, -6.292, 30.375)), (' B 294  PHE  O  ', ' B 298  ARG  N  ', -0.4, (-8.065, 10.985, 10.404))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
