# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 154 ', 'TYR', 0.046972532925131545, (-13.787, -3.8059999999999996, -2.411)), ('B', ' 277 ', 'ASN', 0.00801794409208293, (10.223, -17.929999999999993, -32.308))]
data['omega'] = []
data['rota'] = [('A', '   4 ', 'ARG', 0.0172940531725016, (5.623, 3.8730000000000007, -17.776999999999997)), ('A', ' 154 ', 'TYR', 0.13510329919282218, (-3.866000000000002, 21.685, -17.163)), ('A', ' 189 ', 'GLN', 0.034941700297030434, (-24.053000000000004, -5.652000000000004, -35.901999999999994)), ('A', ' 235 ', 'MET', 0.0, (6.611, 1.911, -45.473)), ('B', '  50 ', 'LEU', 0.018376626122621562, (24.491000000000003, 13.285, 3.913)), ('B', '  57 ', 'LEU', 0.25246110881211176, (16.863, 17.539, 13.498)), ('B', '  69 ', 'GLN', 0.039532454778999776, (-1.499000000000001, 23.009, 1.7259999999999998))]
data['cbeta'] = []
data['probe'] = [(' A 163  HIS  O  ', ' A 501  HOH  O  ', -0.907, (-19.686, 4.084, -26.378)), (' A 162  MET  SD ', ' A 512  HOH  O  ', -0.904, (-20.852, 7.726, -26.72)), (' A 162  MET  HG2', ' A 501  HOH  O  ', -0.853, (-19.333, 5.237, -26.005)), (' A 228  ASN  ND2', ' A 503  HOH  O  ', -0.845, (13.723, 9.537, -52.961)), (' A 147  SER  O  ', ' A 502  HOH  O  ', -0.842, (-17.097, 5.048, -24.189)), (' A  61  LYS  NZ ', ' A 504  HOH  O  ', -0.796, (-37.653, 1.803, -28.741)), (' A 163  HIS  N  ', ' A 502  HOH  O  ', -0.691, (-18.299, 4.487, -24.927)), (' A 164  HIS  ND1', ' A 506  HOH  O  ', -0.675, (-21.995, 4.037, -31.385)), (' A  42  VAL  N  ', ' A 505  HOH  O  ', -0.661, (-26.843, 2.456, -26.729)), (' B 156  CYS  O  ', ' B 501  HOH  O  ', -0.596, (-8.535, -1.655, -0.259)), (' B  56  ASP  OD1', ' B  60  ARG  NH1', -0.592, (19.544, 18.47, 18.205)), (' B 277  ASN  HB3', ' B 279  ARG  HG3', -0.536, (7.853, -17.779, -33.575)), (' A 181  PHE  N  ', ' A 508  HOH  O  ', -0.526, (-20.023, 8.032, -35.056)), (' B 279  ARG  NH1', ' B 506  HOH  O  ', -0.519, (2.112, -20.56, -33.784)), (' A  39  PRO  HB2', ' A 505  HOH  O  ', -0.51, (-25.329, 2.689, -26.563)), (' A  50  LEU  O  ', ' A 188  ARG  HD2', -0.5, (-27.297, -3.291, -39.457)), (' A  27  LEU HD21', ' A 505  HOH  O  ', -0.494, (-25.846, 1.909, -25.551)), (' A  38  CYS  SG ', ' A 713  HOH  O  ', -0.489, (-26.879, 5.296, -22.432)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.47, (6.301, -9.813, -8.107)), (' A  49  MET  HB3', ' A 189  GLN HE21', -0.466, (-26.625, -6.304, -33.236)), (' A  45  THR  H  ', ' A  48  ASP  HB2', -0.465, (-33.227, -3.65, -30.354)), (' A   5  LYS  HD2', ' B 644  HOH  O  ', -0.453, (2.131, -0.482, -20.441)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.441, (-9.852, 7.904, -21.878)), (' B  47  GLU  CD ', ' B  47  GLU  H  ', -0.438, (23.06, 20.422, 3.119)), (' B  95  ASN  HB3', ' B  98  THR  OG1', -0.433, (-9.439, 12.798, 5.423)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.431, (0.299, 3.277, -5.487)), (' B 155  ASP  N  ', ' B 155  ASP  OD1', -0.427, (-14.328, -1.917, 0.039)), (' B 175  THR HG22', ' B 181  PHE  HA ', -0.42, (10.871, 1.975, 3.802)), (' B  55  GLU  O  ', ' B  59  ILE HG12', -0.415, (15.053, 15.557, 17.88)), (' B 112  PHE  HZ ', ' B 136  ILE HG21', -0.413, (6.167, -0.098, -5.563)), (' A 288  GLU  HG2', ' A 291  PHE  CE2', -0.407, (5.618, 2.971, -25.16)), (' A 189  GLN  HB2', ' A 189  GLN HE21', -0.406, (-25.619, -5.838, -33.63))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
