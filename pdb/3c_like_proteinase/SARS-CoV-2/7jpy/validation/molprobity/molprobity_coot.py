# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.016812810970863602, (10.892000000000005, -10.255000000000004, -8.039))]
data['omega'] = []
data['rota'] = []
data['cbeta'] = [('A', ' 222 ', 'ARG', ' ', 0.2669663803483821, (1.4480000000000004, 30.469000000000012, -6.693))]
data['probe'] = [(' A  68  VAL  O  ', ' A  74  GLN  OE1', -1.191, (38.921, -21.181, -9.673)), (' A  74  GLN  HG3', ' A  75  LEU  N  ', -1.037, (38.327, -22.737, -10.104)), (' A  74  GLN  HG3', ' A  75  LEU  H  ', -0.817, (37.656, -22.398, -10.257)), (' A   4  ARG  NH1', ' A 401  HOH  O  ', -0.783, (20.082, 6.193, 3.455)), (' A   4  ARG  NH2', ' A 406  HOH  O  ', -0.619, (18.488, 7.941, 6.862)), (' A 139  SER  O  ', ' A 402  HOH  O  ', -0.617, (32.41, 1.248, -6.01)), (' A  68  VAL  C  ', ' A  74  GLN  OE1', -0.588, (39.538, -19.822, -9.266)), (' A  74  GLN  CG ', ' A  75  LEU  N  ', -0.58, (38.268, -23.553, -9.388)), (' A 152  ILE HD12', ' A 157  VAL HG22', -0.563, (18.619, -9.926, -8.928)), (' A 222  ARG  HD3', ' A 222  ARG  O  ', -0.552, (-0.177, 30.121, -8.858)), (' A 298  ARG  HG3', ' A 303  VAL  HB ', -0.55, (8.868, -1.851, -5.417)), (' A  68  VAL  O  ', ' A  74  GLN  CD ', -0.52, (38.898, -21.525, -8.991)), (' A  74  GLN  CA ', ' A  74  GLN  NE2', -0.495, (38.468, -22.709, -6.866)), (' A  69  GLN  HA ', ' A  74  GLN  OE1', -0.479, (38.655, -20.191, -7.813)), (' A   6  MET  HB2', ' A   6  MET  HE3', -0.478, (15.224, 3.126, -0.419)), (' A 222  ARG  C  ', ' A 222  ARG  HD3', -0.474, (0.736, 30.243, -8.619)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.467, (32.38, -6.477, -21.569)), (' A  92  ASP  OD2', ' A 403  HOH  O  ', -0.457, (36.93, -29.769, -13.257)), (' A  75  LEU  HB3', ' A  91  VAL  HB ', -0.454, (34.956, -22.753, -13.357)), (' A 221  ASN  ND2', ' A 223  PHE  HD1', -0.444, (4.959, 29.032, -9.096)), (' A  75  LEU  N  ', ' A  75  LEU HD23', -0.443, (35.799, -23.408, -9.769)), (' A 235  MET  HA ', ' A 235  MET  HE2', -0.44, (18.085, 22.395, -21.564)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.426, (24.449, -2.804, -9.495)), (' A  73  VAL HG12', ' A  74  GLN  N  ', -0.426, (35.198, -24.36, -6.406)), (' A 152  ILE  CD1', ' A 157  VAL HG22', -0.423, (18.686, -9.514, -8.566)), (' A 198  THR  OG1', ' A 240  GLU  OE2', -0.422, (21.087, 15.419, -19.66)), (' A 210  ALA  HB2', ' A 296  VAL HG13', -0.419, (9.003, 9.533, -4.555)), (' A  74  GLN  C  ', ' A  75  LEU HD23', -0.411, (35.353, -23.641, -9.504)), (' A 217  ARG  HG3', ' A 217  ARG HH21', -0.407, (2.638, 21.955, 1.91)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.403, (25.394, -20.185, -11.372))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
