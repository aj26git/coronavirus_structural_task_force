# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   2 ', 'SER', 0.14496188457801296, (149.163, 171.426, 145.236)), ('A', ' 245 ', 'GLN', 0.019505341571019526, (168.23999999999995, 128.309, 117.246)), ('A', ' 314 ', 'VAL', 0.06309235501153479, (191.447, 136.351, 113.545)), ('B', '   2 ', 'SER', 0.14518180750560075, (124.85500000000006, 136.615, 145.12999999999997)), ('B', ' 245 ', 'GLN', 0.01931460869804324, (152.371, 174.877, 117.106)), ('B', ' 314 ', 'VAL', 0.063032679863131, (133.69999999999993, 190.847, 113.456)), ('C', '   2 ', 'SER', 0.14470973813842028, (167.041, 132.667, 145.14)), ('C', ' 245 ', 'GLN', 0.019291381312764155, (120.20600000000005, 137.881, 117.109)), ('C', ' 314 ', 'VAL', 0.06304848688301627, (115.50599999999999, 113.78099999999996, 113.36)), ('D', '   2 ', 'SER', 0.14430117223560426, (144.495, 171.465, 148.663)), ('D', ' 245 ', 'GLN', 0.01938168153387707, (125.54300000000005, 128.335, 176.719)), ('D', ' 314 ', 'VAL', 0.06310596799596936, (102.35400000000004, 136.376, 180.53)), ('E', '   2 ', 'SER', 0.14527924019109317, (169.32699999999997, 136.644, 148.694)), ('E', ' 245 ', 'GLN', 0.01945804756551558, (141.58, 174.815, 176.615)), ('E', ' 314 ', 'VAL', 0.06298519865904637, (160.18199999999993, 190.85, 180.32799999999997)), ('F', '   2 ', 'SER', 0.14512432545937473, (126.89400000000003, 132.907, 148.791)), ('F', ' 245 ', 'GLN', 0.01925194185949827, (173.815, 137.739, 176.747)), ('F', ' 314 ', 'VAL', 0.06288524179621435, (178.385, 113.598, 180.388))]
data['cbeta'] = []
data['probe'] = [(' C 235  HIS  NE2', ' C 402  PO4  O1 ', -0.827, (122.576, 128.837, 113.08)), (' E 235  HIS  NE2', ' E 402  PO4  O3 ', -0.826, (149.794, 177.599, 180.291)), (' D 235  HIS  NE2', ' D 402  PO4  O3 ', -0.822, (119.068, 133.991, 180.362)), (' A 235  HIS  NE2', ' A 402  PO4  O1 ', -0.819, (174.928, 134.993, 113.23)), (' F 235  HIS  NE2', ' F 402  PO4  O3 ', -0.816, (172.036, 129.285, 180.408)), (' B 235  HIS  NE2', ' B 402  PO4  O1 ', -0.798, (143.271, 177.367, 113.112)), (' B   2  SER  HB2', ' F   2  SER  HB2', -0.696, (125.754, 134.2, 146.929)), (' F 290  LYS  NZ ', ' F 402  PO4  O4 ', -0.686, (170.162, 130.809, 176.502)), (' A 290  LYS  NZ ', ' A 402  PO4  O3 ', -0.685, (172.411, 134.672, 116.322)), (' B 290  LYS  NZ ', ' B 402  PO4  O3 ', -0.684, (144.98, 174.859, 116.421)), (' C 290  LYS  NZ ', ' C 402  PO4  O3 ', -0.684, (123.576, 131.145, 116.154)), (' D 290  LYS  NZ ', ' D 402  PO4  O4 ', -0.675, (120.981, 134.882, 176.98)), (' E 290  LYS  NZ ', ' E 402  PO4  O4 ', -0.671, (149.61, 175.47, 176.674)), (' D 157  GLY  O  ', ' D 176  GLN  NE2', -0.567, (120.906, 166.284, 178.212)), (' B 157  GLY  O  ', ' B 176  GLN  NE2', -0.557, (117.654, 159.554, 115.457)), (' C 199  ARG HH12', ' C 211  GLU  CD ', -0.539, (141.554, 126.165, 106.907)), (' F 157  GLY  O  ', ' F 176  GLN  NE2', -0.539, (143.231, 114.643, 178.366)), (' C 157  GLY  O  ', ' C 176  GLN  NE2', -0.536, (150.663, 114.644, 115.434)), (' E 199  ARG HH12', ' E 211  GLU  CD ', -0.534, (162.176, 162.537, 186.545)), (' D 199  ARG HH12', ' D 211  GLU  CD ', -0.533, (125.761, 152.53, 186.574)), (' E 248  GLY  H  ', ' E 402  PO4  P  ', -0.531, (149.373, 175.727, 178.835)), (' B 199  ARG HH12', ' B 211  GLU  CD ', -0.529, (132.022, 162.018, 107.366)), (' F 199  ARG HH12', ' F 211  GLU  CD ', -0.528, (152.276, 126.049, 186.34)), (' C 248  GLY  H  ', ' C 402  PO4  P  ', -0.528, (122.911, 130.212, 114.796)), (' B 311  ASP  OD1', ' B 313  SER  OG ', -0.527, (129.427, 190.87, 110.65)), (' F 248  GLY  H  ', ' F 402  PO4  P  ', -0.526, (170.808, 130.71, 178.826)), (' B 248  GLY  H  ', ' B 402  PO4  P  ', -0.526, (144.417, 176.386, 114.651)), (' A 199  ARG HH12', ' A 211  GLU  CD ', -0.525, (167.635, 152.468, 107.05)), (' F 219  MET  HG3', ' F 238  TYR  CE2', -0.523, (165.979, 130.213, 191.541)), (' D 248  GLY  H  ', ' D 402  PO4  P  ', -0.523, (120.589, 134.412, 178.59)), (' A 248  GLY  H  ', ' A 402  PO4  P  ', -0.523, (173.534, 134.233, 114.722)), (' D 219  MET  HG3', ' D 238  TYR  CE2', -0.521, (122.799, 139.142, 191.222)), (' A 219  MET  HG3', ' A 238  TYR  CE2', -0.521, (171.051, 139.097, 101.981)), (' B 219  MET  HG3', ' B 238  TYR  CE2', -0.521, (141.274, 171.52, 102.038)), (' C 219  MET  HG3', ' C 238  TYR  CE2', -0.52, (128.543, 129.852, 102.006)), (' E 219  MET  HG3', ' E 238  TYR  CE2', -0.518, (152.461, 171.803, 191.246)), (' A 157  GLY  O  ', ' A 176  GLN  NE2', -0.517, (173.307, 166.354, 115.396)), (' A  27  ILE HD12', ' D  27  ILE HD12', -0.513, (147.138, 161.168, 146.985)), (' E 157  GLY  O  ', ' E 176  GLN  NE2', -0.512, (176.995, 160.007, 178.287)), (' C 228  LEU HD23', ' C 308  LYS  HE3', -0.505, (129.125, 118.116, 101.847)), (' F 228  LEU HD23', ' F 308  LYS  HE3', -0.505, (164.883, 118.397, 191.7)), (' D 228  LEU HD23', ' D 308  LYS  HE3', -0.501, (113.259, 145.626, 191.697)), (' B 228  LEU HD23', ' B 308  LYS  HE3', -0.5, (131.242, 177.039, 101.951)), (' A 228  LEU HD23', ' A 308  LYS  HE3', -0.5, (181.032, 145.854, 102.095)), (' A   2  SER  HB2', ' D   2  SER  HB2', -0.499, (146.896, 172.233, 146.617)), (' E 228  LEU HD23', ' E 308  LYS  HE3', -0.498, (163.053, 177.399, 191.599)), (' C   2  SER  HB2', ' E   2  SER  HB2', -0.497, (168.922, 134.627, 146.789)), (' B 194  TYR  OH ', ' B 305  GLU  OE1', -0.49, (122.125, 173.313, 109.959)), (' A 239  GLY  HA3', ' A 249  LEU HD13', -0.483, (167.319, 137.1, 110.418)), (' D 311  ASP  OD1', ' D 313  SER  OG ', -0.482, (100.157, 140.037, 183.125)), (' C 239  GLY  HA3', ' C 249  LEU HD13', -0.482, (127.969, 134.071, 109.932)), (' C 331  MET  O  ', ' C 342  PHE  HA ', -0.482, (123.937, 121.027, 115.529)), (' D 331  MET  O  ', ' D 342  PHE  HA ', -0.48, (113.152, 139.63, 178.167)), (' F 239  GLY  HA3', ' F 249  LEU HD13', -0.48, (166.131, 133.8, 183.677)), (' B 331  MET  O  ', ' B 342  PHE  HA ', -0.473, (135.967, 179.935, 115.643)), (' E 239  GLY  HA3', ' E 249  LEU HD13', -0.472, (148.704, 170.134, 183.37)), (' E 331  MET  O  ', ' E 342  PHE  HA ', -0.472, (157.646, 179.676, 177.962)), (' D 239  GLY  HA3', ' D 249  LEU HD13', -0.472, (126.144, 137.344, 183.389)), (' D 194  TYR  OH ', ' D 305  GLU  OE1', -0.47, (111.624, 155.235, 184.016)), (' A 331  MET  O  ', ' A 342  PHE  HA ', -0.469, (180.882, 140.019, 115.732)), (' F 331  MET  O  ', ' F 342  PHE  HA ', -0.466, (170.049, 121.25, 178.092)), (' F 311  ASP  OD1', ' F 313  SER  OG ', -0.463, (176.324, 109.991, 183.235)), (' B 239  GLY  HA3', ' B 249  LEU HD13', -0.46, (145.112, 170.081, 109.989)), (' E 133  ASP  OD2', ' E 136  ARG  NH1', -0.458, (192.737, 155.406, 164.499)), (' D 133  ASP  OD2', ' D 136  ARG  NH1', -0.458, (116.721, 182.747, 164.394)), (' B 133  ASP  OD2', ' B 136  ARG  NH1', -0.458, (101.235, 154.655, 129.413)), (' F 133  ASP  OD2', ' F 136  ARG  NH1', -0.454, (131.023, 103.082, 164.272)), (' C 133  ASP  OD2', ' C 136  ARG  NH1', -0.454, (162.747, 103.076, 128.988)), (' A 133  ASP  OD2', ' A 136  ARG  NH1', -0.452, (177.054, 182.425, 129.276)), (' B 201  LEU  HA ', ' B 201  LEU HD23', -0.445, (139.758, 159.476, 112.194)), (' C 201  LEU  HA ', ' C 201  LEU HD23', -0.44, (139.842, 134.455, 112.239)), (' E 201  LEU  HA ', ' E 201  LEU HD23', -0.437, (154.337, 159.999, 181.106)), (' D 269  PHE  CD2', ' D 270  ILE HG13', -0.432, (127.803, 141.335, 164.889)), (' E 311  ASP  OD1', ' E 313  SER  OG ', -0.431, (164.315, 190.842, 183.266)), (' A 269  PHE  CD2', ' A 270  ILE HG13', -0.43, (165.976, 141.713, 129.205)), (' E 269  PHE  CD2', ' E 270  ILE HG13', -0.43, (152.085, 166.179, 164.726)), (' A   4  GLU  N  ', ' A   4  GLU  OE1', -0.429, (145.314, 168.981, 144.758)), (' C 269  PHE  CD2', ' C 270  ILE HG13', -0.427, (132.54, 133.266, 128.923)), (' B 250  HIS  CD2', ' B 343  TYR  HB3', -0.426, (139.415, 175.418, 115.973)), (' C 314  VAL  O  ', ' C 334  CYS  HB2', -0.425, (116.859, 116.661, 112.111)), (' F 314  VAL  O  ', ' F 334  CYS  HB2', -0.425, (177.225, 116.306, 181.294)), (' B 314  VAL  O  ', ' B 334  CYS  HB2', -0.425, (135.392, 188.44, 112.55)), (' B 269  PHE  CD2', ' B 270  ILE HG13', -0.425, (142.274, 166.478, 128.924)), (' F 250  HIS  CD2', ' F 343  TYR  HB3', -0.424, (167.84, 126.236, 177.88)), (' F 269  PHE  CD2', ' F 270  ILE HG13', -0.423, (161.195, 132.907, 164.808)), (' D 314  VAL  O  ', ' D 334  CYS  HB2', -0.423, (105.479, 136.084, 181.801)), (' C   4  GLU  N  ', ' C   4  GLU  OE1', -0.422, (167.065, 137.24, 144.648)), (' A 250  HIS  CD2', ' A 343  TYR  HB3', -0.422, (174.844, 139.219, 115.923)), (' F   4  GLU  N  ', ' F   4  GLU  OE1', -0.42, (127.157, 137.441, 149.263)), (' E   4  GLU  N  ', ' E   4  GLU  OE1', -0.419, (165.224, 134.519, 149.189)), (' E 250  HIS  CD2', ' E 343  TYR  HB3', -0.418, (154.281, 175.057, 177.913)), (' D 201  LEU HD21', ' D 255  LEU  HB3', -0.417, (130.942, 143.862, 180.899)), (' D 250  HIS  CD2', ' D 343  TYR  HB3', -0.417, (118.508, 139.215, 177.966)), (' D 270  ILE HD11', ' F  11  VAL  O  ', -0.416, (125.043, 141.467, 163.695)), (' E 314  VAL  O  ', ' E 334  CYS  HB2', -0.416, (158.406, 188.215, 181.581)), (' B  11  VAL  O  ', ' C 270  ILE HD11', -0.415, (130.893, 130.733, 130.211)), (' B 201  LEU HD21', ' B 255  LEU  HB3', -0.415, (141.643, 162.414, 112.929)), (' A 314  VAL  O  ', ' A 334  CYS  HB2', -0.415, (188.507, 136.214, 112.63)), (' A 201  LEU HD21', ' A 255  LEU  HB3', -0.415, (163.053, 143.468, 113.066)), (' E 201  LEU HD21', ' E 255  LEU  HB3', -0.413, (152.037, 162.693, 180.819)), (' C 250  HIS  CD2', ' C 343  TYR  HB3', -0.411, (126.273, 126.59, 115.607)), (" C 401  U5P  C5'", ' C 401  U5P  H6 ', -0.41, (122.005, 129.124, 122.112)), (" B 401  U5P  C5'", ' B 401  U5P  H6 ', -0.41, (143.64, 177.34, 122.336)), (" F 401  U5P  C5'", ' F 401  U5P  H6 ', -0.408, (171.634, 128.956, 171.456)), (' F 194  TYR  OH ', ' F 305  GLU  OE1', -0.408, (157.175, 112.351, 183.858)), (" D 401  U5P  C5'", ' D 401  U5P  H6 ', -0.407, (118.809, 134.294, 171.698)), (' B   4  GLU  N  ', ' B   4  GLU  OE1', -0.407, (128.963, 134.614, 144.658)), (' F 201  LEU  HA ', ' F 201  LEU HD23', -0.407, (154.123, 134.247, 181.386)), (' F 201  LEU HD21', ' F 255  LEU  HB3', -0.406, (158.085, 134.66, 180.89)), (" E 401  U5P  C5'", ' E 401  U5P  H6 ', -0.405, (150.057, 177.528, 171.649)), (' C 201  LEU HD21', ' C 255  LEU  HB3', -0.405, (136.338, 134.79, 112.972)), (" A 401  U5P  C5'", ' A 401  U5P  H6 ', -0.403, (174.835, 134.272, 122.214)), (' D 231  TYR  CE1', ' D 312  LEU HD11', -0.4, (108.588, 141.976, 187.625))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
