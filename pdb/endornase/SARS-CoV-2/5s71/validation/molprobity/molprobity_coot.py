# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  28 ', 'ASN', 0.04861388263285399, (0.05799999999997345, -80.832, 33.294))]
data['omega'] = []
data['rota'] = [('A', '  28 ', 'ASN', 0.08873056591437983, (-0.8340000000000296, -81.346, 32.041)), ('A', '  34 ', 'LYS', 0.021680334640249186, (-6.7530000000000125, -66.922, 27.638)), ('A', ' 226 ', 'LYS', 0.19018184310071332, (30.918999999999986, -99.363, -14.12)), ('A', ' 259 ', 'LYS', 0.0, (8.35299999999998, -94.60899999999997, -5.497)), ('B', '  28 ', 'ASN', 0.022240915261794215, (73.199, -38.41, -17.054)), ('B', '  34 ', 'LYS', 0.02074083065542404, (71.506, -22.77, -12.606)), ('B', ' 188 ', 'GLN', 0.26384303679054677, (33.60099999999999, -56.963999999999984, 2.82)), ('B', ' 226 ', 'LYS', 0.011411709948537912, (53.935, -69.212, 29.049)), ('B', ' 266 ', 'GLU', 0.007087038902972569, (70.96, -57.603, 2.329)), ('B', ' 345 ', 'LEU', 0.02355232576894293, (59.513999999999996, -68.637, 0.942))]
data['cbeta'] = []
data['probe'] = [(' B 402  WUV  C09', ' B 402  WUV  O12', -1.252, (61.832, -39.68, -3.357)), (' A 402  WUV  C09', ' A 402  WUV  O12', -1.061, (4.411, -99.507, 17.74)), (' A 212  ASP  O  ', ' A 216  LEU  HB2', -0.665, (19.279, -94.05, -13.963)), (' B 212  ASP  O  ', ' B 216  LEU  HB2', -0.657, (62.067, -59.381, 28.857)), (' B 266 AGLU  HB3', ' B 279  PHE  HB3', -0.61, (71.298, -60.172, 1.528)), (' B  90  ARG  NH2', ' B  93  PRO  O  ', -0.582, (56.739, -47.594, -8.509)), (' A  27  ILE HG12', ' A  28 AASN  ND2', -0.573, (-4.073, -80.246, 31.598)), (' A 266  GLU  HB3', ' A 279  PHE  HB3', -0.573, (11.007, -100.121, 13.179)), (' A  90  ARG  NH2', ' A  93  PRO  O  ', -0.562, (17.849, -81.533, 22.982)), (' B 200  LEU HD11', ' B 254  LEU  HB3', -0.522, (66.364, -56.345, 13.324)), (' B  57  LEU HD11', ' B 105  THR HG21', -0.504, (54.87, -41.028, -15.276)), (' A 200  LEU HD11', ' A 254  LEU  HB3', -0.488, (13.846, -94.341, 1.355)), (' A  27  ILE HG23', ' A  32  TYR  HE1', -0.485, (-3.293, -77.5, 30.431)), (' B 138  ARG  HG2', ' B 139  ASN  ND2', -0.483, (35.737, -52.589, -12.501)), (' A  57  LEU HD11', ' A 105  THR HG21', -0.482, (16.859, -75.282, 29.855)), (' A  89  LYS  HB2', ' A 533  HOH  O  ', -0.475, (16.559, -84.822, 16.31)), (' A  27  ILE HG23', ' A  32  TYR  CE1', -0.457, (-3.714, -77.064, 29.981)), (' A  28 AASN  ND2', ' A 507  HOH  O  ', -0.456, (-4.757, -81.144, 29.695)), (' B 344  LYS  HE2', ' B 346  GLN  HB3', -0.434, (55.481, -71.47, -0.732)), (' B  84  VAL HG23', ' B 101  VAL HG11', -0.431, (51.36, -37.748, -10.776)), (' A  12  LYS  HE3', ' A  18  GLN  HG3', -0.427, (8.205, -57.551, 20.859)), (' B 127  VAL  HB ', ' B 130  GLN  HG3', -0.425, (39.6, -36.625, -3.913)), (' B   8  ASN  HB3', ' B  15  PHE  HA ', -0.424, (55.825, -27.668, -8.086)), (' A 151  LEU  CD2', ' B 308  SER  HB3', -0.424, (43.497, -69.488, 15.945)), (' B  12  LYS  HE3', ' B  18  GLN  HG3', -0.422, (54.282, -21.521, -5.646)), (' A 127  VAL  HB ', ' A 130  GLN  HG3', -0.415, (28.06, -64.028, 19.465)), (' A  84  VAL  CG2', ' A 101  VAL HG11', -0.411, (18.121, -70.715, 26.07)), (' A   8  ASN  HB3', ' A  15  PHE  HA ', -0.409, (9.174, -63.486, 23.365)), (' B  84  VAL  CG2', ' B 101  VAL HG11', -0.409, (51.456, -37.746, -10.801)), (' B 266 BGLU  HB3', ' B 279  PHE  HB3', -0.408, (71.79, -60.554, 1.994))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
