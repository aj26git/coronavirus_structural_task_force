# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  27 ', 'ILE', 0.03567837361391759, (-1.928000000000038, -78.002, 33.546)), ('A', '  28 ', 'ASN', 0.17242305521636564, (-0.4870000000000283, -81.524, 32.648)), ('A', ' 109 ', 'LYS', 0.02984719556116719, (25.61799999999999, -65.78800000000003, 32.851)), ('A', ' 114 ', 'THR', 0.10115433105959029, (35.23099999999997, -70.922, 35.217)), ('A', ' 245 ', 'LEU', 0.25203923135496065, (15.738, -107.35900000000002, 4.3)), ('A', ' 266 ', 'GLU', 0.04560345357480636, (10.548999999999985, -97.466, 13.058)), ('A', ' 326 ', 'GLU', 0.12750282748847866, (34.519, -91.22500000000002, 12.31)), ('B', '  28 ', 'ASN', 0.12276208727984797, (73.00899999999997, -38.649, -17.414)), ('B', ' 114 ', 'THR', 0.03141468132213686, (36.326, -45.889, -19.76)), ('B', ' 266 ', 'GLU', 0.04497185868834288, (70.956, -57.615, 2.175)), ('B', ' 330 ', 'MET', 0.17463050398498814, (55.10399999999999, -72.809, 7.212)), ('B', ' 345 ', 'LEU', 0.045362356909401144, (59.444, -68.423, 0.9750000000000001)), ('B', ' 346 ', 'GLN', 0.1643549163484517, (57.10399999999999, -69.23400000000002, -1.9700000000000002))]
data['cbeta'] = [('A', '  27 ', 'ILE', ' ', 0.31488663529194416, (-3.486000000000016, -77.93100000000003, 33.53))]
data['probe'] = [(' B 200  LEU HD11', ' B 254  LEU  HB3', -0.589, (66.724, -56.784, 12.901)), (' A 200  LEU HD11', ' A 254  LEU  HB3', -0.585, (14.27, -94.575, 1.694)), (' A  12  LYS  HE3', ' A  18  GLN  HG3', -0.529, (7.774, -57.595, 20.639)), (' B  12  LYS  HE3', ' B  18  GLN  HG3', -0.523, (54.72, -21.234, -5.977)), (' B  57  LEU HD11', ' B 105  THR HG21', -0.483, (55.012, -40.809, -15.088)), (' A  27  ILE HG23', ' A  32  TYR  CE1', -0.477, (-3.799, -77.24, 30.844)), (' B  84  VAL HG23', ' B 101  VAL HG11', -0.462, (51.302, -37.738, -10.942)), (' A  57  LEU HD11', ' A 105  THR HG21', -0.453, (16.757, -75.127, 30.216)), (' A  43  PHE  HA ', ' A 402  WUM  C08', -0.447, (3.246, -75.58, 22.768)), (' A  84  VAL HG23', ' A 101  VAL HG11', -0.436, (17.99, -70.442, 26.225)), (' B 127  VAL  HB ', ' B 130  GLN  HG3', -0.435, (39.72, -36.527, -4.0)), (' B  84  VAL  CG2', ' B 101  VAL HG11', -0.435, (51.392, -37.742, -10.985)), (' A 127  VAL  HB ', ' A 130  GLN  HG3', -0.427, (27.571, -64.011, 19.36)), (' A  84  VAL  CG2', ' A 101  VAL HG11', -0.424, (17.963, -70.941, 26.086)), (' B 218  MET  HG3', ' B 237  TYR  CE2', -0.42, (63.716, -65.495, 23.796)), (' A 218  MET  HG3', ' A 237  TYR  CE2', -0.415, (20.489, -101.318, -8.782)), (' B  90  ARG  NH2', ' B  93  PRO  O  ', -0.413, (56.787, -47.567, -8.735)), (' A  90  ARG  NH2', ' A  93  PRO  O  ', -0.406, (17.941, -81.745, 23.811)), (' B   8  ASN  HB3', ' B  15  PHE  HA ', -0.402, (55.961, -27.625, -8.186)), (' A  27  ILE HG23', ' A  32  TYR  HE1', -0.4, (-3.133, -77.141, 30.666))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
