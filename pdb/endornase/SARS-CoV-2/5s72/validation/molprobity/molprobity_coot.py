# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  28 ', 'ASN', 0.006981550808154627, (-0.2030000000000009, -81.12800000000003, 33.394)), ('A', '  36 ', 'ASP', 0.011294897174195826, (-10.635999999999994, -63.912, 25.597)), ('B', '  28 ', 'ASN', 0.011011240897983054, (72.462, -38.503, -18.111)), ('B', '  28 ', 'ASN', 0.017844498021556965, (71.803, -38.262, -18.647)), ('B', '  36 ', 'ASP', 0.009897328587441556, (73.501, -18.267000000000007, -10.419))]
data['omega'] = []
data['rota'] = [('A', '  27 ', 'ILE', 0.0024033399278192134, (-2.1690000000000373, -77.774, 33.447)), ('A', '  64 ', 'LYS', 0.057094642675547376, (18.481, -67.859, 12.901)), ('A', '  90 ', 'ARG', 0.004871850909191873, (12.889999999999995, -84.371, 19.967)), ('A', ' 109 ', 'LYS', 0.009143827491841717, (25.610999999999994, -65.649, 32.829)), ('A', ' 167 ', 'LEU', 0.24998093345480546, (17.549999999999994, -75.952, 4.178)), ('A', ' 259 ', 'LYS', 0.26034737499113453, (7.8530000000000015, -94.117, -5.131)), ('A', ' 266 ', 'GLU', 0.11858870108434759, (10.594000000000001, -97.24100000000003, 13.166)), ('A', ' 273 ', 'SER', 0.1106288040279586, (22.691999999999975, -88.587, 14.014)), ('A', ' 287 ', 'SER', 0.05359990173019469, (10.926999999999978, -108.356, 4.262)), ('A', ' 326 ', 'GLU', 0.23567399141626316, (34.600999999999985, -91.156, 12.265)), ('A', ' 345 ', 'LEU', 0.0863898257139599, (26.843, -101.809, 14.303)), ('B', '  25 ', 'SER', 0.2773038978181862, (69.747, -28.741, -18.15)), ('B', '  47 ', 'THR', 0.035122545921990496, (63.35799999999999, -44.995, -12.307)), ('B', '  64 ', 'LYS', 0.07080179578811385, (49.86199999999999, -35.606, 2.539)), ('B', '  83 ', 'THR', 0.2696043750927408, (47.80499999999999, -37.72, -7.722)), ('B', ' 109 ', 'LYS', 0.009721199744306977, (42.297, -36.841, -17.256)), ('B', ' 119 ', 'LEU', 0.0017565919269583875, (41.57200000000002, -50.853, -13.093)), ('B', ' 186 ', 'VAL', 0.21709249499191258, (31.092000000000002, -52.707, -2.556)), ('B', ' 191 ', 'GLU', 0.03179818795929919, (39.486, -59.355000000000004, 9.16)), ('B', ' 250 ', 'LEU', 0.2596810761983427, (60.10999999999998, -61.237000000000016, 13.625)), ('B', ' 264 ', 'GLU', 0.2823539997858681, (74.063, -57.207000000000015, 7.487000000000001)), ('B', ' 266 ', 'GLU', 0.11998328564449966, (70.787, -57.434, 2.199)), ('B', ' 273 ', 'SER', 0.10719395196889304, (55.92599999999999, -55.856, 1.086)), ('B', ' 287 ', 'SER', 0.05359990173019469, (75.85999999999999, -67.321, 11.136)), ('B', ' 303 ', 'VAL', 0.08798093088027271, (51.940999999999995, -64.757, 20.021)), ('B', ' 345 ', 'LEU', 0.1309633647661037, (58.756, -68.55, 0.72)), ('B', ' 346 ', 'GLN', 0.0, (56.265, -67.904, -2.207))]
data['cbeta'] = []
data['probe'] = [(' A 127  VAL  HB ', ' A 130  GLN  HG3', -0.638, (27.654, -63.875, 18.695)), (' B 127  VAL  HB ', ' B 130  GLN  HG3', -0.638, (39.944, -36.594, -3.973)), (' B 200  LEU HD11', ' B 254  LEU  HB3', -0.611, (66.537, -56.523, 13.016)), (' A 200  LEU HD11', ' A 254  LEU  HB3', -0.591, (13.707, -93.996, 1.58)), (' B  14  HIS  CE1', ' B  63  ILE HD13', -0.589, (52.979, -30.332, -1.945)), (' B  57  LEU HD11', ' B 105  THR HG21', -0.589, (54.867, -41.074, -15.561)), (' A  14  HIS  CE1', ' A  63  ILE HD13', -0.587, (13.078, -64.168, 16.621)), (' B 212  ASP  O  ', ' B 216  LEU  HB2', -0.572, (61.994, -59.248, 28.851)), (' B 249  HIS  NE2', ' B 401  CIT  O5 ', -0.569, (63.403, -68.785, 9.688)), (' A 204  LYS  HE3', ' A 514  HOH  O  ', -0.562, (13.005, -81.484, -1.94)), (' B   3  GLU  HB3', ' B  21  GLU  HB3', -0.559, (61.117, -22.71, -17.513)), (' A   3  GLU  HB3', ' A  21  GLU  HB3', -0.555, (2.557, -61.435, 32.309)), (' A  57  LEU HD11', ' A 105  THR HG21', -0.552, (17.021, -75.225, 30.554)), (' B 242  HIS  O  ', ' B 287  SER  OG ', -0.529, (74.471, -69.83, 12.289)), (' A 242  HIS  O  ', ' A 287  SER  OG ', -0.522, (13.099, -109.981, 2.743)), (' B 307  LYS  NZ ', ' B 523  HOH  O  ', -0.52, (50.044, -65.158, 25.878)), (' A  90  ARG  HG2', ' A 270  PRO  O  ', -0.512, (14.391, -87.426, 19.502)), (' B 180  LYS  HB3', ' B 189  LEU HD21', -0.505, (37.94, -53.767, -0.133)), (' B 181  LYS  HG2', ' B 186  VAL  HA ', -0.492, (32.161, -51.509, -3.843)), (' A 109  LYS  NZ ', ' A 506  HOH  O  ', -0.488, (21.672, -63.537, 32.237)), (' A 329  PHE  HA ', ' A 344  LYS  H  ', -0.485, (30.232, -99.483, 9.078)), (' A  93  PRO  O  ', ' A 402  WUY  O13', -0.483, (17.731, -81.565, 24.481)), (' A 130  GLN  NE2', ' A 535  HOH  O  ', -0.471, (27.852, -64.194, 23.733)), (' A   8  ASN  HB3', ' A  15  PHE  HA ', -0.471, (9.616, -63.316, 23.589)), (' A 149  LYS  HG2', ' B 191  GLU  OE1', -0.471, (40.262, -61.353, 12.222)), (' B 180  LYS  CB ', ' B 189  LEU HD21', -0.468, (38.163, -53.492, -0.608)), (' B 125  GLY  HA3', ' B 144  THR HG22', -0.467, (37.36, -40.226, 1.375)), (' B   8  ASN  HB3', ' B  15  PHE  HA ', -0.464, (55.938, -27.238, -8.466)), (' A 125  GLY  HA3', ' A 144  THR HG22', -0.462, (32.009, -66.114, 13.876)), (' B 305  ILE  O  ', ' B 309  GLN  HG2', -0.46, (48.87, -69.904, 15.288)), (' A  27  ILE  HB ', ' A  32  TYR  HE1', -0.455, (-3.66, -76.925, 31.071)), (' B 249  HIS  HE2', ' B 401  CIT  C6 ', -0.448, (63.296, -69.898, 9.808)), (' A 177  ASN  OD1', ' A 501  HOH  O  ', -0.446, (35.197, -71.277, 5.379)), (' A 271  MET  HB2', ' A 271  MET  HE3', -0.443, (19.509, -87.045, 18.997)), (' B 254  LEU HD23', ' B 265  LEU HD11', -0.438, (67.199, -57.298, 9.924)), (' B 304  GLU  O  ', ' B 308  SER  OG ', -0.438, (45.835, -67.178, 18.335)), (' A 190  PRO  HB2', ' A 321  THR HG21', -0.437, (37.634, -85.612, 9.539)), (' B  58  TRP  O  ', ' B  61  ARG  HD3', -0.434, (57.694, -36.013, -5.401)), (' B 166  THR HG22', ' B 697  HOH  O  ', -0.434, (55.647, -46.371, 10.315)), (' A 266  GLU  HB3', ' A 279  PHE  HB3', -0.433, (11.065, -99.774, 13.912)), (' B  49  LEU  HB2', ' B  54  ALA  HB2', -0.432, (60.577, -41.939, -14.874)), (' B 151  LEU HD22', ' B 186  VAL HG11', -0.43, (30.673, -49.416, -0.268)), (' B  84  VAL HG23', ' B 101  VAL HG11', -0.429, (51.057, -37.192, -10.805)), (' B 266  GLU  HB3', ' B 279  PHE  HB3', -0.429, (71.401, -59.84, 1.545)), (' B  67  PRO  HD3', ' B 143  ILE HD13', -0.425, (45.655, -43.014, 1.91)), (' A 212  ASP  O  ', ' A 216  LEU  HB2', -0.425, (19.252, -94.304, -13.431)), (' B 213  PHE  CD2', ' B 252  ILE HG12', -0.423, (61.417, -58.219, 21.017)), (' A  58  TRP  O  ', ' A  61  ARG  HD3', -0.421, (11.845, -71.754, 21.18)), (' B 322  ILE HD12', ' B 327  ILE  HB ', -0.418, (50.635, -62.887, 6.901)), (' A   0  MET  HE3', ' A 711  HOH  O  ', -0.418, (16.682, -63.267, 31.3)), (' A  84  VAL HG23', ' A 101  VAL HG11', -0.416, (18.065, -69.986, 26.272)), (' B 190  PRO  HB2', ' B 321  THR HG21', -0.414, (41.384, -60.499, 5.673)), (' A 322  ILE HD12', ' A 327  ILE  HB ', -0.412, (30.71, -92.155, 8.286)), (' B 250  LEU HD23', ' B 295  ILE  O  ', -0.411, (57.71, -60.017, 12.811)), (' B  71  ILE HD13', ' B 323  ASP  HB3', -0.407, (48.763, -54.108, 4.375)), (' A  67  PRO  HD3', ' A 143  ILE HD13', -0.405, (25.681, -72.461, 13.478)), (' A 264  GLU  O  ', ' A 280  ILE  HA ', -0.404, (10.539, -99.994, 8.577)), (' A 213  PHE  CD2', ' A 252  ILE HG12', -0.404, (18.899, -93.16, -5.434)), (' B 332  TRP  HB2', ' B 340  THR HG22', -0.4, (59.639, -75.699, 11.71))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
