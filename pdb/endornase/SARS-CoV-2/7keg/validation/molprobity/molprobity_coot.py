# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  28 ', 'ASN', 0.024234615311369025, (70.052, -44.38, 19.924)), ('B', '  28 ', 'ASN', 0.0245796674751262, (70.22699999999999, 41.684, -28.131))]
data['omega'] = []
data['rota'] = [('A', '  27 ', 'ILE', 0.0001859406571537499, (66.59199999999998, -45.834, 20.854)), ('A', '  44 ', 'GLU', 0.27468039692411206, (67.40599999999999, -40.499, 12.637)), ('A', '  47 ', 'THR', 0.23712090598116145, (70.905, -32.393, 14.903999999999998)), ('A', '  89 ', 'LYS', 0.04390621295231079, (72.326, -29.655, 3.8159999999999994)), ('A', '  96 ', 'ILE', 0.025478828537644327, (67.929, -22.646, 16.862)), ('A', ' 102 ', 'CYS', 0.2774862708882673, (57.21599999999999, -26.411, 19.421)), ('A', ' 115 ', 'ILE', 0.20693528541609205, (61.417, -11.090999999999998, 23.241)), ('A', ' 201 ', 'GLN', 0.04941068192957577, (76.952, -34.036999999999985, -11.352)), ('A', ' 209 ', 'MET', 0.0, (78.059, -18.637, -23.243)), ('A', ' 219 ', 'ASP', 0.00901873366911154, (91.52499999999998, -21.835, -26.679)), ('A', ' 232 ', 'PHE', 0.1609740660449058, (90.302, -17.954, -17.701)), ('A', ' 244 ', 'GLN', 0.04182859811284523, (99.00200000000001, -27.876, -6.099)), ('A', ' 245 ', 'LEU', 0.2051381479399051, (95.813, -27.6, -8.232)), ('A', ' 250 ', 'LEU', 0.05194205645159824, (83.833, -21.602, -10.754)), ('A', ' 264 ', 'GLU', 0.1023949997302739, (87.278, -36.138, -4.928)), ('A', ' 265 ', 'LEU', 0.2053104803904821, (85.478, -33.104, -3.4710000000000005)), ('A', ' 266 ', 'GLU', 0.12319896183439416, (85.88199999999998, -33.177, 0.315)), ('A', ' 300 ', 'ASP', 0.29984220950567797, (78.16, -14.266, -18.092)), ('A', ' 306 ', 'ILE', 0.14523983126342782, (86.275, -9.915, -14.054)), ('A', ' 313 ', 'VAL', 0.03780638799071312, (98.023, -3.505999999999999, -9.176)), ('A', ' 314 ', 'VAL', 0.2980282088792469, (99.738, -6.829, -8.142)), ('A', ' 345 ', 'LEU', 0.05330172198153862, (86.657, -18.602999999999994, 1.9690000000000003)), ('B', '  19 ', 'GLN', 0.10622275811634796, (52.702, 21.15, -24.115)), ('B', '  27 ', 'ILE', 0.0, (66.58499999999998, 41.014, -29.190000000000005)), ('B', '  28 ', 'ASN', 0.02975797300072739, (70.22699999999999, 41.684, -28.131)), ('B', '  44 ', 'GLU', 0.2765434123706947, (70.05, 36.89, -20.963)), ('B', '  47 ', 'THR', 0.20170277534604467, (77.26199999999999, 31.831999999999994, -23.244)), ('B', '  96 ', 'ILE', 0.015527169962455243, (79.881, 22.081, -25.353)), ('B', ' 102 ', 'CYS', 0.26998610811340895, (68.73199999999997, 19.641, -27.926)), ('B', ' 114 ', 'THR', 0.08640373379963721, (79.66399999999997, 5.193, -32.13)), ('B', ' 115 ', 'ILE', 0.232405513928247, (80.369, 9.006, -32.03)), ('B', ' 136 ', 'ASN', 0.2544276464426535, (78.43400000000001, -0.454, -22.176)), ('B', ' 173 ', 'LYS', 0.0658635636900326, (71.636, 13.089, -0.946)), ('B', ' 187 ', 'GLN', 0.18271864237443292, (89.74000000000002, 2.493, -13.542)), ('B', ' 204 ', 'LYS', 0.04038704489442618, (82.08, 28.894999999999992, 8.5)), ('B', ' 209 ', 'MET', 0.0, (90.915, 23.369, 14.783)), ('B', ' 218 ', 'MET', 0.0, (98.309, 33.948, 15.84)), ('B', ' 219 ', 'ASP', 0.00362433688300028, (100.969, 32.95, 18.477)), ('B', ' 223 ', 'GLU', 0.06242416230550321, (101.335, 26.912, 20.114)), ('B', ' 226 ', 'LYS', 0.01523935065361621, (102.297, 22.343999999999994, 17.675)), ('B', ' 232 ', 'PHE', 0.19558501559652636, (101.73, 29.089, 9.261)), ('B', ' 244 ', 'GLN', 0.04601076713992464, (104.02099999999999, 42.205, -2.47)), ('B', ' 245 ', 'LEU', 0.19335050413649862, (101.46300000000001, 40.29999999999998, -0.332)), ('B', ' 250 ', 'LEU', 0.08338953143397992, (94.40700000000002, 28.783, 2.331)), ('B', ' 265 ', 'LEU', 0.20161574618320724, (89.698, 39.664, -4.818)), ('B', ' 266 ', 'GLU', 0.10393179322562894, (89.95000000000005, 39.947, -8.612)), ('B', ' 306 ', 'ILE', 0.13432332473913203, (102.315, 20.049, 5.622)), ('B', ' 313 ', 'VAL', 0.03780638799071312, (115.74100000000001, 20.503, 0.932))]
data['cbeta'] = []
data['probe'] = [(' B 127  VAL  HB ', ' B 130  GLN  HG3', -0.791, (70.113, 8.165, -16.131)), (' A 127  VAL  HB ', ' A 130  GLN  HG3', -0.791, (52.239, -15.473, 6.543)), (' A  84  VAL HG23', ' A 101  VAL HG11', -0.551, (58.546, -25.575, 13.81)), (' B  84  VAL HG23', ' B 101  VAL HG11', -0.532, (70.615, 19.333, -22.437)), (' B 204  LYS  HE2', ' B 206  ARG  HE ', -0.523, (80.593, 24.606, 5.685)), (' A  84  VAL  CG2', ' A 101  VAL HG11', -0.49, (59.019, -25.641, 13.504)), (' B 125  GLY  HA3', ' B 144  THR HG22', -0.489, (74.2, 5.284, -10.208)), (' B 266  GLU  HB3', ' B 279  PHE  HB3', -0.483, (92.877, 40.272, -9.435)), (' A 125  GLY  HA3', ' A 144  THR HG22', -0.482, (54.278, -11.643, 1.146)), (' B  84  VAL  CG2', ' B 101  VAL HG11', -0.481, (70.996, 20.035, -22.364)), (' A 266  GLU  HB3', ' A 279  PHE  HB3', -0.47, (88.295, -32.379, 0.965)), (' A 116  CYS  HA ', ' A 119  LEU HD12', -0.46, (63.186, -12.315, 18.944)), (' B  12  LYS  NZ ', ' B  18  GLN  HG3', -0.444, (53.175, 21.964, -16.839)), (' B 116  CYS  HA ', ' B 119  LEU HD12', -0.437, (81.06, 10.575, -27.967)), (' A 277  ASN HD22', ' A 293  SER  HA ', -0.433, (86.347, -22.274, -1.539)), (' B  96  ILE  H  ', ' B  96  ILE HG13', -0.426, (82.038, 21.521, -24.105)), (' A 218  MET  HG3', ' A 237  TYR  CZ ', -0.421, (89.244, -22.893, -21.312)), (' B 208  GLN  HA ', ' B 211  ILE HD12', -0.412, (86.001, 23.405, 16.302)), (' A 200  LEU HD13', ' A 254  LEU  HB3', -0.407, (82.946, -29.446, -10.207)), (' A  96  ILE  H  ', ' A  96  ILE HG13', -0.402, (69.5, -21.086, 15.631))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
