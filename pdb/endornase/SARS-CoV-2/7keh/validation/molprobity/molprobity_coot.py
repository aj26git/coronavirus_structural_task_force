# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  28 ', 'ASN', 0.01200355494635052, (-76.215, -48.857, -35.295)), ('A', '  47 ', 'THR', 0.1937495944550656, (-64.35, -47.658000000000015, -30.017999999999997)), ('A', '  57 ', 'LEU', 0.28112399175794434, (-61.56, -57.897, -29.178)), ('A', '  96 ', 'ILE', 0.0, (-54.626000000000005, -50.663, -32.104)), ('A', ' 109 ', 'LYS', 0.0, (-49.735000000000014, -64.502, -35.842)), ('A', ' 147 ', 'SER', 0.004066788976242199, (-37.65, -64.819, -10.861)), ('A', ' 155 ', 'VAL', 0.007351242675213143, (-40.88900000000001, -54.856, -8.494)), ('A', ' 167 ', 'LEU', 0.2259607657537893, (-57.233999999999995, -54.136, -6.694)), ('A', ' 191 ', 'GLU', 0.01563560178993275, (-36.438, -46.565, -9.117)), ('A', ' 219 ', 'ASP', 0.018099900181626067, (-53.803, -27.434, 11.73)), ('A', ' 226 ', 'LYS', 0.0, (-44.325, -31.332, 11.396)), ('A', ' 232 ', 'PHE', 0.1637060755044002, (-49.89699999999999, -28.398, 2.669)), ('A', ' 245 ', 'LEU', 0.051417515474654236, (-59.52000000000002, -22.757, -7.051)), ('A', ' 250 ', 'LEU', 0.12625030928216074, (-53.58, -34.86, -4.136)), ('A', ' 254 ', 'LEU', 0.29916025001776625, (-60.24799999999999, -34.196, -2.9499999999999997)), ('A', ' 266 ', 'GLU', 0.08707378717846063, (-65.11600000000003, -32.83, -15.386)), ('A', ' 295 ', 'ILE', 0.16257009191634608, (-52.005000000000024, -37.243, -8.51)), ('A', ' 300 ', 'ASP', 0.24553630312602565, (-46.184, -40.534, 3.114)), ('A', ' 313 ', 'VAL', 0.07165380551109936, (-35.397000000000006, -20.657, -5.305)), ('B', '  28 ', 'ASN', 0.1044323176258424, (-2.022000000000012, -92.065, 13.997999999999998)), ('B', '  47 ', 'THR', 0.21797207793529855, (-11.78700000000002, -85.317, 8.635)), ('B', '  72 ', 'LEU', 1.2595406317550397e-05, (-27.25100000000002, -79.84400000000001, -1.645)), ('B', '  96 ', 'ILE', 0.00019184281280167575, (-21.963000000000008, -83.358, 10.615)), ('B', ' 103 ', 'SER', 0.1334044249096263, (-24.656000000000006, -93.985, 16.507)), ('B', ' 147 ', 'SER', 0.004019992775283754, (-43.229000000000006, -87.607, -11.247)), ('B', ' 149 ', 'LYS', 0.011898420460489388, (-48.38099999999998, -86.88700000000003, -7.448)), ('B', ' 167 ', 'LEU', 0.2358070694643456, (-20.89200000000001, -87.503, -14.808999999999997)), ('B', ' 219 ', 'ASP', 0.031565073191368975, (-10.782000000000005, -62.84, -33.25399999999999)), ('B', ' 232 ', 'PHE', 0.11711653200419102, (-14.930000000000016, -61.632, -24.169)), ('B', ' 245 ', 'LEU', 0.21686644691665544, (-3.750000000000015, -61.46, -14.475)), ('B', ' 250 ', 'LEU', 0.10855769548791742, (-14.849999999999996, -69.102, -17.251999999999995)), ('B', ' 266 ', 'GLU', 0.0802437037749518, (-3.8170000000000006, -72.96200000000003, -6.072)), ('B', ' 295 ', 'ILE', 0.17486267941035027, (-17.410000000000004, -70.41000000000003, -12.871)), ('B', ' 300 ', 'ASP', 0.2478436669135292, (-24.094, -70.29, -24.507)), ('B', ' 313 ', 'VAL', 0.058760155241252054, (-23.44800000000001, -47.771, -15.753000000000002))]
data['cbeta'] = [('A', '  28 ', 'ASN', ' ', 0.2886522997461458, (-77.291, -47.835, -34.894)), ('B', '  28 ', 'ASN', ' ', 0.3148627204544757, (-0.5660000000000158, -91.639, 13.765)), ('B', ' 103 ', 'SER', ' ', 0.2747246201744288, (-24.454000000000022, -95.353, 17.109))]
data['probe'] = [(' B 102  CYS  O  ', ' B 102  CYS  SG ', -0.923, (-21.701, -94.429, 13.607)), (' A 218  MET  HG3', ' A 237  TYR  CE2', -0.831, (-54.449, -28.901, 5.461)), (' B 127  VAL  HB ', ' B 130  GLN  HG3', -0.794, (-35.714, -93.286, 0.006)), (' A 127  VAL  HB ', ' A 130  GLN  HG3', -0.778, (-47.768, -65.82, -22.636)), (' A 149  LYS  HA ', ' B 846  HOH  O  ', -0.742, (-31.608, -66.674, -13.194)), (' A 233  GLU  O  ', ' A 237  TYR  HB2', -0.731, (-55.384, -27.111, 1.549)), (' B  67  PRO  HB2', ' B  72  LEU HD13', -0.662, (-27.831, -82.644, -3.862)), (' A 218  MET  HA ', ' A 237  TYR  OH ', -0.583, (-55.603, -30.421, 7.821)), (' A 306  ILE HD12', ' A 341  PHE  CD2', -0.554, (-44.859, -30.029, -2.666)), (' A 218  MET  HG3', ' A 237  TYR  CZ ', -0.531, (-55.243, -29.582, 6.042)), (' A 293  SER  HB3', ' A 343  PRO  HG2', -0.512, (-50.657, -32.318, -11.363)), (' A 266  GLU  HB3', ' A 279  PHE  HB3', -0.496, (-64.407, -30.423, -16.159)), (' A 147  SER  HB2', ' B 838  HOH  O  ', -0.492, (-34.851, -66.324, -10.925)), (' A  89  LYS  HG3', ' A 272  ASP  HB2', -0.481, (-57.346, -45.855, -17.855)), (' B 266  GLU  HB3', ' B 279  PHE  HB3', -0.466, (-3.164, -70.141, -5.71)), (' B  84  VAL HG23', ' B 101  VAL HG11', -0.46, (-24.14, -92.777, 7.406)), (' A 701  B3P  H32', ' A 965  HOH  O  ', -0.459, (-72.091, -51.654, -21.902)), (' A 125  GLY  HA3', ' A 144  THR HG22', -0.458, (-43.124, -63.953, -16.769)), (' B 218  MET  HG3', ' B 237  TYR  CE1', -0.451, (-11.275, -64.6, -27.52)), (' A  30  THR  CG2', ' A  41  GLU  HG3', -0.442, (-76.67, -53.438, -28.579)), (' A  84  VAL HG23', ' A 101  VAL HG11', -0.442, (-57.141, -59.962, -29.012)), (' A 218  MET  HA ', ' A 237  TYR  CZ ', -0.432, (-55.226, -30.342, 7.257)), (' B  30  THR  CG2', ' B  41  GLU  HG3', -0.43, (-3.893, -96.116, 7.112)), (' B 219  ASP  N  ', ' B 219  ASP  OD1', -0.429, (-9.263, -63.299, -32.579)), (' B  89  LYS  HG3', ' B 272  ASP  HB2', -0.427, (-16.675, -80.482, -3.795)), (' B  27  ILE  CG2', ' B  32  TYR  CE2', -0.424, (-1.532, -97.441, 11.498)), (' A 701  B3P  H21', ' A 701  B3P  H91', -0.422, (-71.401, -48.05, -20.337)), (' A 256  LYS  O  ', ' A 260  GLU  HG3', -0.42, (-64.726, -33.661, 3.305)), (' B 218  MET  HA ', ' B 237  TYR  CZ ', -0.414, (-11.26, -66.009, -28.65)), (' B 329  PHE  HB3', ' B 341  PHE  CE1', -0.413, (-21.661, -60.441, -13.246)), (' A  98  THR  O  ', ' A 106  ASP  HA ', -0.413, (-52.343, -58.427, -34.729)), (' B 198  ARG  CZ ', ' B 203  PHE  CZ ', -0.413, (-16.968, -76.935, -20.725)), (' B 125  GLY  HA3', ' B 144  THR HG22', -0.411, (-38.249, -89.562, -5.079)), (' B 143  ILE  HA ', ' B 177  ASN  O  ', -0.407, (-35.416, -84.815, -6.579)), (' A 237  TYR  O  ', ' A 248  LEU HD13', -0.403, (-58.152, -29.39, -1.333)), (' A 218  MET  HG3', ' A 237  TYR  CD2', -0.402, (-54.985, -28.915, 5.333)), (' A 143  ILE  HA ', ' A 177  ASN  O  ', -0.402, (-43.113, -58.513, -14.853))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
