# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 393 ', 'CYS', 0.022713390721095066, (34.706, -17.747, -6.646)), ('A', ' 397 ', 'VAL', 0.06660250902012121, (28.409000000000013, -26.72600000000001, -12.947)), ('A', ' 491 ', 'GLY', 0.011243144501784421, (19.821, -29.633, 2.832))]
data['omega'] = [('A', ' 442 ', 'PRO', None, (37.964, -37.545, 16.825)), ('A', ' 491 ', 'GLY', None, (20.852999999999998, -30.637999999999998, 3.08))]
data['rota'] = [('A', ' 390 ', 'ILE', 0.0, (43.79799999999998, -17.573999999999987, -7.896)), ('A', ' 397 ', 'VAL', 0.17932705059734425, (28.409000000000013, -26.72600000000001, -12.947)), ('A', ' 399 ', 'THR', 0.008159601566148922, (28.375999999999998, -31.649999999999995, -16.036)), ('A', ' 401 ', 'LEU', 0.031238534704921096, (32.09800000000001, -35.413, -11.582000000000003)), ('A', ' 402 ', 'GLU', 0.16364564011076504, (34.431999999999995, -37.15799999999997, -14.096000000000002)), ('A', ' 409 ', 'ASN', 0.0415949324955848, (41.489000000000004, -32.731, -9.616)), ('A', ' 417 ', 'ILE', 0.01960787789231221, (32.479, -33.641, 14.033)), ('A', ' 418 ', 'ASN', 0.0, (32.615, -37.49100000000001, 14.037999999999998)), ('A', ' 424 ', 'ASP', 0.002544208887811923, (26.456999999999994, -35.103, -1.188)), ('A', ' 439 ', 'LYS', 0.016974659259672387, (42.79899999999999, -41.52799999999999, 12.031999999999998)), ('A', ' 475 ', 'LEU', 0.11151740916355779, (34.65599999999999, -22.465, 5.354)), ('A', ' 505 ', 'LYS', 0.1900584832146763, (30.407999999999998, -16.961, -1.808)), ('A', ' 514 ', 'LEU', 0.27243406846463686, (27.771, -29.983, -8.522)), ('B', ' 103 ', 'GLN', 0.02461042116637975, (23.463999999999988, -44.712, -40.526)), ('B', ' 142 ', 'LEU', 0.15613059294664017, (29.882, -35.094, -34.792)), ('B', ' 166 ', 'ARG', 0.03873425997231938, (40.959, -37.011, -23.796)), ('B', ' 170 ', 'GLU', 0.004079696240347402, (46.282, -31.593, -23.698)), ('B', ' 175 ', 'ASP', 0.0, (50.604, -23.371, -19.881)), ('B', ' 205 ', 'LYS', 0.003261428611725036, (20.851000000000003, -31.995, -20.681)), ('B', ' 216 ', 'ILE', 0.04319983414737538, (33.589999999999996, -26.598999999999993, -17.851)), ('B', ' 265 ', 'GLU', 0.07432016086981708, (39.506, -8.867, -17.661)), ('B', ' 290 ', 'LEU', 0.17517014640996037, (38.782, -6.107000000000002, -30.91))]
data['cbeta'] = []
data['probe'] = [(' A 436  PHE  HA ', ' A 439  LYS  HZ3', -0.92, (43.894, -41.688, 7.403)), (' A 406  PHE  HA ', ' B 168  ARG  HD3', -0.837, (40.652, -32.613, -17.399)), (' A 395  ASP  HA ', ' A 511  PHE  O  ', -0.754, (32.606, -22.418, -9.431)), (' A 436  PHE  HB2', ' A 439  LYS  HZ1', -0.697, (45.308, -39.969, 6.713)), (' B 206  GLY  H  ', ' B 210  GLN  HA ', -0.695, (19.705, -30.297, -19.412)), (' A 417  ILE  H  ', ' A 417  ILE HD13', -0.673, (29.951, -33.678, 13.826)), (' A 417  ILE  CD1', ' A 417  ILE  H  ', -0.653, (29.744, -33.286, 13.619)), (' A 436  PHE  HA ', ' A 439  LYS  NZ ', -0.626, (44.506, -40.91, 7.825)), (' A 448  VAL HG22', ' A 457  VAL HG23', -0.608, (37.908, -27.081, 6.691)), (' B 274  VAL HG11', ' B 288  LEU HD21', -0.586, (47.027, -1.317, -28.694)), (' A 399  THR HG21', ' B 216  ILE HD12', -0.567, (31.342, -29.687, -18.578)), (' A 405  LYS  HD3', ' A 409  ASN  HA ', -0.564, (40.359, -33.301, -10.678)), (' A 514  LEU  HG ', ' A 515  PRO  HD2', -0.563, (26.622, -31.777, -9.637)), (' A 393  CYS  HA ', ' A 510  ALA  HA ', -0.562, (35.417, -19.178, -6.992)), (' A 436  PHE  CB ', ' A 439  LYS  HZ1', -0.543, (44.658, -40.481, 6.361)), (' B 258  LYS  CB ', ' B 260  LYS  HZ2', -0.539, (27.984, -15.925, -14.308)), (' B 258  LYS  HB3', ' B 260  LYS  NZ ', -0.522, (28.166, -16.234, -13.556)), (' B 258  LYS  HB2', ' B 260  LYS  HZ2', -0.517, (28.35, -15.781, -14.635)), (' B  87  LEU HD13', ' B 128  GLN  HG3', -0.515, (38.834, -38.236, -38.598)), (' B 287  LEU  HA ', ' B 290  LEU HD12', -0.513, (42.736, -7.348, -31.43)), (' A 416  ASP  HB2', ' A 417  ILE HD13', -0.505, (29.301, -33.884, 13.16)), (' A 405  LYS  HZ2', ' A 409  ASN  HB3', -0.501, (41.949, -35.145, -10.776)), (' A 436  PHE  CA ', ' A 439  LYS  HZ3', -0.5, (43.987, -41.185, 7.235)), (' A 417  ILE  N  ', ' A 417  ILE HD13', -0.495, (30.53, -33.982, 13.27)), (' B 248  GLY  O  ', ' B 252  GLU  HB2', -0.479, (30.638, -12.559, -25.902)), (' A 390  ILE HD12', ' A 481  ASP  HA ', -0.478, (43.593, -21.987, -5.817)), (' B 258  LYS  CB ', ' B 260  LYS  NZ ', -0.469, (28.224, -16.407, -13.986)), (' A 402  GLU  CD ', ' A 402  GLU  H  ', -0.458, (32.561, -38.406, -13.273)), (' A 436  PHE  CB ', ' A 439  LYS  NZ ', -0.458, (44.769, -40.84, 6.952)), (' B 234  ASP  OD1', ' B 279  CYS  HB2', -0.453, (53.14, -10.352, -32.595)), (' A 405  LYS  NZ ', ' A 409  ASN  CB ', -0.444, (41.842, -35.006, -10.009)), (' A 436  PHE  CA ', ' A 439  LYS  NZ ', -0.431, (44.01, -40.872, 7.253)), (' A 404  THR  HA ', ' B 216  ILE HG21', -0.423, (33.584, -30.137, -15.776)), (' A 395  ASP  O  ', ' A 396  GLU  HB2', -0.42, (29.015, -21.485, -11.56)), (' B 204  ILE  HA ', ' B 204  ILE HD13', -0.42, (24.826, -32.488, -22.476)), (' A 436  PHE  HB2', ' A 439  LYS  NZ ', -0.419, (44.705, -40.229, 7.312)), (' A 444  MET  SD ', ' A 445  VAL  O  ', -0.418, (36.428, -25.936, 15.146)), (' A 462  LYS  HD3', ' A 495  TYR  HA ', -0.417, (19.903, -24.941, 7.934)), (' A 405  LYS  NZ ', ' A 409  ASN  HB3', -0.41, (41.906, -35.071, -10.268)), (' B 283  VAL  O  ', ' B 286  MET  HB3', -0.403, (46.212, -7.408, -34.222))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
