# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A 217  THR HG22', ' A 218  ASP  H  ', -0.665, (8.744, 3.808, 1.335)), (' A 322  GLN  HG3', ' A 323  HIS  CE1', -0.605, (13.021, -15.349, 1.432)), (' A 363  ASN  ND2', ' A 503  HOH  O  ', -0.596, (-16.821, -3.981, 3.26)), (' A 223  LYS  HG3', ' A 402  EDO  H21', -0.588, (-5.048, -2.47, -6.724)), (' C 226  ASP  OD1', ' C 401  A3R  N6 ', -0.576, (-5.308, 10.941, -43.531)), (' A 224  ASN  HB3', ' A 402  EDO  H12', -0.559, (-8.692, -2.053, -5.047)), (' C 263  ASN HD21', ' C 402  EDO  H12', -0.557, (-2.269, -8.146, -41.03)), (' A 319  ASN  O  ', ' A 322  GLN  HG2', -0.556, (12.14, -13.837, 4.02)), (' A 375  MET  HE2', ' A 403  EDO  H21', -0.555, (3.375, 3.709, 10.104)), (' B 239  VAL HG12', ' B 327  LEU HD23', -0.547, (30.94, -5.82, 4.575)), (' D 372  PHE  HA ', ' D 375  MET  HE2', -0.544, (32.754, 1.216, -50.617)), (' A 332  SER  O  ', ' A 338  ALA  HB3', -0.537, (-3.463, -10.348, 13.083)), (' C 224  ASN  HA ', ' C 359  VAL  O  ', -0.525, (-4.402, 19.465, -43.723)), (' D 332  SER  O  ', ' D 338  ALA  HB3', -0.522, (29.3, 15.218, -55.462)), (' B 345  ARG  HB2', ' B 375  MET  HE1', -0.505, (30.16, -20.966, -12.147)), (' D 224  ASN  HA ', ' D 359  VAL  O  ', -0.498, (25.272, 10.353, -40.709)), (' A 254  ALA  HB3', ' A 401  A3R  H6 ', -0.492, (-5.352, -20.591, 6.511)), (' D 212  GLY  H  ', ' D 403  EDO  H11', -0.486, (32.024, 5.929, -30.964)), (' A 302  PRO  HD2', ' A 313  LEU HD13', -0.484, (2.017, -12.073, 13.768)), (' B 224  ASN  HA ', ' B 359  VAL  O  ', -0.484, (22.023, -14.667, 1.157)), (' A 401  A3R  H21', ' A 512  HOH  O  ', -0.483, (-7.327, -9.076, 3.984)), (' D 336  PHE  CE1', ' D 401  A3R  H11', -0.479, (30.554, 22.62, -53.37)), (' D 239  VAL HG23', ' D 293  ALA  HB2', -0.476, (36.496, 22.187, -36.4)), (' C 239  VAL HG23', ' C 293  ALA  HB2', -0.475, (6.528, 7.524, -47.896)), (' C 302  PRO  HD2', ' C 313  LEU HD13', -0.473, (4.687, 13.564, -28.68)), (' C 372  PHE  O  ', ' C 375  MET  HG2', -0.462, (3.091, 31.094, -33.964)), (' C 263  ASN HD21', ' C 402  EDO  C1 ', -0.46, (-2.283, -8.309, -40.379)), (' B 207  VAL  N  ', ' B 506  HOH  O  ', -0.458, (36.16, -4.542, 13.738)), (' D 302  PRO  HD2', ' D 313  LEU HD13', -0.457, (35.048, 16.318, -55.679)), (' B 378  GLU  HA ', ' B 510  HOH  O  ', -0.455, (32.443, -34.205, -13.186)), (' B 215  LYS  HE3', ' B 218  ASP  HA ', -0.454, (38.462, -23.346, 2.656)), (' A 375  MET  CE ', ' A 403  EDO  H21', -0.453, (2.95, 3.146, 10.702)), (' B 332  SER  HA ', ' B 336  PHE  HB2', -0.452, (26.635, -6.1, -12.789)), (' D 211  SER  HA ', ' D 403  EDO  H22', -0.449, (33.903, 7.502, -30.286)), (' D 332  SER  HA ', ' D 336  PHE  HB2', -0.447, (30.213, 18.771, -54.393)), (' C 229  GLU  HG2', ' C 523  HOH  O  ', -0.447, (-5.702, 9.134, -50.923)), (' A 224  ASN  HA ', ' A 359  VAL  O  ', -0.445, (-7.928, -4.911, -1.666)), (' D 219  ASN  ND2', ' D 351  VAL  O  ', -0.441, (43.49, 7.682, -45.186)), (' A 322  GLN  HG3', ' A 323  HIS  ND1', -0.432, (12.539, -14.779, 1.627)), (' D 212  GLY  H  ', ' D 403  EDO  C1 ', -0.426, (32.723, 5.763, -30.859)), (' A 247  LEU  HB3', ' A 269  SER  HB3', -0.423, (1.783, -27.439, 5.551)), (' D 260  ALA  HA ', ' D 402  MLT  O5 ', -0.419, (25.123, 28.648, -34.749)), (' C 239  VAL HG23', ' C 293  ALA  CB ', -0.419, (6.795, 7.469, -47.727)), (' B 213  TYR  CD2', ' B 223  LYS  HB2', -0.415, (28.368, -16.058, 5.097)), (' C 213  TYR  HB2', ' C 403  EDO  H21', -0.413, (4.855, 23.346, -49.418)), (' B 302  PRO  HD2', ' B 313  LEU HD13', -0.412, (31.668, -8.266, -13.503)), (' B 257  LEU  O  ', ' B 261  THR HG23', -0.411, (26.473, 3.402, 3.56)), (' B 226  ASP  OD2', ' B 401  A3R  N6 ', -0.411, (21.277, -5.617, 1.764)), (' A 240  VAL  HB ', ' A 328  ALA  HA ', -0.41, (2.089, -12.555, 1.042)), (' D 248  LYS  HA ', ' D 248  LYS  HD3', -0.405, (30.399, 33.55, -49.8)), (' C 249  HIS  CD2', ' C 265  MET  HG2', -0.403, (2.14, -0.562, -39.664)), (' A 217  THR HG22', ' A 218  ASP  N  ', -0.402, (8.732, 3.473, 0.866)), (' B 248  LYS  HA ', ' B 248  LYS  HD3', -0.402, (27.17, 8.639, -7.703)), (' B 305  ASN  ND2', ' B 335  ILE  O  ', -0.402, (21.717, -4.469, -15.693)), (' C 284  SER  HA ', ' C 298  HIS  O  ', -0.402, (10.424, 5.394, -34.469))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
