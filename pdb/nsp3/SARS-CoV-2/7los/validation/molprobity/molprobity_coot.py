# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  21 ', 'VAL', 0.22149799517938054, (-4.223000000000003, -36.22499999999998, 28.371)), ('A', '  64 ', 'LEU', 0.2755640258730507, (9.621000000000002, -25.135000000000005, 23.571999999999992)), ('A', ' 104 ', 'ILE', 0.22876992662152762, (-10.824000000000005, 0.43999999999999984, 23.94099999999999)), ('A', ' 197 ', 'THR', 0.08474096584247542, (25.70600000000002, 15.021, 19.332)), ('A', ' 225 ', 'THR', 0.18476603371614567, (27.482000000000006, 22.500000000000014, 33.20799999999997)), ('A', ' 245 ', 'SER', 0.09052388721995384, (6.8420000000000005, 14.824, 25.971)), ('A', ' 263 ', 'GLU', 0.20117540394970812, (-4.001000000000001, 14.551, 27.227999999999987)), ('A', ' 270 ', 'CYS', 0.039632583921242436, (-4.095000000000001, 8.649, 39.207)), ('A', ' 277 ', 'THR', 0.2506684023371857, (-6.031000000000005, 13.355, 16.658999999999985)), ('A', ' 294 ', 'SER', 0.2265984309188446, (-11.70100000000001, 22.891999999999992, 15.452999999999998)), ('B', '  14 ', 'ILE', 0.03139346782377249, (2.062000000000002, -35.168, 15.586999999999993)), ('B', '  23 ', 'MET', 0.23435500711325957, (-2.3700000000000006, -18.958, -3.859999999999997)), ('B', '  29 ', 'GLN', 0.046918304780789614, (8.173000000000002, -23.912, -4.9869999999999965)), ('B', '  48 ', 'ASN', 0.10097030346476311, (-9.631000000000007, -22.58, -1.1809999999999994)), ('B', ' 104 ', 'ILE', 0.1464464523782818, (-7.585000000000001, -56.434999999999995, 3.3869999999999982)), ('B', ' 200 ', 'LYS', 0.29614237618352457, (19.662, -63.09699999999999, 19.952)), ('B', ' 225 ', 'THR', 0.24441778230166075, (30.699000000000023, -80.30099999999999, 6.219))]
data['cbeta'] = []
data['probe'] = [(' A 283  TYR  HD2', ' A 290  LEU HD11', -0.834, (-13.072, 11.206, 16.769)), (' A 147  PHE  O  ', ' A 151  ILE HG13', -0.772, (0.084, -5.444, 23.013)), (' A 282  LEU  HB2', ' A 293  SER  O  ', -0.737, (-10.344, 19.739, 16.345)), (' A 190  LYS  HD2', ' A 190  LYS  N  ', -0.723, (26.008, 30.779, 24.532)), (' A  33  PRO  HB2', ' A  58  LEU HD13', -0.722, (2.833, -22.647, 32.529)), (' A 147  PHE  CE2', ' A 151  ILE HD11', -0.72, (0.143, -2.277, 21.456)), (' A 287  GLY  HA3', ' A 504  HOH  O  ', -0.701, (-14.144, 4.477, 26.431)), (' B   3  ARG  HB3', ' B  23  MET  HE2', -0.691, (-6.008, -16.396, -2.693)), (' B  48  ASN  H  ', ' B  48  ASN HD22', -0.681, (-9.584, -22.723, -3.971)), (' A  14  ILE HD12', ' A  71  TYR  CE1', -0.677, (4.024, -16.546, 15.762)), (' B  14  ILE HD12', ' B  71  TYR  CE1', -0.676, (3.672, -39.187, 15.766)), (' B  33  PRO  HB2', ' B  58  LEU HD13', -0.668, (9.442, -34.403, -0.547)), (' A  86  ALA  O  ', ' A  90  THR HG23', -0.66, (-5.28, -9.546, 29.455)), (' A 170  SER  O  ', ' A 174  GLN  HG3', -0.658, (11.184, 1.145, 24.332)), (' A 190  LYS  H  ', ' A 190  LYS  HD2', -0.655, (25.87, 30.795, 25.059)), (' B 186  ASN  HB2', ' B 235  VAL HG21', -0.653, (21.553, -77.396, 22.384)), (' B   3  ARG  NH1', ' B  23  MET  HE3', -0.645, (-7.569, -17.752, -4.167)), (' B  26  THR  H  ', ' B  29  GLN HE21', -0.634, (4.085, -21.896, -8.024)), (' A   5  ILE HG13', ' A  21  VAL HG22', -0.634, (-7.269, -35.084, 26.441)), (' A 130  PRO  HA ', ' A 133 AGLN HE21', -0.632, (6.376, -11.201, 13.869)), (' B 186  ASN  HB2', ' B 235  VAL  CG2', -0.623, (21.02, -78.058, 21.872)), (' A 224  CYS  HG ', ' A 401   ZN ZN  ', -0.622, (27.922, 25.964, 28.984)), (' A 224  CYS  SG ', ' A 401   ZN ZN  ', -0.622, (27.98, 25.697, 29.475)), (' A 243  MET  HE3', ' A 304  PHE  CZ ', -0.605, (3.959, 9.583, 22.91)), (' A 222  ILE HD13', ' A 232  LYS  HB2', -0.589, (20.082, 21.59, 24.776)), (' B 120  LEU  O  ', ' B 136  TYR  OH ', -0.587, (-0.134, -57.365, 16.218)), (' A  21  VAL HG12', ' A  31  PHE  HZ ', -0.587, (-2.593, -33.555, 27.241)), (' B  33  PRO  HG2', ' B  58  LEU HD22', -0.584, (11.659, -33.78, -1.154)), (' A 122  GLN  OE1', ' A 277  THR HG23', -0.584, (-4.148, 10.795, 14.642)), (' A  99  ASN HD21', ' A 279  LYS  HD2', -0.574, (-10.208, 10.802, 11.944)), (' B  26  THR HG22', ' B  45  LYS  HG2', -0.574, (0.766, -23.528, -9.022)), (' B 183  ARG HH12', ' B 207  TYR  HB2', -0.572, (14.412, -70.984, 13.56)), (' B  21  VAL  CG1', ' B  31  PHE  CZ ', -0.562, (2.55, -23.713, 2.058)), (' B  21  VAL HG12', ' B  31  PHE  CZ ', -0.556, (3.041, -23.367, 1.822)), (' A   3  ARG  O  ', ' A  23  MET  HG3', -0.551, (-9.283, -39.557, 29.968)), (' B  97  GLN  NE2', ' B 102  THR  OG1', -0.543, (-10.189, -54.859, 11.604)), (' A 255  HIS  NE2', ' A 279  LYS  O  ', -0.539, (-7.452, 18.378, 10.025)), (' A 122  GLN  OE1', ' A 277  THR  CG2', -0.536, (-5.015, 10.651, 14.553)), (' B 147  PHE  CE2', ' B 151  ILE HD11', -0.53, (1.737, -53.528, 9.138)), (' B  21  VAL  CG1', ' B  31  PHE  HZ ', -0.529, (2.598, -23.311, 2.799)), (' A 264  TYR  CZ ', ' A 271  GLY  HA3', -0.524, (-3.852, 10.992, 35.357)), (' A 243  MET  HE3', ' A 304  PHE  HZ ', -0.521, (3.846, 8.661, 22.539)), (' B 165  VAL HG23', ' B 273  TYR  CE2', -0.516, (3.393, -63.681, 1.245)), (' A 190  LYS  CD ', ' A 190  LYS  H  ', -0.514, (26.024, 31.344, 25.307)), (' B  22  ASP  H  ', ' B  30  GLN HE22', -0.508, (2.831, -19.466, -0.806)), (' B 165  VAL HG23', ' B 273  TYR  CZ ', -0.508, (3.636, -64.306, 1.595)), (' A  28  GLY  N  ', ' A  42  THR  O  ', -0.506, (-2.731, -28.971, 36.06)), (' B 255  HIS  HA ', ' B 282  LEU HD21', -0.505, (-6.635, -75.945, 13.75)), (' A 136  TYR  CE2', ' A 140  ARG  HD3', -0.504, (0.042, -2.385, 12.407)), (' B 116  ALA  O  ', ' B 120  LEU  HG ', -0.496, (1.567, -59.342, 10.483)), (' B  13  ASN  HB2', ' B  56  TYR  OH ', -0.496, (0.997, -37.346, 9.423)), (' A  14  ILE  CD1', ' A  71  TYR  CE1', -0.495, (3.942, -16.884, 15.412)), (' A  69  PHE  HD2', ' A  75  THR HG23', -0.481, (15.098, -15.709, 25.474)), (' A 183  ARG  HB3', ' A 199  LEU  HB2', -0.477, (18.998, 11.562, 17.875)), (' A 173  PHE  HB3', ' A 202  VAL HG22', -0.473, (12.283, 3.021, 20.486)), (' B 262  SER  HB2', ' B 302  ASP  HB2', -0.468, (3.536, -68.419, 5.883)), (' A 252  GLU  HG3', ' A 297  LYS  HG3', -0.467, (-6.201, 26.026, 22.296)), (' A 190  LYS  CD ', ' A 190  LYS  N  ', -0.464, (26.284, 31.566, 25.061)), (' A 255  HIS  CD2', ' A 279  LYS  O  ', -0.46, (-7.608, 17.863, 10.239)), (' B  41  VAL  HB ', ' B  44  ILE HG22', -0.459, (-0.331, -29.835, -4.3)), (' B  36  LEU  HB2', ' B  55  PHE  CE2', -0.459, (-2.167, -30.914, 0.639)), (' A  98  VAL  O  ', ' A  98  VAL HG13', -0.455, (-11.902, 5.918, 16.842)), (' B 174  GLN  HG2', ' B 202  VAL HG21', -0.455, (15.913, -58.454, 12.512)), (' A  61  ASP  O  ', ' A  65  ARG  HG3', -0.455, (12.586, -25.7, 26.301)), (' A  13  ASN  HB2', ' A  56  TYR  OH ', -0.451, (-1.388, -19.394, 20.838)), (' A 249  ALA  O  ', ' A 299  PRO  HA ', -0.45, (-1.758, 20.999, 29.395)), (' B   2  VAL  O  ', ' B   2  VAL HG12', -0.45, (-1.443, -11.984, -1.446)), (' A  82  ARG  NH1', ' A 153  ALA  O  ', -0.447, (5.033, -9.016, 31.44)), (' A  28  GLY  HA3', ' A  42  THR  O  ', -0.444, (-2.479, -28.336, 36.641)), (' B   3  ARG HH11', ' B  23  MET  HE3', -0.444, (-8.115, -17.184, -3.558)), (' B 185  LEU  O  ', ' B 197  THR  N  ', -0.442, (23.954, -74.168, 19.714)), (' A 103  SER  HB2', ' A 118  LEU HD21', -0.44, (-9.262, 4.124, 19.372)), (' A 253  LEU HD11', ' A 300  ILE  CD1', -0.435, (-3.294, 18.213, 23.006)), (' B 190  LYS  HB3', ' B 228  LYS  HE3', -0.433, (28.639, -89.54, 11.967)), (' A 222  ILE  CD1', ' A 232  LYS  HB2', -0.432, (20.593, 21.959, 25.297)), (' B  28  GLY  HA3', ' B  42  THR HG23', -0.43, (6.641, -28.548, -5.346)), (' B 239  SER  HB2', ' B 240  PRO  HD2', -0.43, (10.15, -64.087, 21.483)), (' B 276  ILE  N  ', ' B 276  ILE HD12', -0.429, (-4.229, -69.36, 6.502)), (' B 264  TYR  CZ ', ' B 271  GLY  HA3', -0.428, (2.822, -67.602, -5.272)), (' B  26  THR  HA ', ' B  45  LYS  HA ', -0.427, (0.431, -24.135, -6.253)), (' B 120  LEU HD11', ' B 172  LEU  CD1', -0.426, (4.298, -56.679, 10.316)), (' A  96  PRO  HD2', ' A 103  SER  O  ', -0.426, (-12.168, 0.071, 21.178)), (' B 122  GLN  O  ', ' B 306  LYS  NZ ', -0.425, (-0.813, -64.367, 19.692)), (' B 234  LEU HD21', ' B 237  GLN  HB2', -0.424, (12.798, -73.188, 21.242)), (' B  48  ASN  N  ', ' B  48  ASN HD22', -0.422, (-9.462, -22.462, -2.972)), (' B  29  GLN  H  ', ' B  29  GLN  HG2', -0.42, (6.036, -24.264, -6.311)), (' A  27  TYR  HB2', ' A  41  VAL  O  ', -0.418, (-5.009, -28.117, 33.81)), (' B 128  ASN  HB2', ' B 129  PRO  HD3', -0.418, (11.609, -49.422, 16.417)), (' A  33  PRO  HG2', ' A  58  LEU HD22', -0.416, (4.829, -23.033, 34.589)), (' A 166  ARG  HA ', ' A 243  MET  HE1', -0.413, (5.377, 8.106, 25.843)), (' B 164  ASP  OD1', ' B 167  GLU  N  ', -0.413, (9.775, -63.45, 3.618)), (' A 122  GLN  O  ', ' A 306  LYS  HE2', -0.411, (0.687, 8.49, 11.258)), (' B   3  ARG  CB ', ' B  23  MET  HE2', -0.408, (-6.057, -15.899, -2.754)), (' A  69  PHE  CD2', ' A  75  THR HG23', -0.405, (15.159, -15.776, 25.024)), (' B  26  THR HG22', ' B  45  LYS  CG ', -0.404, (0.609, -23.738, -9.031))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
