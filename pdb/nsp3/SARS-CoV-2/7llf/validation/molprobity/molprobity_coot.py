# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 133 ', 'GLN', 0.01452885445041893, (3.7389999999999994, -8.087, 14.592)), ('A', ' 188 ', 'VAL', 0.053494272346961066, (25.619, 26.57, 22.313999999999986)), ('A', ' 225 ', 'THR', 0.044481930352973945, (27.415999999999997, 21.764000000000014, 33.187)), ('A', ' 229 ', 'GLN', 0.02607298440584012, (21.85599999999999, 28.722, 30.521999999999995)), ('A', ' 236 ', 'GLN', 0.10171397448701372, (18.779, 17.037, 11.712)), ('B', '   0 ', 'SER', 0.12491701104696151, (-2.412000000000001, -9.492, -9.832999999999998)), ('B', '  18 ', 'THR', 0.20994367525288288, (1.1160000000000008, -23.305, 10.733999999999993)), ('B', '  20 ', 'VAL', 0.14257992979248302, (0.8080000000000007, -19.184, 5.114999999999997)), ('B', '  60 ', 'ASN', 0.24541946105849968, (14.39, -29.204, 5.154)), ('B', '  64 ', 'LEU', 0.10455822318358249, (11.889, -31.516999999999996, 10.964999999999993)), ('B', '  80 ', 'LEU', 0.2855589604343066, (8.53, -40.147, 3.136)), ('B', ' 104 ', 'ILE', 0.17426901121509752, (-7.593999999999998, -56.852, 3.426999999999999)), ('B', ' 294 ', 'SER', 0.15623336114657338, (-11.869999999999997, -79.47699999999999, 11.229999999999995))]
data['cbeta'] = [('B', '  90 ', 'THR', ' ', 0.25088712695762555, (-2.683, -48.4, 1.7029999999999996))]
data['probe'] = [(' B  22  ASP  H  ', ' B  30  GLN HE22', -0.912, (1.782, -19.089, -1.117)), (' A  24  SER  O  ', ' A  45  LYS  HE2', -0.903, (-8.048, -35.883, 37.628)), (' A 229  GLN  HA ', ' A 229  GLN HE21', -0.88, (21.195, 27.259, 31.893)), (' A  22  ASP  H  ', ' A  30  GLN HE22', -0.859, (-3.754, -36.511, 30.684)), (' A 222  ILE HD13', ' A 232  LYS  HB2', -0.777, (19.596, 21.893, 25.423)), (' B  22  ASP  H  ', ' B  30  GLN  NE2', -0.773, (2.554, -19.335, -1.309)), (' A 229  GLN  HA ', ' A 229  GLN  NE2', -0.755, (20.725, 27.128, 31.277)), (' B  22  ASP  N  ', ' B  30  GLN HE22', -0.74, (1.477, -19.508, -1.136)), (' A 222  ILE  CD1', ' A 232  LYS  HB2', -0.709, (20.761, 21.648, 25.285)), (' B  27  TYR  HH ', ' B  50  HIS  HD1', -0.682, (-3.237, -27.101, -0.783)), (' B 147  PHE  CE2', ' B 151  ILE HD11', -0.629, (1.555, -54.096, 9.026)), (' B  33  PRO  HB2', ' B  58  LEU HD13', -0.625, (8.769, -34.382, -0.841)), (' A 283  TYR  HD2', ' A 290  LEU HD11', -0.622, (-13.858, 11.749, 16.555)), (' A 229  GLN  CA ', ' A 229  GLN HE21', -0.603, (21.173, 28.334, 31.423)), (' A 283  TYR  CE2', ' A 292  LYS  HE2', -0.597, (-15.332, 13.264, 13.329)), (' B  59  PRO  HB3', ' B  64  LEU  HB3', -0.567, (12.463, -32.264, 8.104)), (' A  28  GLY  HA2', ' A  32  GLY  O  ', -0.552, (-0.256, -28.454, 34.801)), (' A  14  ILE HD11', ' A  71  TYR  CE1', -0.548, (3.861, -16.437, 15.914)), (' B  34  THR HG22', ' B  41  VAL  CG2', -0.538, (1.369, -31.331, -1.435)), (' A  21  VAL  CG1', ' A  31  PHE  HZ ', -0.515, (-2.95, -33.442, 27.669)), (' B  89  HIS  HB2', ' B 159  VAL HG21', -0.514, (-0.955, -48.414, -3.073)), (' A 166  ARG  HA ', ' A 243  MET  HE1', -0.509, (5.245, 8.149, 25.47)), (' A  64  LEU  CD1', ' A  64  LEU  N  ', -0.498, (9.107, -27.149, 22.858)), (' A  95  TYR  CD2', ' A 144  ALA  HB3', -0.498, (-8.881, -4.007, 20.975)), (' A  64  LEU  N  ', ' A  64  LEU HD12', -0.495, (9.18, -27.01, 22.369)), (' A 222  ILE HD13', ' A 232  LYS  CB ', -0.491, (19.476, 21.988, 24.736)), (' B   5  ILE HG13', ' B  21  VAL  CG2', -0.49, (-2.861, -21.92, 1.816)), (' A 268  TYR  CD2', ' A 269  GLN  HG3', -0.488, (2.716, 9.789, 39.749)), (' A 119  THR HG21', ' A 304  PHE  CZ ', -0.482, (2.154, 8.053, 20.299)), (' A 147  PHE  CE2', ' A 151  ILE HD11', -0.469, (-0.197, -2.38, 21.691)), (' A  24  SER  O  ', ' A  45  LYS  CE ', -0.463, (-8.94, -36.05, 38.237)), (' B 120  LEU HD11', ' B 172  LEU  CD1', -0.462, (3.8, -57.134, 10.205)), (' A 282  LEU  HB2', ' A 293  SER  O  ', -0.462, (-10.52, 19.703, 16.79)), (' A  21  VAL HG12', ' A  31  PHE  CZ ', -0.46, (-2.342, -33.333, 28.321)), (' A 283  TYR  CZ ', ' A 292  LYS  HE2', -0.457, (-14.596, 13.857, 13.301)), (' A 173  PHE  HB3', ' A 202  VAL HG22', -0.456, (11.756, 3.034, 20.564)), (' B 236  GLN  HA ', ' B 310  TYR  O  ', -0.456, (14.259, -74.446, 25.751)), (' A  95  TYR  OH ', ' A 145  ALA  HA ', -0.454, (-8.288, -7.069, 24.04)), (' A  21  VAL  CG1', ' A  31  PHE  CZ ', -0.445, (-2.665, -32.977, 28.322)), (' A 189  CYS  HB3', ' A 192  CYS  HB2', -0.436, (29.388, 26.479, 26.488)), (' A 283  TYR  CD2', ' A 290  LEU HD11', -0.436, (-13.691, 12.435, 16.17)), (' B  11  VAL HG12', ' B  57  VAL  O  ', -0.433, (7.949, -33.741, 6.065)), (' A 165  VAL HG23', ' A 273  TYR  CZ ', -0.427, (-0.744, 7.614, 29.281)), (' A 206  MET  HE3', ' A 243  MET  SD ', -0.418, (7.815, 8.1, 23.827)), (' A 175  HIS  HA ', ' A 402  SO4  O2 ', -0.417, (12.536, -5.313, 20.357)), (' B  27  TYR  OH ', ' B  50  HIS  ND1', -0.413, (-4.05, -26.768, -0.718)), (' B 208  MET  HE3', ' B 247  PRO  HD3', -0.41, (12.256, -73.529, 2.83)), (' A   9  THR  HA ', ' A  55  PHE  O  ', -0.409, (-1.174, -26.178, 24.189)), (' A 122  GLN  NE2', ' A 275  HIS  NE2', -0.408, (-4.585, 9.025, 17.672)), (' B 243  MET  HE3', ' B 304  PHE  CZ ', -0.402, (5.73, -66.096, 9.758))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
