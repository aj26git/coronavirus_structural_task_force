# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' D 137  ILE HD13', ' D 164  LEU HD23', -0.835, (52.936, -19.353, 24.579)), (' C 147  VAL HG11', ' C 151  VAL  CG2', -0.738, (47.407, 23.386, 16.42)), (' C   1  HIS  CD2', ' C   2  MET  HE3', -0.728, (32.253, 36.419, 2.06)), (' C   6  PHE  CE1', ' C  30  VAL HG11', -0.726, (37.648, 25.547, 9.265)), (' E 129  ALA  O  ', ' E 202  A2R  O11', -0.725, (16.724, 20.943, 56.69)), (' E  99  ASN  ND2', ' E 102  LYS  HE2', -0.666, (12.062, 27.113, 61.272)), (' E 147  VAL HG11', ' E 151  VAL  CG2', -0.664, (12.984, 12.774, 42.618)), (' E 132  PHE  CE1', " E 202  A2R H14'", -0.648, (13.814, 26.113, 57.106)), (' E 148  ARG  NH1', ' E 301  HOH  O  ', -0.617, (4.84, 9.399, 43.773)), (' A  47  GLY  O  ', " A 202  A2R O11'", -0.594, (24.917, 47.635, 38.954)), (' C  31  LYS  HG2', ' C  31  LYS  O  ', -0.586, (38.431, 28.012, 2.718)), (' D   6  PHE  CE1', ' D  30  VAL HG11', -0.577, (32.292, -19.744, 25.709)), (' B   6  PHE  CE1', ' B  30  VAL HG11', -0.565, (29.199, 76.059, 12.36)), (' A 326  HOH  O  ', ' C   7  SER  HB2', -0.551, (29.528, 30.732, 15.099)), (' C 147  VAL HG11', ' C 151  VAL HG21', -0.541, (46.776, 22.938, 17.015)), (' C  47  GLY  O  ', " C 202  A2R O11'", -0.516, (40.807, 5.745, 9.019)), (' D 133  GLY  HA2', ' D 339  HOH  O  ', -0.502, (54.547, -6.167, 25.276)), (' C  31  LYS  C  ', ' C 332  HOH  O  ', -0.495, (38.634, 26.474, 2.737)), (' E 147  VAL HG11', ' E 151  VAL HG22', -0.488, (13.448, 13.399, 42.674)), (' D 116  PHE  O  ', ' D 149  THR HG21', -0.481, (37.484, -18.371, 37.836)), (' C 101  ASN  OD1', ' D  47  GLY  HA3', -0.481, (44.413, -0.796, 20.958)), (' D 137  ILE HD12', ' D 167  SER  OG ', -0.478, (54.976, -21.719, 25.204)), (' C 101  ASN  OD1', ' D  47  GLY  CA ', -0.466, (43.863, -0.972, 21.179)), (' A   9  TYR  HB3', ' A  17  TYR  HB3', -0.451, (34.662, 33.338, 24.001)), (' E   9  TYR  HB3', ' E  17  TYR  HB3', -0.446, (23.478, 9.71, 41.829)), (' B  80  SER  HA ', ' B  94  HIS  O  ', -0.439, (41.364, 62.483, 18.829)), (' E  80  SER  HA ', ' E  94  HIS  O  ', -0.438, (8.412, 25.744, 46.415)), (' D 107  GLN  O  ', ' D 203  EDO  O1 ', -0.438, (52.459, -11.945, 40.308)), (' D   0  GLY  O  ', ' D   1  HIS  CB ', -0.436, (20.791, -23.519, 21.157)), (' E   4  ASN  HB2', ' E   6  PHE  CE2', -0.433, (21.831, 16.437, 35.29)), (' A  80  SER  HA ', ' A  94  HIS  O  ', -0.433, (32.483, 54.736, 30.091)), (' E 110  LYS  HE2', ' E 114  GLU  OE1', -0.432, (2.291, 11.983, 48.417)), (" A 202  A2R O13'", ' A 301  HOH  O  ', -0.425, (21.749, 52.816, 37.273)), (' D  80  SER  HA ', ' D  94  HIS  O  ', -0.424, (39.007, -6.173, 37.141)), (' D 120  GLU  O  ', ' D 149  THR  OG1', -0.423, (35.283, -21.59, 37.181)), (' B 158  LYS  HE2', ' B 306  HOH  O  ', -0.421, (32.021, 75.181, -6.761)), (' C  80  SER  HA ', ' C  94  HIS  O  ', -0.417, (51.502, 13.689, 7.502)), (' C  99  ASN  OD1', ' C 101  ASN  HB2', -0.41, (47.388, 0.558, 17.374)), (' A   2  MET  HE2', ' A   3  VAL  O  ', -0.41, (47.877, 36.236, 28.501)), (' D  99  ASN  ND2', ' D 102  LYS  HE3', -0.406, (50.747, 0.492, 29.702)), (' E  99  ASN HD21', ' E 102  LYS  HE2', -0.404, (12.509, 26.913, 61.953))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
