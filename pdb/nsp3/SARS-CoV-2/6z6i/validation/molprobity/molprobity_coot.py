# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' D 296  CYS  HB3', ' D 521  HOH  O  ', -1.187, (37.785, 30.007, -41.901)), (' A 318  GLU  OE1', ' A 405  EDO  H21', -1.124, (14.104, -3.97, 10.309)), (' A 405  EDO  H11', ' A 513  HOH  O  ', -1.036, (14.765, -1.182, 12.635)), (' A 322 BGLN  HG3', ' A 323  HIS  CD2', -0.979, (12.867, -12.935, 0.855)), (' A 318  GLU  OE1', ' A 405  EDO  C2 ', -0.827, (14.346, -4.052, 10.306)), (' A 322 BGLN  HG3', ' A 323  HIS  NE2', -0.728, (12.921, -13.916, 1.317)), (' B 345  ARG  NH2', ' B 503  HOH  O  ', -0.698, (35.293, -21.184, -14.953)), (' A 322 BGLN  CG ', ' A 323  HIS  CD2', -0.685, (12.89, -12.218, 2.168)), (' A 280  LYS  H  ', ' A 402  EDO  H12', -0.668, (9.501, -20.264, 12.69)), (' A 341  ILE HD11', ' A 367  LYS  HE2', -0.65, (-8.179, 2.588, 11.25)), (' B 376  LYS  NZ ', ' B 504  HOH  O  ', -0.644, (35.474, -24.877, -2.425)), (' A 319  ASN  O  ', ' A 322 BGLN  HG2', -0.644, (12.564, -11.749, 3.409)), (' C 352  ARG  HG2', ' C 407  A1R  N7 ', -0.635, (19.692, 24.188, -37.159)), (' C 255  GLY  HA2', ' C 403  EDO  H12', -0.633, (-3.754, 2.877, -39.639)), (' A 265 BMET  HE3', ' A 298  HIS  HE1', -0.633, (1.074, -20.896, 1.825)), (' D 322  GLN  N  ', ' D 322  GLN  OE1', -0.63, (47.568, 18.991, -46.399)), (' C 304  VAL HG21', ' C 310  ILE HD13', -0.614, (1.351, 18.007, -24.928)), (' B 226  ASP  OD2', ' B 401  A1R  N6 ', -0.613, (21.145, -3.835, 1.314)), (' D 288  SER  HA ', ' D 402  GOL  H31', -0.592, (41.541, 32.431, -37.739)), (' D 257  LEU  HB3', ' D 265  MET  HE1', -0.59, (31.431, 28.515, -41.045)), (' D 228  VAL HG11', ' D 696  HOH  O  ', -0.589, (24.72, 26.334, -36.576)), (' A 280  LYS  H  ', ' A 402  EDO  C1 ', -0.578, (9.507, -20.766, 12.668)), (' D 226  ASP  OD1', ' D 401  A1R  N6 ', -0.573, (24.969, 21.207, -40.632)), (' C 322  GLN  N  ', ' C 322  GLN  OE1', -0.569, (17.998, 15.012, -37.248)), (' C 604  HOH  O  ', ' D 229  GLU  HG3', -0.569, (22.824, 18.977, -34.038)), (' B 372  PHE  HA ', ' B 375  MET  HE2', -0.567, (28.852, -21.247, -8.747)), (' A 405  EDO  C1 ', ' A 513  HOH  O  ', -0.556, (15.008, -2.486, 12.986)), (' D 263  ASN  ND2', ' D 505  HOH  O  ', -0.54, (27.28, 41.051, -42.208)), (' A 224  ASN  HA ', ' A 359  VAL  O  ', -0.537, (-7.641, -3.392, -1.432)), (' A 302  PRO  HD2', ' A 313  LEU HD13', -0.533, (1.896, -9.815, 13.285)), (' C 402  GOL  H31', ' C 406  GOL  H32', -0.53, (13.918, 28.128, -37.083)), (' A 345  ARG  CZ ', ' A 375  MET  HE3', -0.526, (2.436, 5.07, 12.995)), (' B 302  PRO  HD2', ' B 313  LEU HD13', -0.525, (31.746, -6.456, -13.834)), (' A 223  LYS  HG3', ' A 403  EDO  H11', -0.524, (-5.702, -0.32, -6.083)), (' A 362  LYS  HE3', ' A 366  ASP  OD2', -0.524, (-13.462, 4.463, -0.275)), (' B 362  LYS  HE3', ' B 366  ASP  OD2', -0.523, (16.585, -19.607, 0.108)), (' C 352  ARG  HD2', ' C 406  GOL  O2 ', -0.515, (16.651, 26.815, -35.295)), (' C 379  LYS  HE2', ' C 642  HOH  O  ', -0.511, (11.46, 43.757, -29.132)), (' D 275  THR HG21', ' D 682  HOH  O  ', -0.504, (46.602, 41.325, -47.5)), (' D 215  LYS  NZ ', ' D 218  ASP  HA ', -0.502, (42.022, 3.387, -39.545)), (' B 345  ARG  CZ ', ' B 503  HOH  O  ', -0.5, (34.851, -20.889, -14.323)), (' B 251  GLY  O  ', ' B 401  A1R H1N1', -0.499, (23.042, 2.21, -7.17)), (' A 402  EDO  H22', ' A 580  HOH  O  ', -0.496, (12.841, -21.7, 11.238)), (' D 322  GLN  CB ', ' D 405  EDO  H22', -0.486, (48.123, 22.704, -45.835)), (' A 265 BMET  HE3', ' A 298  HIS  CE1', -0.486, (1.046, -20.655, 2.091)), (' A 226  ASP  HB2', ' A 406  A1R  C8 ', -0.483, (-10.941, -10.157, -4.383)), (' A 253  VAL HG23', ' A 401  A1R  O1A', -0.483, (-5.698, -13.062, 4.778)), (' B 402  GOL  H32', ' B 517  HOH  O  ', -0.48, (22.816, 5.351, -10.567)), (' B 360  PHE  HA ', ' B 515  HOH  O  ', -0.477, (19.733, -9.498, 2.32)), (' A 279  LEU HD22', ' A 402  EDO  H21', -0.476, (10.131, -21.204, 9.995)), (' D 224  ASN  HA ', ' D 359  VAL  O  ', -0.464, (25.302, 12.491, -40.778)), (' A 215  LYS  NZ ', ' A 218  ASP  HA ', -0.456, (8.79, 6.077, -2.561)), (' C 407  A1R  O2A', ' D 408  EDO  O2 ', -0.452, (20.109, 25.697, -45.789)), (' D 304  VAL HG21', ' D 310  ILE HD13', -0.452, (31.85, 16.729, -59.915)), (' D 401  A1R  O3N', ' D 404  EDO  H11', -0.446, (28.19, 28.487, -52.992)), (' A 332  SER  HA ', ' A 336  PHE  HB2', -0.445, (-3.361, -12.064, 12.443)), (' A 217  THR HG21', ' A 348  VAL HG13', -0.438, (6.47, 3.817, 5.343)), (' B 224  ASN  HA ', ' B 359  VAL  O  ', -0.436, (22.024, -12.543, 1.157)), (' A 318  GLU  OE1', ' A 405  EDO  C1 ', -0.434, (13.722, -4.073, 11.313)), (' C 260  ALA  HB3', ' C 292  LEU HD11', -0.433, (-0.837, 5.947, -47.477)), (' B 351  VAL HG11', ' B 355  VAL  CG2', -0.432, (37.496, -11.036, -2.183)), (' B 351  VAL HG11', ' B 355  VAL HG21', -0.432, (37.319, -10.769, -2.611)), (' D 215  LYS  HZ3', ' D 218  ASP  HA ', -0.431, (41.877, 3.586, -39.589)), (' B 401  A1R  N6 ', ' B 403  MPO  H61', -0.43, (20.768, -3.538, 0.604)), (' C 352  ARG  HG2', ' C 407  A1R  C8 ', -0.427, (19.628, 24.203, -37.408)), (' C 374  GLU  HG3', ' C 530  HOH  O  ', -0.426, (-2.607, 36.669, -33.853)), (' B 215  LYS  HG3', ' B 221  TYR  CE1', -0.425, (35.235, -18.952, 4.518)), (' A 247  LEU  HB3', ' A 269  SER  HB3', -0.421, (1.87, -25.474, 5.457)), (' B 360  PHE  CA ', ' B 515  HOH  O  ', -0.419, (19.57, -9.509, 2.14)), (' A 303  ASN  ND2', ' A 306  LYS  HG3', -0.416, (-4.778, -17.373, 17.676)), (' C 372  PHE  HA ', ' C 375  MET  HG2', -0.416, (2.72, 31.946, -33.801)), (' A 223  LYS  CG ', ' A 403  EDO  H11', -0.416, (-5.328, -0.891, -5.653)), (' C 302  PRO  HD2', ' C 313  LEU HD13', -0.415, (5.238, 15.542, -28.295)), (' C 224  ASN  HA ', ' C 359  VAL  O  ', -0.414, (-4.616, 22.187, -43.88)), (' C 407  A1R  N4N', ' C 407  A1R  O2B', -0.413, (21.811, 20.303, -48.527)), (' B 237  THR  O  ', ' B 294  LYS  HB3', -0.413, (38.248, 0.612, 7.118)), (' C 257  LEU  O  ', ' C 261  THR HG23', -0.412, (-0.117, 3.974, -45.5)), (' B 294  LYS  HG2', ' B 295  HIS  CD2', -0.409, (40.218, 2.676, 6.921)), (' A 403  EDO  H21', ' A 563  HOH  O  ', -0.408, (-8.646, 2.288, -6.327)), (' C 402  GOL  H31', ' C 406  GOL  C3 ', -0.408, (14.494, 28.246, -36.844)), (' D 402  GOL  H12', ' D 666  HOH  O  ', -0.405, (44.542, 35.5, -38.871)), (' D 362  LYS  HE3', ' D 366  ASP  OD2', -0.405, (20.3, 5.348, -41.3)), (' C 407  A1R H1N2', ' D 334  GLY  HA2', -0.404, (24.011, 18.785, -51.603)), (' C 235  LYS  N  ', ' C 236  PRO  CD ', -0.401, (5.709, 12.827, -52.377)), (' B 213  TYR  CD2', ' B 223  LYS  HB2', -0.401, (28.312, -13.968, 5.087))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
