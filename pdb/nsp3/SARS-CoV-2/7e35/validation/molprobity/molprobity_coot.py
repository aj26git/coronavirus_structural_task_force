# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 169 ', 'THR', 0.0729315174266954, (-14.305999999999996, -19.403, 4.582))]
data['cbeta'] = []
data['probe'] = [(' A 163  LEU  HB3', ' A 402  GYX  H24', -1.088, (-6.858, -28.299, 0.365)), (' A   4  ARG  HB3', ' A  24  MET  HE3', -1.014, (13.69, -11.609, 41.245)), (' B 261  CYS  HG ', ' B 305  PHE  HD2', -0.951, (-20.916, -43.179, 11.06)), (' A  34  PRO  HB2', ' A  59  LEU HD21', -0.86, (-3.861, -20.884, 28.008)), (' B 184  ARG  HE ', ' B 238  GLN  NE2', -0.858, (-7.419, -37.081, 16.227)), (' B 284  TYR  HB3', ' B 291  LEU HD11', -0.846, (-29.086, -52.176, 7.771)), (' B 128  PHE  H  ', ' B 134  GLN HE21', -0.796, (-25.505, -32.104, 23.525)), (' B 186  LEU HD22', ' B 235  LEU  HA ', -0.793, (-1.258, -38.186, 14.394)), (' A 237  GLN  HG2', ' A 312  THR HG22', -0.791, (-36.801, -6.717, -6.039)), (' B 200  LEU HD23', ' B 204  GLU  HB3', -0.751, (-6.849, -30.034, 13.654)), (' B 148  PHE  O  ', ' B 152  ILE HD12', -0.749, (-32.326, -30.523, 12.882)), (' B 123  GLN  OE1', ' B 276  HIS  NE2', -0.74, (-24.475, -45.423, 10.994)), (' A 302  THR HG21', ' A 402  GYX  H17', -0.726, (-14.223, -23.99, -5.474)), (' A 252  TYR  O  ', ' A 298  LYS  HA ', -0.722, (-12.504, -17.779, -18.838)), (' B 128  PHE  H  ', ' B 134  GLN  NE2', -0.718, (-25.682, -33.099, 23.511)), (' B 257  GLY  N  ', ' B 279  SER  HG ', -0.717, (-18.26, -53.956, 11.067)), (' A  59  LEU  N  ', ' A  59  LEU HD22', -0.692, (-5.217, -18.204, 28.808)), (' B  40  ALA  HA ', ' B  89  ASN  ND2', -0.675, (-45.593, -22.527, 7.674)), (' B 286  ILE HG13', ' B 291  LEU HD13', -0.662, (-30.636, -49.223, 7.672)), (' B  72  TYR  HA ', ' B 131  PRO  HG2', -0.658, (-31.321, -22.454, 24.762)), (' B 158  LYS  NZ ', ' B 164  GLY  HA2', -0.658, (-25.665, -29.109, 2.181)), (' B 171  SER  HA ', ' B 207  MET  HE1', -0.646, (-17.758, -30.175, 11.223)), (' B 184  ARG  HE ', ' B 238  GLN HE21', -0.637, (-6.63, -37.594, 16.787)), (' A   5  THR HG22', ' A  23  ASP  HA ', -0.636, (7.842, -13.658, 42.129)), (' B 128  PHE  HB2', ' B 134  GLN  HG2', -0.633, (-27.475, -31.155, 23.437)), (' B 148  PHE  CD2', ' B 152  ILE HD11', -0.622, (-31.805, -33.0, 13.62)), (' B  60  PRO  HD3', ' B  81  LEU HD22', -0.615, (-37.437, -14.588, 16.932)), (' A  90  HIS  HB2', ' A 160  VAL HG21', -0.61, (0.509, -19.598, 11.183)), (' B  40  ALA  HA ', ' B  89  ASN HD22', -0.608, (-45.013, -22.639, 8.28)), (' A  29  GLY  HA2', ' A  33  GLY  O  ', -0.606, (1.01, -20.89, 32.313)), (' B 148  PHE  CE2', ' B 152  ILE HD11', -0.593, (-30.666, -33.017, 14.402)), (' B 129  ASN  OD1', ' B 178  ASN  HB2', -0.59, (-20.53, -28.859, 24.817)), (' A 159  THR  N  ', ' A 162  GLU  OE1', -0.584, (-6.32, -25.529, 9.798)), (' B 184  ARG  NE ', ' B 238  GLN  NE2', -0.584, (-7.675, -36.589, 16.415)), (' A  34  PRO  CB ', ' A  59  LEU HD21', -0.583, (-2.689, -20.973, 28.551)), (' B 128  PHE  N  ', ' B 134  GLN HE21', -0.581, (-25.21, -31.866, 23.869)), (' B 237  GLN  HG2', ' B 312  THR HG22', -0.579, (-1.651, -40.844, 22.967)), (' A  63  ASP  HA ', ' A  66  ARG HH11', -0.576, (-15.81, -17.325, 33.932)), (' A 134  GLN  HA ', ' A 134  GLN  OE1', -0.573, (-14.45, -5.445, 11.782)), (' B 203  VAL HG13', ' B 207  MET  HE3', -0.572, (-15.494, -30.583, 13.019)), (' B 172  TYR  O  ', ' B 175  GLN  HB2', -0.567, (-20.69, -25.922, 14.075)), (' B 285  CYS  O  ', ' B 291  LEU HD12', -0.567, (-29.843, -51.208, 5.785)), (' A 269  TYR  HE2', ' B 269  TYR  HE2', -0.56, (-16.263, -30.735, -3.676)), (' B  12  VAL HG11', ' B  60  PRO  HG3', -0.559, (-37.293, -13.933, 19.93)), (' B  38  ASP  O  ', ' B  92  LYS  NZ ', -0.559, (-46.553, -25.644, 11.381)), (' A 211  THR  O  ', ' A 245  MET  HB3', -0.557, (-22.512, -18.315, -9.549)), (' B 313  THR  CG2', ' B 315  ILE HD12', -0.551, (3.386, -44.558, 15.403)), (' A   9  PHE  HA ', ' A  18  HIS  O  ', -0.551, (-2.333, -7.721, 33.91)), (' B 313  THR HG22', ' B 315  ILE  H  ', -0.548, (3.76, -44.717, 16.863)), (' A 236  VAL HG23', ' A 313  THR HG22', -0.541, (-39.38, -10.495, -9.929)), (' B 259  PHE  O  ', ' B 279  SER  HB3', -0.536, (-18.933, -51.02, 12.513)), (' B 158  LYS  HZ3', ' B 164  GLY  HA2', -0.535, (-25.836, -28.979, 1.937)), (' A 256  HIS  HB2', ' A 283  LEU HD11', -0.525, (-11.541, -7.225, -18.035)), (' B 133  LEU HD11', ' B 155  TYR  CE2', -0.524, (-28.717, -25.812, 16.983)), (' A 165  ASP  HB2', ' A 402  GYX  H22', -0.521, (-12.252, -26.581, -0.615)), (' B  87  ALA  HA ', ' B 160  VAL  CG2', -0.512, (-37.765, -25.691, 6.487)), (' B 109  ASP  O  ', ' B 161  GLY  HA2', -0.511, (-35.196, -31.145, -0.065)), (' B 113  TYR  CG ', ' B 164  GLY  HA3', -0.511, (-27.542, -31.786, 2.628)), (' B  84  TYR  HE1', ' B 151  LEU  HG ', -0.505, (-35.22, -25.945, 15.634)), (' A 235  LEU HD21', ' A 238  GLN  HB2', -0.503, (-31.745, -10.613, -5.996)), (' A 212  LEU HD11', ' A 247  ALA  HB3', -0.502, (-18.909, -22.34, -11.521)), (' B 119  LEU  O  ', ' B 123  GLN  NE2', -0.499, (-26.881, -43.067, 13.217)), (' A  34  PRO  HA ', ' A  43  THR  OG1', -0.497, (0.373, -21.879, 28.708)), (' B  90  HIS  CB ', ' B 160  VAL HG11', -0.497, (-39.259, -28.491, 4.219)), (' A 180  ASP  OD1', ' B  78  PRO  HG2', -0.493, (-29.4, -9.347, 12.177)), (' B 130  PRO  HG2', ' B 133  LEU HD13', -0.492, (-26.917, -25.747, 19.584)), (' B 190  CYS  SG ', ' B 225  CYS  SG ', -0.49, (8.604, -30.733, 4.019)), (' B  99  VAL HG21', ' B 286  ILE HG21', -0.489, (-32.292, -46.099, 8.425)), (' A  39  GLY  HA2', ' A  85  MET  HE3', -0.488, (-0.18, -15.586, 20.649)), (' A 185  VAL HG12', ' A 236  VAL  CG1', -0.487, (-38.83, -13.471, -4.909)), (' A 281  GLU  HG2', ' A 282  THR  N  ', -0.486, (-7.886, -1.38, -15.779)), (' B 113  TYR  CD2', ' B 164  GLY  HA3', -0.482, (-27.192, -31.915, 3.52)), (' B 152  ILE HG23', ' B 173  LEU HD11', -0.48, (-27.075, -30.352, 12.279)), (' B 269  TYR  CD1', ' B 269  TYR  O  ', -0.48, (-20.961, -30.741, -5.817)), (' A 281  GLU  HG2', ' A 282  THR HG23', -0.478, (-7.301, -1.524, -16.748)), (' A 256  HIS  HB2', ' A 283  LEU  CD1', -0.474, (-11.14, -6.901, -18.021)), (' B 177  ALA  HB3', ' B 179  LEU HD21', -0.473, (-19.266, -30.969, 19.136)), (' A 139  ARG  HG3', ' A 139  ARG HH11', -0.473, (-5.257, -5.075, 14.527)), (' B 165  ASP  O  ', ' B 169  THR HG22', -0.471, (-23.085, -32.363, 6.289)), (' A 152  ILE HG22', ' A 173  LEU HD21', -0.47, (-12.93, -15.701, 8.821)), (' A 186  LEU  HB2', ' A 198  THR HG23', -0.469, (-36.983, -18.367, -3.981)), (' A 125  GLU  HB3', ' A 241  PRO  HB2', -0.468, (-22.17, -4.347, 0.309)), (' A 165  ASP  OD1', ' A 167  ARG  HG2', -0.467, (-15.023, -23.428, -1.55)), (' B 158  LYS  HZ2', ' B 164  GLY  HA2', -0.464, (-26.298, -29.281, 2.614)), (' B 167  ARG HH21', ' B 168  GLU  HG3', -0.461, (-18.262, -29.237, 2.92)), (' B 125  GLU  HB3', ' B 241  PRO  HB2', -0.459, (-17.825, -40.326, 22.609)), (' A 203  VAL HG12', ' B 157  ASN  OD1', -0.459, (-26.788, -18.43, 6.575)), (' B 186  LEU  CD2', ' B 235  LEU  HA ', -0.458, (-1.95, -37.818, 15.249)), (' A  36  TYR  CB ', ' A  85  MET  HE2', -0.456, (-0.134, -15.453, 23.581)), (' A 114  LEU HD22', ' A 152  ILE HD12', -0.456, (-8.111, -16.385, 6.627)), (' B 184  ARG  HB2', ' B 238  GLN HE22', -0.455, (-7.14, -35.653, 17.82)), (' B 185  VAL  O  ', ' B 186  LEU HD23', -0.455, (-1.361, -36.616, 16.837)), (' B 241  PRO  HA ', ' B 308  GLU  O  ', -0.453, (-14.013, -42.513, 22.624)), (' A 283  LEU  N  ', ' A 283  LEU HD12', -0.45, (-9.216, -6.333, -16.73)), (' A  27  THR HG22', ' A  30  GLN  CD ', -0.447, (6.112, -23.268, 36.241)), (' B 171  SER  CA ', ' B 207  MET  HE1', -0.447, (-17.793, -30.256, 10.97)), (' A 269  TYR  CD1', ' A 269  TYR  O  ', -0.446, (-10.626, -31.643, -2.299)), (' B 402  GYX  H15', ' B 402  GYX  H4 ', -0.446, (-20.598, -35.969, -0.141)), (' B  84  TYR  CE1', ' B 151  LEU  HG ', -0.445, (-35.267, -25.846, 15.872)), (' A 148  PHE  O  ', ' A 152  ILE HG12', -0.445, (-7.959, -14.283, 9.653)), (' A 402  GYX  H1 ', ' A 402  GYX  O20', -0.439, (-10.783, -28.807, 1.001)), (' B  99  VAL HG21', ' B 286  ILE  CG2', -0.438, (-32.496, -46.08, 8.255)), (' B  90  HIS  HB3', ' B 160  VAL HG11', -0.435, (-39.653, -28.861, 4.382)), (' A  28  TYR  OH ', ' A  51  HIS  ND1', -0.434, (7.535, -12.455, 32.22)), (' A  36  TYR  HA ', ' A  40  ALA  O  ', -0.433, (3.099, -16.862, 24.525)), (' B 225  CYS  SG ', ' B 227  CYS  SG ', -0.429, (8.834, -29.707, 2.701)), (' A  59  LEU  CD2', ' A  59  LEU  N  ', -0.429, (-5.331, -19.086, 29.318)), (' A  11  THR  O  ', ' A  57  TYR  HA ', -0.429, (-4.312, -12.455, 27.378)), (' B  63  ASP  O  ', ' B  67  VAL HG12', -0.429, (-33.864, -10.755, 27.418)), (' A 302  THR  CG2', ' A 402  GYX  H17', -0.429, (-14.818, -23.341, -5.629)), (' B 185  VAL  O  ', ' B 236  VAL HG12', -0.426, (0.39, -36.753, 17.862)), (' A 139  ARG  HG3', ' A 139  ARG  NH1', -0.425, (-4.77, -5.102, 14.746)), (' A 113  TYR  CD1', ' A 164  GLY  HA3', -0.421, (-7.292, -22.673, 2.493)), (' A 212  LEU  O  ', ' A 306  TYR  OH ', -0.419, (-20.847, -14.529, -12.11)), (' B 313  THR  CG2', ' B 314  THR  N  ', -0.419, (2.475, -45.142, 17.652)), (' B 167  ARG HH21', ' B 168  GLU  CG ', -0.418, (-18.628, -29.039, 3.221)), (' A  42  VAL  HB ', ' A  45  ILE  CG2', -0.417, (7.175, -17.585, 28.574)), (' B 123  GLN  HB2', ' B 123  GLN HE21', -0.416, (-26.415, -44.389, 15.214)), (' A  14  ASN  HB2', ' A  57  TYR  OH ', -0.416, (-5.377, -8.453, 22.806)), (' A  89  ASN  HA ', ' A  92  LYS  HE2', -0.415, (3.632, -16.186, 16.433)), (' B 252  TYR  O  ', ' B 298  LYS  HA ', -0.412, (-16.253, -51.584, 0.171)), (' B 269  TYR  N  ', ' B 402  GYX  H27', -0.411, (-18.91, -34.77, -7.261)), (' A 244  MET  HE2', ' A 246  SER  OG ', -0.411, (-18.215, -18.918, -3.379)), (' A 114  LEU HD22', ' A 152  ILE  CD1', -0.409, (-7.71, -16.061, 6.641)), (' A 184  ARG HH22', ' A 243  VAL HG13', -0.408, (-26.636, -13.81, -4.255)), (' B 276  HIS  O  ', ' B 285  CYS  HA ', -0.408, (-26.477, -48.262, 5.628)), (' A 149  CYS  O  ', ' A 152  ILE HG13', -0.405, (-7.121, -16.379, 9.575)), (' B 100  ASN  ND2', ' B 284  TYR  CG ', -0.403, (-28.636, -52.822, 11.185)), (' B 280  LYS  HB2', ' B 281  GLU  H  ', -0.403, (-25.609, -55.254, 14.885)), (' A 120  THR HG21', ' A 305  PHE  CZ ', -0.401, (-15.209, -13.525, -2.314)), (' B  99  VAL  O  ', ' B  99  VAL HG23', -0.401, (-32.515, -47.616, 11.599)), (' A   6  ILE HD11', ' A  47  PRO  HB3', -0.401, (8.382, -12.093, 34.822)), (' A 264  GLU  CD ', ' A 297  TYR  OH ', -0.4, (-6.302, -17.486, -13.107))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
