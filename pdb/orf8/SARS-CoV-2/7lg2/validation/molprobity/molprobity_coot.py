# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('C', '   7 ', 'GLN', 0.01209053500377051, (-5.366, -26.565, -4.418))]
data['omega'] = [('A', ' 210 ', 'PRO', None, (-5.94, -17.951, -39.52200000000003)), ('B', '  32 ', 'PRO', None, (-17.423, -40.145, -23.662000000000013))]
data['rota'] = [('A', '   6 ', 'ARG', 0.11191225244586989, (-4.964, -21.903, -23.834000000000014)), ('A', '  35 ', 'ARG', 0.07382754523292384, (2.1020000000000034, -31.62799999999999, -24.883000000000013)), ('A', '  38 ', 'SER', 0.2383569113152054, (1.401, -39.746, -18.766)), ('A', '  58 ', 'GLU', 0.0739659126475411, (15.161, -23.980000000000015, -17.528000000000013)), ('A', ' 146 ', 'LYS', 0.2597452801773135, (-11.999, -24.6, -0.23300000000000012)), ('A', ' 177 ', 'GLU', 0.26136149646263124, (6.644, -16.174, -38.742000000000026)), ('A', ' 215 ', 'LEU', 0.0818148451181056, (-18.892, -19.32, -45.52000000000003)), ('A', ' 247 ', 'VAL', 0.13585906095149392, (-26.852000000000015, -25.629, -51.01500000000003)), ('A', ' 273 ', 'ARG', 0.08867007163078847, (-20.572, -17.847000000000016, -58.38300000000003)), ('C', '   6 ', 'GLN', 0.00475203260324139, (-2.201999999999998, -25.016, -5.961000000000004)), ('C', '   6 ', 'GLN', 0.07258282679765482, (-1.8490000000000002, -24.996, -5.866000000000003))]
data['cbeta'] = [('A', ' 113 ', 'TYR', ' ', 0.4001977348618371, (-10.545, -19.05, -19.617)), ('A', ' 176 ', 'LYS', ' ', 0.2730371858216532, (7.393000000000003, -13.468000000000007, -35.493)), ('A', ' 178 ', 'THR', ' ', 0.27008824754368893, (4.365, -19.942, -36.95600000000003))]
data['probe'] = [(' C   6 AGLN  O  ', ' C   7 AGLN  HB2', -0.616, (-5.804, -24.868, -5.9)), (' A  72  GLN  OE1', ' A  75  ARG  NH1', -0.561, (-0.323, -38.406, -8.298)), (' A 187  THR  HA ', ' A 204  TRP  O  ', -0.56, (-12.708, -22.747, -51.632)), (' C   7 AGLN  HA ', ' C   7 AGLN  OE1', -0.554, (-5.333, -26.379, -2.981)), (' A 183  ASP  O  ', ' A 208  PHE  HA ', -0.546, (-5.46, -19.783, -44.959)), (' A 117  ALA  HB2', ' B  60  TRP  CE2', -0.53, (-16.304, -28.977, -18.604)), (' A  68  LYS  O  ', ' A  72  GLN  HG2', -0.519, (1.791, -34.458, -11.054)), (' A  37  ASP  HB3', ' A  40  ALA  HB2', -0.492, (3.146, -39.387, -24.043)), (' C   6 AGLN  CG ', ' C   7 AGLN  HG2', -0.492, (-4.219, -23.872, -3.856)), (' A  47  PRO  O  ', ' A  48  ARG  HD3', -0.491, (6.342, -31.421, -30.117)), (' A 138  MET  HE2', ' A 141  GLN  NE2', -0.487, (-25.01, -26.361, -3.102)), (' C   6 AGLN  HG2', ' C   7 AGLN  HG2', -0.486, (-4.386, -23.488, -3.894)), (' A 143  THR HG23', ' C   9  VAL  HA ', -0.478, (-12.036, -27.985, -5.684)), (' A 114  HIS  CG ', ' A 156  LEU HD21', -0.462, (-8.455, -21.158, -13.251)), (' A  72  GLN  HA ', ' A  72  GLN  OE1', -0.453, (-0.44, -36.715, -9.233)), (' A  51  TRP  CZ2', ' A 179  LEU HD11', -0.445, (3.659, -19.852, -31.357)), (' A   2  SER  OG ', ' A 304  PGE  H52', -0.441, (-8.755, -12.577, -30.28)), (' A  45  MET  CE ', ' C   2  LEU HD11', -0.423, (3.082, -27.953, -19.261)), (' A  49  ALA  O  ', ' A  52  ILE HG22', -0.422, (8.113, -25.716, -30.126)), (' A 111  ARG  NH1', ' A 128  GLU  OE2', -0.419, (-15.375, -12.556, -20.41)), (' A 230  LEU  CD1', ' A 245  ALA  HB2', -0.418, (-20.771, -23.584, -44.956)), (' A 249  VAL HG22', ' A 257  TYR  CZ ', -0.416, (-30.008, -22.449, -54.777)), (' A 218  GLN  O  ', ' A 257  TYR  HA ', -0.407, (-27.015, -17.644, -54.341)), (' A  51  TRP  O  ', ' A  54  GLN  HG2', -0.405, (11.492, -21.113, -30.35)), (' A  11  SER  OG ', ' A  22  PHE  HD1', -0.404, (-5.126, -35.555, -15.737)), (' A   6  ARG  NH1', ' A 113  TYR  CE1', -0.4, (-9.06, -16.827, -23.48))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
