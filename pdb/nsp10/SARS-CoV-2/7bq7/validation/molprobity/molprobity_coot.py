# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', '  86 ', 'PRO', 0.04676476088176861, (-97.91199999999998, -1.552, 2.723)), ('B', '  88 ', 'GLY', 0.006179704423557145, (-95.61400000000003, 2.0689999999999995, 6.457))]
data['omega'] = [('A', ' 214 ', 'LYS', None, (-58.69900000000003, 22.979, 19.581))]
data['rota'] = [('A', '  82 ', 'THR', 0.028124231958388368, (-87.15800000000003, 19.598, 16.92)), ('A', '  94 ', 'LEU', 0.020520275068357588, (-80.22799999999998, 15.813, 8.183)), ('A', ' 100 ', 'LEU', 0.0, (-84.537, 8.924, 27.391)), ('A', ' 109 ', 'SER', 0.28476947030154076, (-84.26400000000001, 9.529999999999998, 12.734)), ('A', ' 167 ', 'VAL', 0.03090147041585799, (-73.112, 23.841, 20.031)), ('A', ' 170 ', 'LYS', 0.03207848049615257, (-79.10100000000001, 23.786999999999995, 28.136000000000003)), ('A', ' 180 ', 'LEU', 0.0, (-68.50900000000003, 21.935999999999996, 29.516)), ('A', ' 212 ', 'LEU', 0.27062869217268826, (-61.450000000000024, 24.668, 16.762)), ('A', ' 239 ', 'LEU', 0.252196888423861, (-89.876, 38.7, 30.422)), ('A', ' 254 ', 'LEU', 0.10844196930863967, (-78.13600000000001, 28.761, 3.49)), ('A', ' 255 ', 'ARG', 0.2628660034433244, (-74.49500000000002, 29.856, 3.09))]
data['cbeta'] = []
data['probe'] = [(' B 124  LYS  HA ', ' B 128  CYS  SG ', -1.134, (-110.343, 20.878, -2.891)), (' A  43  ASN  ND2', ' A 301  SAM  OXT', -1.02, (-90.38, 21.627, 25.101)), (' A 260  MET  HE2', ' A 262  LEU HD11', -0.946, (-59.693, 21.576, 3.662)), (' B  74  CYS  SG ', ' B  92  LEU HD12', -0.806, (-99.427, 12.816, 9.937)), (' B  90  CYS  SG ', ' B 201   ZN ZN  ', -0.806, (-98.278, 9.953, 10.351)), (' B  74  CYS  SG ', ' B  92  LEU  HB2', -0.767, (-98.59, 13.423, 9.623)), (' A 255  ARG  NH2', ' A 278  GLY  O  ', -0.754, (-68.854, 30.101, 7.047)), (' B  90  CYS  HG ', ' B 201   ZN ZN  ', -0.742, (-98.134, 9.224, 10.165)), (' A 180  LEU HD13', ' A 206  LEU HD12', -0.725, (-72.52, 24.501, 28.829)), (' A 140  THR  O  ', ' A 401  HOH  O  ', -0.697, (-79.045, 20.716, 52.487)), (' B  75  LEU HD22', ' B 112  LEU HD11', -0.694, (-107.09, 8.974, 12.952)), (' A 267  ILE  O  ', ' A 267  ILE HD12', -0.693, (-53.632, 24.068, 12.039)), (' A  79  ALA  HB1', ' A  82  THR HG23', -0.665, (-88.699, 16.692, 18.646)), (' A   2  SER  O  ', ' A 402  HOH  O  ', -0.663, (-83.814, 47.37, 22.498)), (' B  74  CYS  SG ', ' B  92  LEU  CD1', -0.607, (-99.764, 13.259, 9.616)), (' B 117  CYS  HB3', ' B 120  CYS  HB3', -0.596, (-105.9, 21.418, -5.211)), (' B  74  CYS  HB2', ' B  77  CYS  HB2', -0.594, (-98.207, 10.411, 13.353)), (' A 279  ARG  HG2', ' A 279  ARG HH11', -0.593, (-66.631, 32.102, 3.955)), (' A 241  SER  HB2', ' A 244  LEU HD12', -0.589, (-93.475, 35.302, 22.193)), (' B  53  GLN  HG2', ' B 122  MET  HE2', -0.587, (-101.347, 25.732, -2.516)), (' A 263  LYS  HZ2', ' A 264  GLU  HB2', -0.579, (-52.686, 14.413, 9.963)), (' A  69  HIS  ND1', ' A  82  THR HG22', -0.577, (-85.583, 17.973, 18.709)), (' B 124  LYS  O  ', ' B 301  HOH  O  ', -0.538, (-111.249, 18.831, 1.498)), (' A 184  MET  HE1', ' A 207  ILE  C  ', -0.526, (-71.623, 27.534, 23.312)), (' A 253  LYS  HD2', ' A 255  ARG  HG2', -0.5, (-75.016, 32.667, 5.161)), (' B  83  HIS  NE2', ' B  90  CYS  SG ', -0.494, (-97.411, 8.58, 9.8)), (' A 131  MET  HE3', ' A 153  ILE HD11', -0.488, (-76.785, 16.691, 27.195)), (' B  74  CYS  SG ', ' B  92  LEU  CB ', -0.478, (-98.826, 13.518, 9.627)), (' A 260  MET  O  ', ' A 282  ILE  HA ', -0.464, (-63.305, 19.32, 6.586)), (' A 253  LYS  NZ ', ' A 255  ARG  HD2', -0.456, (-74.318, 32.419, 7.492)), (' A 263  LYS  O  ', ' A 266  GLN  HB2', -0.456, (-53.592, 17.619, 8.157)), (' A 103  PHE  CE2', ' A 105  SER  HB2', -0.45, (-88.652, 13.175, 18.612)), (' A  32  ASP  HB2', ' A 239  LEU HD13', -0.448, (-90.828, 37.387, 34.426)), (' A 179  ASP  OD2', ' A 403  HOH  O  ', -0.446, (-66.084, 18.58, 34.684)), (' A 216  ARG  NH2', ' A 217  GLU  OE2', -0.444, (-62.188, 33.226, 23.921)), (' B 117  CYS  HA ', ' B 124  LYS  HE3', -0.434, (-107.942, 17.487, -4.57)), (' A 279  ARG  HG2', ' A 279  ARG  NH1', -0.429, (-66.234, 32.363, 3.647)), (' A 254  LEU HD12', ' A 256  GLY  H  ', -0.426, (-75.211, 27.158, 2.508)), (' A  41  MET  HG2', ' B 303  HOH  O  ', -0.422, (-96.838, 25.115, 20.991)), (' A 137  LYS  HA ', ' A 137  LYS  HD3', -0.415, (-82.232, 22.705, 41.585)), (' A 117  THR  O  ', ' A 292  SER  HA ', -0.411, (-77.036, 3.534, 21.116)), (' B  43  LYS  HE3', ' B 307  HOH  O  ', -0.409, (-100.458, 30.129, 16.34)), (' A 206  LEU  HA ', ' A 206  LEU HD23', -0.404, (-73.609, 28.98, 27.339)), (' A  82  THR HG21', ' A  97  ASP  OD2', -0.403, (-86.729, 15.336, 17.663)), (' B  52  GLY  HA2', ' B  65  GLN  OE1', -0.403, (-102.369, 28.219, 4.388)), (' A  62  PRO  O  ', ' A 404  HOH  O  ', -0.401, (-76.517, 23.656, 4.15)), (' A 103  PHE  HE2', ' A 105  SER  HB2', -0.4, (-88.604, 13.434, 18.623))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
